
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  officeId: 'officeId'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.OfficeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  cnpj: 'cnpj',
  phone: 'phone',
  email: 'email',
  address: 'address',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WhatsappConfigScalarFieldEnum = {
  id: 'id',
  instanceId: 'instanceId',
  phone: 'phone',
  qrCode: 'qrCode',
  isActive: 'isActive',
  apiUrl: 'apiUrl',
  apiKey: 'apiKey',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  officeId: 'officeId'
};

exports.Prisma.WhatsAppInstanceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phoneNumber: 'phoneNumber',
  status: 'status',
  qrCode: 'qrCode',
  webhookUrl: 'webhookUrl',
  officeId: 'officeId',
  createdById: 'createdById',
  connectionData: 'connectionData',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WhatsAppContactScalarFieldEnum = {
  id: 'id',
  instanceId: 'instanceId',
  remoteJid: 'remoteJid',
  phoneNumber: 'phoneNumber',
  name: 'name',
  pushName: 'pushName',
  profilePicUrl: 'profilePicUrl',
  isGroup: 'isGroup',
  lastSeen: 'lastSeen',
  isBlocked: 'isBlocked',
  clientId: 'clientId',
  tags: 'tags',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WhatsAppConversationScalarFieldEnum = {
  id: 'id',
  instanceId: 'instanceId',
  contactId: 'contactId',
  remoteJid: 'remoteJid',
  title: 'title',
  isGroup: 'isGroup',
  lastMessageId: 'lastMessageId',
  lastMessageAt: 'lastMessageAt',
  unreadCount: 'unreadCount',
  isArchived: 'isArchived',
  isPinned: 'isPinned',
  assignedUserId: 'assignedUserId',
  status: 'status',
  aiEnabled: 'aiEnabled',
  currentAgentId: 'currentAgentId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WhatsAppMessageScalarFieldEnum = {
  id: 'id',
  instanceId: 'instanceId',
  conversationId: 'conversationId',
  contactId: 'contactId',
  remoteJid: 'remoteJid',
  messageId: 'messageId',
  fromMe: 'fromMe',
  messageType: 'messageType',
  content: 'content',
  quotedMessageId: 'quotedMessageId',
  mediaUrl: 'mediaUrl',
  mediaSize: 'mediaSize',
  mimetype: 'mimetype',
  fileName: 'fileName',
  caption: 'caption',
  location: 'location',
  isForwarded: 'isForwarded',
  timestamp: 'timestamp',
  status: 'status',
  isDeleted: 'isDeleted',
  isEdited: 'isEdited',
  aiResponse: 'aiResponse',
  toolExecutionId: 'toolExecutionId',
  importedFrom: 'importedFrom',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WhatsAppImportScalarFieldEnum = {
  id: 'id',
  instanceId: 'instanceId',
  contactId: 'contactId',
  fileName: 'fileName',
  fileSize: 'fileSize',
  totalMessages: 'totalMessages',
  importedMessages: 'importedMessages',
  failedMessages: 'failedMessages',
  mediaFiles: 'mediaFiles',
  status: 'status',
  errorMessage: 'errorMessage',
  uploadedById: 'uploadedById',
  importedAt: 'importedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  email: 'email',
  document: 'document',
  notes: 'notes',
  isLead: 'isLead',
  dateOfBirth: 'dateOfBirth',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  officeId: 'officeId'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  status: 'status',
  lastMessageAt: 'lastMessageAt',
  metadata: 'metadata',
  currentAgentType: 'currentAgentType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clientId: 'clientId',
  officeId: 'officeId',
  createdBy: 'createdBy',
  assignedTo: 'assignedTo',
  whatsappConfigId: 'whatsappConfigId'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  type: 'type',
  isFromClient: 'isFromClient',
  isFromAI: 'isFromAI',
  metadata: 'metadata',
  externalId: 'externalId',
  mediaUrl: 'mediaUrl',
  transcription: 'transcription',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  conversationId: 'conversationId',
  userId: 'userId',
  whatsappConfigId: 'whatsappConfigId'
};

exports.Prisma.AudioTranscriptionScalarFieldEnum = {
  id: 'id',
  originalText: 'originalText',
  provider: 'provider',
  confidence: 'confidence',
  duration: 'duration',
  language: 'language',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  messageId: 'messageId'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  color: 'color',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  officeId: 'officeId'
};

exports.Prisma.ClientTagScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  clientId: 'clientId',
  tagId: 'tagId'
};

exports.Prisma.ConversationTagScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  conversationId: 'conversationId',
  tagId: 'tagId'
};

exports.Prisma.CustomStatusScalarFieldEnum = {
  id: 'id',
  name: 'name',
  color: 'color',
  description: 'description',
  isActive: 'isActive',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  officeId: 'officeId'
};

exports.Prisma.ConversationCustomStatusScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  conversationId: 'conversationId',
  customStatusId: 'customStatusId'
};

exports.Prisma.AiAgentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  prompt: 'prompt',
  model: 'model',
  provider: 'provider',
  aiModel: 'aiModel',
  temperature: 'temperature',
  maxTokens: 'maxTokens',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  officeId: 'officeId'
};

exports.Prisma.AIProviderConfigScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  apiKey: 'apiKey',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  officeId: 'officeId'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  originalName: 'originalName',
  mimeType: 'mimeType',
  size: 'size',
  url: 'url',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clientId: 'clientId',
  officeId: 'officeId'
};

exports.Prisma.ToolScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  webhookUrl: 'webhookUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  officeId: 'officeId',
  createdById: 'createdById'
};

exports.Prisma.ToolExecutionScalarFieldEnum = {
  id: 'id',
  requestId: 'requestId',
  description: 'description',
  status: 'status',
  requestData: 'requestData',
  responseData: 'responseData',
  errorMessage: 'errorMessage',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  conversationId: 'conversationId',
  agentId: 'agentId',
  toolId: 'toolId'
};

exports.Prisma.WebhookScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url',
  secret: 'secret',
  isActive: 'isActive',
  description: 'description',
  retryCount: 'retryCount',
  timeoutMs: 'timeoutMs',
  headers: 'headers',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  officeId: 'officeId'
};

exports.Prisma.WebhookExecutionScalarFieldEnum = {
  id: 'id',
  status: 'status',
  requestBody: 'requestBody',
  responseBody: 'responseBody',
  responseCode: 'responseCode',
  executedAt: 'executedAt',
  attempt: 'attempt',
  error: 'error',
  webhookId: 'webhookId'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  userId: 'userId',
  officeId: 'officeId'
};

exports.Prisma.GlobalConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  USER: 'USER'
};

exports.WhatsAppInstanceStatus = exports.$Enums.WhatsAppInstanceStatus = {
  CONNECTING: 'CONNECTING',
  CONNECTED: 'CONNECTED',
  DISCONNECTED: 'DISCONNECTED',
  ERROR: 'ERROR'
};

exports.WhatsAppConversationStatus = exports.$Enums.WhatsAppConversationStatus = {
  OPEN: 'OPEN',
  CLOSED: 'CLOSED',
  PENDING: 'PENDING',
  ARCHIVED: 'ARCHIVED'
};

exports.WhatsAppMessageType = exports.$Enums.WhatsAppMessageType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  AUDIO: 'AUDIO',
  VIDEO: 'VIDEO',
  DOCUMENT: 'DOCUMENT',
  LOCATION: 'LOCATION',
  STICKER: 'STICKER',
  CONTACT: 'CONTACT',
  POLL: 'POLL'
};

exports.WhatsAppMessageStatus = exports.$Enums.WhatsAppMessageStatus = {
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  READ: 'READ',
  FAILED: 'FAILED',
  PENDING: 'PENDING'
};

exports.WhatsAppImportStatus = exports.$Enums.WhatsAppImportStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.ConversationStatus = exports.$Enums.ConversationStatus = {
  ACTIVE: 'ACTIVE',
  ARCHIVED: 'ARCHIVED',
  CLOSED: 'CLOSED'
};

exports.AgentType = exports.$Enums.AgentType = {
  RECEPTIONIST: 'RECEPTIONIST',
  PREVIDENCIARIO: 'PREVIDENCIARIO',
  BPC_LOAS: 'BPC_LOAS',
  TRABALHISTA: 'TRABALHISTA'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  DOCUMENT: 'DOCUMENT',
  SYSTEM: 'SYSTEM'
};

exports.TranscriptionProvider = exports.$Enums.TranscriptionProvider = {
  GOOGLE_SPEECH: 'GOOGLE_SPEECH',
  GROQ_WHISPER: 'GROQ_WHISPER',
  OPENAI_WHISPER: 'OPENAI_WHISPER'
};

exports.AIProvider = exports.$Enums.AIProvider = {
  OPENAI: 'OPENAI',
  GOOGLE: 'GOOGLE',
  ANTHROPIC: 'ANTHROPIC'
};

exports.AIModel = exports.$Enums.AIModel = {
  GPT_4_1_MINI: 'GPT_4_1_MINI',
  GPT_4O_MINI: 'GPT_4O_MINI',
  GPT_4_5: 'GPT_4_5',
  GEMINI_2_5_PRO: 'GEMINI_2_5_PRO',
  CLAUDE_3_7: 'CLAUDE_3_7',
  CLAUDE_4: 'CLAUDE_4'
};

exports.ToolExecutionStatus = exports.$Enums.ToolExecutionStatus = {
  PENDING: 'PENDING',
  SUCCESS: 'SUCCESS',
  ERROR: 'ERROR',
  TIMEOUT: 'TIMEOUT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Office: 'Office',
  WhatsappConfig: 'WhatsappConfig',
  WhatsAppInstance: 'WhatsAppInstance',
  WhatsAppContact: 'WhatsAppContact',
  WhatsAppConversation: 'WhatsAppConversation',
  WhatsAppMessage: 'WhatsAppMessage',
  WhatsAppImport: 'WhatsAppImport',
  Client: 'Client',
  Conversation: 'Conversation',
  Message: 'Message',
  AudioTranscription: 'AudioTranscription',
  Tag: 'Tag',
  ClientTag: 'ClientTag',
  ConversationTag: 'ConversationTag',
  CustomStatus: 'CustomStatus',
  ConversationCustomStatus: 'ConversationCustomStatus',
  AiAgent: 'AiAgent',
  AIProviderConfig: 'AIProviderConfig',
  Document: 'Document',
  Tool: 'Tool',
  ToolExecution: 'ToolExecution',
  Webhook: 'Webhook',
  WebhookExecution: 'WebhookExecution',
  AuditLog: 'AuditLog',
  GlobalConfig: 'GlobalConfig'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
