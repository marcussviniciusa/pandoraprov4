{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { withAuth } from \"next-auth/middleware\"\nimport { NextResponse } from \"next/server\"\n\nexport default withAuth(\n  function middleware(req) {\n    const { pathname } = req.nextUrl\n    const { token } = req.nextauth\n\n    // Debug logs apenas em desenvolvimento\n    if (process.env.NODE_ENV === \"development\") {\n      console.log('🔍 Middleware Debug:', {\n        pathname,\n        userRole: token?.role,\n        officeId: token?.officeId,\n        hasToken: !!token\n      })\n    }\n\n    // Rotas que requerem SUPER_ADMIN\n    if (pathname.startsWith(\"/super-admin\")) {\n      if (token?.role !== \"SUPER_ADMIN\") {\n        return NextResponse.redirect(new URL(\"/unauthorized\", req.url))\n      }\n    }\n\n    // Rotas que requerem ADMIN ou superior\n    if (pathname.startsWith(\"/admin\")) {\n      if (token?.role !== \"ADMIN\" && token?.role !== \"SUPER_ADMIN\") {\n        return NextResponse.redirect(new URL(\"/unauthorized\", req.url))\n      }\n    }\n\n    // Verificar se usuário tem escritório associado (exceto SUPER_ADMIN)\n    // IMPORTANTE: Super Admin não precisa de escritório\n    if (token?.role && token.role !== \"SUPER_ADMIN\") {\n      // Se não tem officeId e não está indo para /setup, redireciona\n      if (!token.officeId && !pathname.startsWith(\"/setup\")) {\n        return NextResponse.redirect(new URL(\"/setup\", req.url))\n      }\n    }\n\n    return NextResponse.next()\n  },\n  {\n    callbacks: {\n      authorized: ({ token, req }) => {\n        // Permitir acesso às rotas públicas\n        const { pathname } = req.nextUrl\n        const publicPaths = [\"/login\", \"/auth\", \"/api/auth\", \"/unauthorized\", \"/setup\", \"/debug\"]\n        \n        if (publicPaths.some(path => pathname.startsWith(path))) {\n          return true\n        }\n\n        // Exigir token para todas as outras rotas\n        return !!token\n      },\n    },\n  }\n)\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api/auth (authentication endpoints)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    \"/((?!api/auth|_next/static|_next/image|favicon.ico).*)\",\n  ],\n} "],"names":[],"mappings":";;;;AAAA;AACA;AAAA;;;uCAEe,CAAA,GAAA,kJAAA,CAAA,WAAQ,AAAD,EACpB,SAAS,WAAW,GAAG;IACrB,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,OAAO;IAChC,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,QAAQ;IAE9B,uCAAuC;IACvC,wCAA4C;QAC1C,QAAQ,GAAG,CAAC,wBAAwB;YAClC;YACA,UAAU,OAAO;YACjB,UAAU,OAAO;YACjB,UAAU,CAAC,CAAC;QACd;IACF;IAEA,iCAAiC;IACjC,IAAI,SAAS,UAAU,CAAC,iBAAiB;QACvC,IAAI,OAAO,SAAS,eAAe;YACjC,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,iBAAiB,IAAI,GAAG;QAC/D;IACF;IAEA,uCAAuC;IACvC,IAAI,SAAS,UAAU,CAAC,WAAW;QACjC,IAAI,OAAO,SAAS,WAAW,OAAO,SAAS,eAAe;YAC5D,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,iBAAiB,IAAI,GAAG;QAC/D;IACF;IAEA,qEAAqE;IACrE,oDAAoD;IACpD,IAAI,OAAO,QAAQ,MAAM,IAAI,KAAK,eAAe;QAC/C,+DAA+D;QAC/D,IAAI,CAAC,MAAM,QAAQ,IAAI,CAAC,SAAS,UAAU,CAAC,WAAW;YACrD,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG;QACxD;IACF;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B,GACA;IACE,WAAW;QACT,YAAY,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE;YACzB,oCAAoC;YACpC,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,OAAO;YAChC,MAAM,cAAc;gBAAC;gBAAU;gBAAS;gBAAa;gBAAiB;gBAAU;aAAS;YAEzF,IAAI,YAAY,IAAI,CAAC,CAAA,OAAQ,SAAS,UAAU,CAAC,QAAQ;gBACvD,OAAO;YACT;YAEA,0CAA0C;YAC1C,OAAO,CAAC,CAAC;QACX;IACF;AACF;AAGK,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}}]
}