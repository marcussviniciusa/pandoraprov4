{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/errors.mjs"],"sourcesContent":["/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2015 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/// <reference lib=\"ES2022.Error\" />\n\nclass ExtendableError extends Error {\n  constructor(message, opt) {\n    // error Option {cause?: unknown} is a 'nice to have',\n    // don't use it internally\n    super(message, opt);\n    // set error name, otherwise it's always 'Error'\n    this.name = this.constructor.name;\n  }\n}\n\n/**\n * AnonymousRequestError is generated for anonymous keys on specific\n * APIs. NOTE: PresignedURL generation always requires access keys.\n */\nexport class AnonymousRequestError extends ExtendableError {}\n\n/**\n * InvalidArgumentError is generated for all invalid arguments.\n */\nexport class InvalidArgumentError extends ExtendableError {}\n\n/**\n * InvalidPortError is generated when a non integer value is provided\n * for ports.\n */\nexport class InvalidPortError extends ExtendableError {}\n\n/**\n * InvalidEndpointError is generated when an invalid end point value is\n * provided which does not follow domain standards.\n */\nexport class InvalidEndpointError extends ExtendableError {}\n\n/**\n * InvalidBucketNameError is generated when an invalid bucket name is\n * provided which does not follow AWS S3 specifications.\n * http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html\n */\nexport class InvalidBucketNameError extends ExtendableError {}\n\n/**\n * InvalidObjectNameError is generated when an invalid object name is\n * provided which does not follow AWS S3 specifications.\n * http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html\n */\nexport class InvalidObjectNameError extends ExtendableError {}\n\n/**\n * AccessKeyRequiredError generated by signature methods when access\n * key is not found.\n */\nexport class AccessKeyRequiredError extends ExtendableError {}\n\n/**\n * SecretKeyRequiredError generated by signature methods when secret\n * key is not found.\n */\nexport class SecretKeyRequiredError extends ExtendableError {}\n\n/**\n * ExpiresParamError generated when expires parameter value is not\n * well within stipulated limits.\n */\nexport class ExpiresParamError extends ExtendableError {}\n\n/**\n * InvalidDateError generated when invalid date is found.\n */\nexport class InvalidDateError extends ExtendableError {}\n\n/**\n * InvalidPrefixError generated when object prefix provided is invalid\n * or does not conform to AWS S3 object key restrictions.\n */\nexport class InvalidPrefixError extends ExtendableError {}\n\n/**\n * InvalidBucketPolicyError generated when the given bucket policy is invalid.\n */\nexport class InvalidBucketPolicyError extends ExtendableError {}\n\n/**\n * IncorrectSizeError generated when total data read mismatches with\n * the input size.\n */\nexport class IncorrectSizeError extends ExtendableError {}\n\n/**\n * InvalidXMLError generated when an unknown XML is found.\n */\nexport class InvalidXMLError extends ExtendableError {}\n\n/**\n * S3Error is generated for errors returned from S3 server.\n * see getErrorTransformer for details\n */\nexport class S3Error extends ExtendableError {}\nexport class IsValidBucketNameError extends ExtendableError {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFeHRlbmRhYmxlRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsIm9wdCIsIm5hbWUiLCJBbm9ueW1vdXNSZXF1ZXN0RXJyb3IiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsIkludmFsaWRQb3J0RXJyb3IiLCJJbnZhbGlkRW5kcG9pbnRFcnJvciIsIkludmFsaWRCdWNrZXROYW1lRXJyb3IiLCJJbnZhbGlkT2JqZWN0TmFtZUVycm9yIiwiQWNjZXNzS2V5UmVxdWlyZWRFcnJvciIsIlNlY3JldEtleVJlcXVpcmVkRXJyb3IiLCJFeHBpcmVzUGFyYW1FcnJvciIsIkludmFsaWREYXRlRXJyb3IiLCJJbnZhbGlkUHJlZml4RXJyb3IiLCJJbnZhbGlkQnVja2V0UG9saWN5RXJyb3IiLCJJbmNvcnJlY3RTaXplRXJyb3IiLCJJbnZhbGlkWE1MRXJyb3IiLCJTM0Vycm9yIiwiSXNWYWxpZEJ1Y2tldE5hbWVFcnJvciJdLCJzb3VyY2VzIjpbImVycm9ycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWluSU8gSmF2YXNjcmlwdCBMaWJyYXJ5IGZvciBBbWF6b24gUzMgQ29tcGF0aWJsZSBDbG91ZCBTdG9yYWdlLCAoQykgMjAxNSBNaW5JTywgSW5jLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLy8gPHJlZmVyZW5jZSBsaWI9XCJFUzIwMjIuRXJyb3JcIiAvPlxuXG5jbGFzcyBFeHRlbmRhYmxlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcsIG9wdD86IEVycm9yT3B0aW9ucykge1xuICAgIC8vIGVycm9yIE9wdGlvbiB7Y2F1c2U/OiB1bmtub3dufSBpcyBhICduaWNlIHRvIGhhdmUnLFxuICAgIC8vIGRvbid0IHVzZSBpdCBpbnRlcm5hbGx5XG4gICAgc3VwZXIobWVzc2FnZSwgb3B0KVxuICAgIC8vIHNldCBlcnJvciBuYW1lLCBvdGhlcndpc2UgaXQncyBhbHdheXMgJ0Vycm9yJ1xuICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZVxuICB9XG59XG5cbi8qKlxuICogQW5vbnltb3VzUmVxdWVzdEVycm9yIGlzIGdlbmVyYXRlZCBmb3IgYW5vbnltb3VzIGtleXMgb24gc3BlY2lmaWNcbiAqIEFQSXMuIE5PVEU6IFByZXNpZ25lZFVSTCBnZW5lcmF0aW9uIGFsd2F5cyByZXF1aXJlcyBhY2Nlc3Mga2V5cy5cbiAqL1xuZXhwb3J0IGNsYXNzIEFub255bW91c1JlcXVlc3RFcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7fVxuXG4vKipcbiAqIEludmFsaWRBcmd1bWVudEVycm9yIGlzIGdlbmVyYXRlZCBmb3IgYWxsIGludmFsaWQgYXJndW1lbnRzLlxuICovXG5leHBvcnQgY2xhc3MgSW52YWxpZEFyZ3VtZW50RXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige31cblxuLyoqXG4gKiBJbnZhbGlkUG9ydEVycm9yIGlzIGdlbmVyYXRlZCB3aGVuIGEgbm9uIGludGVnZXIgdmFsdWUgaXMgcHJvdmlkZWRcbiAqIGZvciBwb3J0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIEludmFsaWRQb3J0RXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige31cblxuLyoqXG4gKiBJbnZhbGlkRW5kcG9pbnRFcnJvciBpcyBnZW5lcmF0ZWQgd2hlbiBhbiBpbnZhbGlkIGVuZCBwb2ludCB2YWx1ZSBpc1xuICogcHJvdmlkZWQgd2hpY2ggZG9lcyBub3QgZm9sbG93IGRvbWFpbiBzdGFuZGFyZHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnZhbGlkRW5kcG9pbnRFcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7fVxuXG4vKipcbiAqIEludmFsaWRCdWNrZXROYW1lRXJyb3IgaXMgZ2VuZXJhdGVkIHdoZW4gYW4gaW52YWxpZCBidWNrZXQgbmFtZSBpc1xuICogcHJvdmlkZWQgd2hpY2ggZG9lcyBub3QgZm9sbG93IEFXUyBTMyBzcGVjaWZpY2F0aW9ucy5cbiAqIGh0dHA6Ly9kb2NzLmF3cy5hbWF6b24uY29tL0FtYXpvblMzL2xhdGVzdC9kZXYvQnVja2V0UmVzdHJpY3Rpb25zLmh0bWxcbiAqL1xuZXhwb3J0IGNsYXNzIEludmFsaWRCdWNrZXROYW1lRXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige31cblxuLyoqXG4gKiBJbnZhbGlkT2JqZWN0TmFtZUVycm9yIGlzIGdlbmVyYXRlZCB3aGVuIGFuIGludmFsaWQgb2JqZWN0IG5hbWUgaXNcbiAqIHByb3ZpZGVkIHdoaWNoIGRvZXMgbm90IGZvbGxvdyBBV1MgUzMgc3BlY2lmaWNhdGlvbnMuXG4gKiBodHRwOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9BbWF6b25TMy9sYXRlc3QvZGV2L1VzaW5nTWV0YWRhdGEuaHRtbFxuICovXG5leHBvcnQgY2xhc3MgSW52YWxpZE9iamVjdE5hbWVFcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7fVxuXG4vKipcbiAqIEFjY2Vzc0tleVJlcXVpcmVkRXJyb3IgZ2VuZXJhdGVkIGJ5IHNpZ25hdHVyZSBtZXRob2RzIHdoZW4gYWNjZXNzXG4gKiBrZXkgaXMgbm90IGZvdW5kLlxuICovXG5leHBvcnQgY2xhc3MgQWNjZXNzS2V5UmVxdWlyZWRFcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7fVxuXG4vKipcbiAqIFNlY3JldEtleVJlcXVpcmVkRXJyb3IgZ2VuZXJhdGVkIGJ5IHNpZ25hdHVyZSBtZXRob2RzIHdoZW4gc2VjcmV0XG4gKiBrZXkgaXMgbm90IGZvdW5kLlxuICovXG5leHBvcnQgY2xhc3MgU2VjcmV0S2V5UmVxdWlyZWRFcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7fVxuXG4vKipcbiAqIEV4cGlyZXNQYXJhbUVycm9yIGdlbmVyYXRlZCB3aGVuIGV4cGlyZXMgcGFyYW1ldGVyIHZhbHVlIGlzIG5vdFxuICogd2VsbCB3aXRoaW4gc3RpcHVsYXRlZCBsaW1pdHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBFeHBpcmVzUGFyYW1FcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7fVxuXG4vKipcbiAqIEludmFsaWREYXRlRXJyb3IgZ2VuZXJhdGVkIHdoZW4gaW52YWxpZCBkYXRlIGlzIGZvdW5kLlxuICovXG5leHBvcnQgY2xhc3MgSW52YWxpZERhdGVFcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7fVxuXG4vKipcbiAqIEludmFsaWRQcmVmaXhFcnJvciBnZW5lcmF0ZWQgd2hlbiBvYmplY3QgcHJlZml4IHByb3ZpZGVkIGlzIGludmFsaWRcbiAqIG9yIGRvZXMgbm90IGNvbmZvcm0gdG8gQVdTIFMzIG9iamVjdCBrZXkgcmVzdHJpY3Rpb25zLlxuICovXG5leHBvcnQgY2xhc3MgSW52YWxpZFByZWZpeEVycm9yIGV4dGVuZHMgRXh0ZW5kYWJsZUVycm9yIHt9XG5cbi8qKlxuICogSW52YWxpZEJ1Y2tldFBvbGljeUVycm9yIGdlbmVyYXRlZCB3aGVuIHRoZSBnaXZlbiBidWNrZXQgcG9saWN5IGlzIGludmFsaWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnZhbGlkQnVja2V0UG9saWN5RXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige31cblxuLyoqXG4gKiBJbmNvcnJlY3RTaXplRXJyb3IgZ2VuZXJhdGVkIHdoZW4gdG90YWwgZGF0YSByZWFkIG1pc21hdGNoZXMgd2l0aFxuICogdGhlIGlucHV0IHNpemUuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbmNvcnJlY3RTaXplRXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige31cblxuLyoqXG4gKiBJbnZhbGlkWE1MRXJyb3IgZ2VuZXJhdGVkIHdoZW4gYW4gdW5rbm93biBYTUwgaXMgZm91bmQuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnZhbGlkWE1MRXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige31cblxuLyoqXG4gKiBTM0Vycm9yIGlzIGdlbmVyYXRlZCBmb3IgZXJyb3JzIHJldHVybmVkIGZyb20gUzMgc2VydmVyLlxuICogc2VlIGdldEVycm9yVHJhbnNmb3JtZXIgZm9yIGRldGFpbHNcbiAqL1xuZXhwb3J0IGNsYXNzIFMzRXJyb3IgZXh0ZW5kcyBFeHRlbmRhYmxlRXJyb3Ige1xuICBjb2RlPzogc3RyaW5nXG4gIHJlZ2lvbj86IHN0cmluZ1xufVxuXG5leHBvcnQgY2xhc3MgSXNWYWxpZEJ1Y2tldE5hbWVFcnJvciBleHRlbmRzIEV4dGVuZGFibGVFcnJvciB7fVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsTUFBTUEsZUFBZSxTQUFTQyxLQUFLLENBQUM7RUFDbENDLFdBQVdBLENBQUNDLE9BQWdCLEVBQUVDLEdBQWtCLEVBQUU7SUFDaEQ7SUFDQTtJQUNBLEtBQUssQ0FBQ0QsT0FBTyxFQUFFQyxHQUFHLENBQUM7SUFDbkI7SUFDQSxJQUFJLENBQUNDLElBQUksR0FBRyxJQUFJLENBQUNILFdBQVcsQ0FBQ0csSUFBSTtFQUNuQztBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxNQUFNQyxxQkFBcUIsU0FBU04sZUFBZSxDQUFDOztBQUUzRDtBQUNBO0FBQ0E7QUFDQSxPQUFPLE1BQU1PLG9CQUFvQixTQUFTUCxlQUFlLENBQUM7O0FBRTFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxNQUFNUSxnQkFBZ0IsU0FBU1IsZUFBZSxDQUFDOztBQUV0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sTUFBTVMsb0JBQW9CLFNBQVNULGVBQWUsQ0FBQzs7QUFFMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sTUFBTVUsc0JBQXNCLFNBQVNWLGVBQWUsQ0FBQzs7QUFFNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sTUFBTVcsc0JBQXNCLFNBQVNYLGVBQWUsQ0FBQzs7QUFFNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLE1BQU1ZLHNCQUFzQixTQUFTWixlQUFlLENBQUM7O0FBRTVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxNQUFNYSxzQkFBc0IsU0FBU2IsZUFBZSxDQUFDOztBQUU1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sTUFBTWMsaUJBQWlCLFNBQVNkLGVBQWUsQ0FBQzs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0EsT0FBTyxNQUFNZSxnQkFBZ0IsU0FBU2YsZUFBZSxDQUFDOztBQUV0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sTUFBTWdCLGtCQUFrQixTQUFTaEIsZUFBZSxDQUFDOztBQUV4RDtBQUNBO0FBQ0E7QUFDQSxPQUFPLE1BQU1pQix3QkFBd0IsU0FBU2pCLGVBQWUsQ0FBQzs7QUFFOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLE1BQU1rQixrQkFBa0IsU0FBU2xCLGVBQWUsQ0FBQzs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0EsT0FBTyxNQUFNbUIsZUFBZSxTQUFTbkIsZUFBZSxDQUFDOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sTUFBTW9CLE9BQU8sU0FBU3BCLGVBQWUsQ0FBQztBQUs3QyxPQUFPLE1BQU1xQixzQkFBc0IsU0FBU3JCLGVBQWUsQ0FBQyJ9"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;CAcC,GAED,oCAAoC;;;;;;;;;;;;;;;;;;;AAEpC,MAAM,wBAAwB;IAC5B,YAAY,OAAO,EAAE,GAAG,CAAE;QACxB,sDAAsD;QACtD,0BAA0B;QAC1B,KAAK,CAAC,SAAS;QACf,gDAAgD;QAChD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI;IACnC;AACF;AAMO,MAAM,8BAA8B;AAAiB;AAKrD,MAAM,6BAA6B;AAAiB;AAMpD,MAAM,yBAAyB;AAAiB;AAMhD,MAAM,6BAA6B;AAAiB;AAOpD,MAAM,+BAA+B;AAAiB;AAOtD,MAAM,+BAA+B;AAAiB;AAMtD,MAAM,+BAA+B;AAAiB;AAMtD,MAAM,+BAA+B;AAAiB;AAMtD,MAAM,0BAA0B;AAAiB;AAKjD,MAAM,yBAAyB;AAAiB;AAMhD,MAAM,2BAA2B;AAAiB;AAKlD,MAAM,iCAAiC;AAAiB;AAMxD,MAAM,2BAA2B;AAAiB;AAKlD,MAAM,wBAAwB;AAAiB;AAM/C,MAAM,gBAAgB;AAAiB;AACvC,MAAM,+BAA+B;AAAiB,EAC7D,o0OAAo0O","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/internal/callbackify.mjs"],"sourcesContent":["// wrapper an async function that support callback style API.\n// It will preserve 'this'.\nexport function callbackify(fn) {\n  return function () {\n    const args = [...arguments];\n    const callback = args.pop();\n\n    // If the last argument is a function, assume it's the callback.\n    if (typeof callback === 'function') {\n      return fn.apply(this, args).then(result => callback(null, result), err => callback(err));\n    }\n    return fn.apply(this, arguments);\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjYWxsYmFja2lmeSIsImZuIiwiYXJncyIsImFyZ3VtZW50cyIsImNhbGxiYWNrIiwicG9wIiwiYXBwbHkiLCJ0aGVuIiwicmVzdWx0IiwiZXJyIl0sInNvdXJjZXMiOlsiY2FsbGJhY2tpZnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gd3JhcHBlciBhbiBhc3luYyBmdW5jdGlvbiB0aGF0IHN1cHBvcnQgY2FsbGJhY2sgc3R5bGUgQVBJLlxuLy8gSXQgd2lsbCBwcmVzZXJ2ZSAndGhpcycuXG5leHBvcnQgZnVuY3Rpb24gY2FsbGJhY2tpZnkoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBhcmdzID0gWy4uLmFyZ3VtZW50c11cbiAgICBjb25zdCBjYWxsYmFjayA9IGFyZ3MucG9wKClcblxuICAgIC8vIElmIHRoZSBsYXN0IGFyZ3VtZW50IGlzIGEgZnVuY3Rpb24sIGFzc3VtZSBpdCdzIHRoZSBjYWxsYmFjay5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJncykudGhlbihcbiAgICAgICAgKHJlc3VsdCkgPT4gY2FsbGJhY2sobnVsbCwgcmVzdWx0KSxcbiAgICAgICAgKGVycikgPT4gY2FsbGJhY2soZXJyKSxcbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxPQUFPLFNBQVNBLFdBQVdBLENBQUNDLEVBQUUsRUFBRTtFQUM5QixPQUFPLFlBQVk7SUFDakIsTUFBTUMsSUFBSSxHQUFHLENBQUMsR0FBR0MsU0FBUyxDQUFDO0lBQzNCLE1BQU1DLFFBQVEsR0FBR0YsSUFBSSxDQUFDRyxHQUFHLENBQUMsQ0FBQzs7SUFFM0I7SUFDQSxJQUFJLE9BQU9ELFFBQVEsS0FBSyxVQUFVLEVBQUU7TUFDbEMsT0FBT0gsRUFBRSxDQUFDSyxLQUFLLENBQUMsSUFBSSxFQUFFSixJQUFJLENBQUMsQ0FBQ0ssSUFBSSxDQUM3QkMsTUFBTSxJQUFLSixRQUFRLENBQUMsSUFBSSxFQUFFSSxNQUFNLENBQUMsRUFDakNDLEdBQUcsSUFBS0wsUUFBUSxDQUFDSyxHQUFHLENBQ3ZCLENBQUM7SUFDSDtJQUVBLE9BQU9SLEVBQUUsQ0FBQ0ssS0FBSyxDQUFDLElBQUksRUFBRUgsU0FBUyxDQUFDO0VBQ2xDLENBQUM7QUFDSCJ9"],"names":[],"mappings":"AAAA,6DAA6D;AAC7D,2BAA2B;;;;AACpB,SAAS,YAAY,EAAE;IAC5B,OAAO;QACL,MAAM,OAAO;eAAI;SAAU;QAC3B,MAAM,WAAW,KAAK,GAAG;QAEzB,gEAAgE;QAChE,IAAI,OAAO,aAAa,YAAY;YAClC,OAAO,GAAG,KAAK,CAAC,IAAI,EAAE,MAAM,IAAI,CAAC,CAAA,SAAU,SAAS,MAAM,SAAS,CAAA,MAAO,SAAS;QACrF;QACA,OAAO,GAAG,KAAK,CAAC,IAAI,EAAE;IACxB;AACF,EACA,ohDAAohD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/Credentials.mjs"],"sourcesContent":["export class Credentials {\n  constructor({\n    accessKey,\n    secretKey,\n    sessionToken\n  }) {\n    this.accessKey = accessKey;\n    this.secretKey = secretKey;\n    this.sessionToken = sessionToken;\n  }\n  setAccessKey(accessKey) {\n    this.accessKey = accessKey;\n  }\n  getAccessKey() {\n    return this.accessKey;\n  }\n  setSecretKey(secretKey) {\n    this.secretKey = secretKey;\n  }\n  getSecretKey() {\n    return this.secretKey;\n  }\n  setSessionToken(sessionToken) {\n    this.sessionToken = sessionToken;\n  }\n  getSessionToken() {\n    return this.sessionToken;\n  }\n  get() {\n    return this;\n  }\n}\n\n// deprecated default export, please use named exports.\n// keep for backward compatibility.\n// eslint-disable-next-line import/no-default-export\nexport default Credentials;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDcmVkZW50aWFscyIsImNvbnN0cnVjdG9yIiwiYWNjZXNzS2V5Iiwic2VjcmV0S2V5Iiwic2Vzc2lvblRva2VuIiwic2V0QWNjZXNzS2V5IiwiZ2V0QWNjZXNzS2V5Iiwic2V0U2VjcmV0S2V5IiwiZ2V0U2VjcmV0S2V5Iiwic2V0U2Vzc2lvblRva2VuIiwiZ2V0U2Vzc2lvblRva2VuIiwiZ2V0Il0sInNvdXJjZXMiOlsiQ3JlZGVudGlhbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIENyZWRlbnRpYWxzIHtcbiAgcHVibGljIGFjY2Vzc0tleTogc3RyaW5nXG4gIHB1YmxpYyBzZWNyZXRLZXk6IHN0cmluZ1xuICBwdWJsaWMgc2Vzc2lvblRva2VuPzogc3RyaW5nXG5cbiAgY29uc3RydWN0b3IoeyBhY2Nlc3NLZXksIHNlY3JldEtleSwgc2Vzc2lvblRva2VuIH06IHsgYWNjZXNzS2V5OiBzdHJpbmc7IHNlY3JldEtleTogc3RyaW5nOyBzZXNzaW9uVG9rZW4/OiBzdHJpbmcgfSkge1xuICAgIHRoaXMuYWNjZXNzS2V5ID0gYWNjZXNzS2V5XG4gICAgdGhpcy5zZWNyZXRLZXkgPSBzZWNyZXRLZXlcbiAgICB0aGlzLnNlc3Npb25Ub2tlbiA9IHNlc3Npb25Ub2tlblxuICB9XG5cbiAgc2V0QWNjZXNzS2V5KGFjY2Vzc0tleTogc3RyaW5nKSB7XG4gICAgdGhpcy5hY2Nlc3NLZXkgPSBhY2Nlc3NLZXlcbiAgfVxuXG4gIGdldEFjY2Vzc0tleSgpIHtcbiAgICByZXR1cm4gdGhpcy5hY2Nlc3NLZXlcbiAgfVxuXG4gIHNldFNlY3JldEtleShzZWNyZXRLZXk6IHN0cmluZykge1xuICAgIHRoaXMuc2VjcmV0S2V5ID0gc2VjcmV0S2V5XG4gIH1cblxuICBnZXRTZWNyZXRLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VjcmV0S2V5XG4gIH1cblxuICBzZXRTZXNzaW9uVG9rZW4oc2Vzc2lvblRva2VuOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNlc3Npb25Ub2tlbiA9IHNlc3Npb25Ub2tlblxuICB9XG5cbiAgZ2V0U2Vzc2lvblRva2VuKCkge1xuICAgIHJldHVybiB0aGlzLnNlc3Npb25Ub2tlblxuICB9XG5cbiAgZ2V0KCk6IENyZWRlbnRpYWxzIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG5cbi8vIGRlcHJlY2F0ZWQgZGVmYXVsdCBleHBvcnQsIHBsZWFzZSB1c2UgbmFtZWQgZXhwb3J0cy5cbi8vIGtlZXAgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWRlZmF1bHQtZXhwb3J0XG5leHBvcnQgZGVmYXVsdCBDcmVkZW50aWFsc1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQU1BLFdBQVcsQ0FBQztFQUt2QkMsV0FBV0EsQ0FBQztJQUFFQyxTQUFTO0lBQUVDLFNBQVM7SUFBRUM7RUFBOEUsQ0FBQyxFQUFFO0lBQ25ILElBQUksQ0FBQ0YsU0FBUyxHQUFHQSxTQUFTO0lBQzFCLElBQUksQ0FBQ0MsU0FBUyxHQUFHQSxTQUFTO0lBQzFCLElBQUksQ0FBQ0MsWUFBWSxHQUFHQSxZQUFZO0VBQ2xDO0VBRUFDLFlBQVlBLENBQUNILFNBQWlCLEVBQUU7SUFDOUIsSUFBSSxDQUFDQSxTQUFTLEdBQUdBLFNBQVM7RUFDNUI7RUFFQUksWUFBWUEsQ0FBQSxFQUFHO0lBQ2IsT0FBTyxJQUFJLENBQUNKLFNBQVM7RUFDdkI7RUFFQUssWUFBWUEsQ0FBQ0osU0FBaUIsRUFBRTtJQUM5QixJQUFJLENBQUNBLFNBQVMsR0FBR0EsU0FBUztFQUM1QjtFQUVBSyxZQUFZQSxDQUFBLEVBQUc7SUFDYixPQUFPLElBQUksQ0FBQ0wsU0FBUztFQUN2QjtFQUVBTSxlQUFlQSxDQUFDTCxZQUFvQixFQUFFO0lBQ3BDLElBQUksQ0FBQ0EsWUFBWSxHQUFHQSxZQUFZO0VBQ2xDO0VBRUFNLGVBQWVBLENBQUEsRUFBRztJQUNoQixPQUFPLElBQUksQ0FBQ04sWUFBWTtFQUMxQjtFQUVBTyxHQUFHQSxDQUFBLEVBQWdCO0lBQ2pCLE9BQU8sSUFBSTtFQUNiO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZVgsV0FBVyJ9"],"names":[],"mappings":";;;;AAAO,MAAM;IACX,YAAY,EACV,SAAS,EACT,SAAS,EACT,YAAY,EACb,CAAE;QACD,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,YAAY,GAAG;IACtB;IACA,aAAa,SAAS,EAAE;QACtB,IAAI,CAAC,SAAS,GAAG;IACnB;IACA,eAAe;QACb,OAAO,IAAI,CAAC,SAAS;IACvB;IACA,aAAa,SAAS,EAAE;QACtB,IAAI,CAAC,SAAS,GAAG;IACnB;IACA,eAAe;QACb,OAAO,IAAI,CAAC,SAAS;IACvB;IACA,gBAAgB,YAAY,EAAE;QAC5B,IAAI,CAAC,YAAY,GAAG;IACtB;IACA,kBAAkB;QAChB,OAAO,IAAI,CAAC,YAAY;IAC1B;IACA,MAAM;QACJ,OAAO,IAAI;IACb;AACF;uCAKe;CACf,4gFAA4gF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/CredentialProvider.mjs"],"sourcesContent":["import { Credentials } from \"./Credentials.mjs\";\nexport class CredentialProvider {\n  constructor({\n    accessKey,\n    secretKey,\n    sessionToken\n  }) {\n    this.credentials = new Credentials({\n      accessKey,\n      secretKey,\n      sessionToken\n    });\n  }\n  async getCredentials() {\n    return this.credentials.get();\n  }\n  setCredentials(credentials) {\n    if (credentials instanceof Credentials) {\n      this.credentials = credentials;\n    } else {\n      throw new Error('Unable to set Credentials. it should be an instance of Credentials class');\n    }\n  }\n  setAccessKey(accessKey) {\n    this.credentials.setAccessKey(accessKey);\n  }\n  getAccessKey() {\n    return this.credentials.getAccessKey();\n  }\n  setSecretKey(secretKey) {\n    this.credentials.setSecretKey(secretKey);\n  }\n  getSecretKey() {\n    return this.credentials.getSecretKey();\n  }\n  setSessionToken(sessionToken) {\n    this.credentials.setSessionToken(sessionToken);\n  }\n  getSessionToken() {\n    return this.credentials.getSessionToken();\n  }\n}\n\n// deprecated default export, please use named exports.\n// keep for backward compatibility.\n// eslint-disable-next-line import/no-default-export\nexport default CredentialProvider;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDcmVkZW50aWFscyIsIkNyZWRlbnRpYWxQcm92aWRlciIsImNvbnN0cnVjdG9yIiwiYWNjZXNzS2V5Iiwic2VjcmV0S2V5Iiwic2Vzc2lvblRva2VuIiwiY3JlZGVudGlhbHMiLCJnZXRDcmVkZW50aWFscyIsImdldCIsInNldENyZWRlbnRpYWxzIiwiRXJyb3IiLCJzZXRBY2Nlc3NLZXkiLCJnZXRBY2Nlc3NLZXkiLCJzZXRTZWNyZXRLZXkiLCJnZXRTZWNyZXRLZXkiLCJzZXRTZXNzaW9uVG9rZW4iLCJnZXRTZXNzaW9uVG9rZW4iXSwic291cmNlcyI6WyJDcmVkZW50aWFsUHJvdmlkZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ3JlZGVudGlhbHMgfSBmcm9tICcuL0NyZWRlbnRpYWxzLnRzJ1xuXG5leHBvcnQgY2xhc3MgQ3JlZGVudGlhbFByb3ZpZGVyIHtcbiAgcHJpdmF0ZSBjcmVkZW50aWFsczogQ3JlZGVudGlhbHNcblxuICBjb25zdHJ1Y3Rvcih7IGFjY2Vzc0tleSwgc2VjcmV0S2V5LCBzZXNzaW9uVG9rZW4gfTogeyBhY2Nlc3NLZXk6IHN0cmluZzsgc2VjcmV0S2V5OiBzdHJpbmc7IHNlc3Npb25Ub2tlbj86IHN0cmluZyB9KSB7XG4gICAgdGhpcy5jcmVkZW50aWFscyA9IG5ldyBDcmVkZW50aWFscyh7XG4gICAgICBhY2Nlc3NLZXksXG4gICAgICBzZWNyZXRLZXksXG4gICAgICBzZXNzaW9uVG9rZW4sXG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIGdldENyZWRlbnRpYWxzKCk6IFByb21pc2U8Q3JlZGVudGlhbHM+IHtcbiAgICByZXR1cm4gdGhpcy5jcmVkZW50aWFscy5nZXQoKVxuICB9XG5cbiAgc2V0Q3JlZGVudGlhbHMoY3JlZGVudGlhbHM6IENyZWRlbnRpYWxzKSB7XG4gICAgaWYgKGNyZWRlbnRpYWxzIGluc3RhbmNlb2YgQ3JlZGVudGlhbHMpIHtcbiAgICAgIHRoaXMuY3JlZGVudGlhbHMgPSBjcmVkZW50aWFsc1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBzZXQgQ3JlZGVudGlhbHMuIGl0IHNob3VsZCBiZSBhbiBpbnN0YW5jZSBvZiBDcmVkZW50aWFscyBjbGFzcycpXG4gICAgfVxuICB9XG5cbiAgc2V0QWNjZXNzS2V5KGFjY2Vzc0tleTogc3RyaW5nKSB7XG4gICAgdGhpcy5jcmVkZW50aWFscy5zZXRBY2Nlc3NLZXkoYWNjZXNzS2V5KVxuICB9XG5cbiAgZ2V0QWNjZXNzS2V5KCkge1xuICAgIHJldHVybiB0aGlzLmNyZWRlbnRpYWxzLmdldEFjY2Vzc0tleSgpXG4gIH1cblxuICBzZXRTZWNyZXRLZXkoc2VjcmV0S2V5OiBzdHJpbmcpIHtcbiAgICB0aGlzLmNyZWRlbnRpYWxzLnNldFNlY3JldEtleShzZWNyZXRLZXkpXG4gIH1cblxuICBnZXRTZWNyZXRLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3JlZGVudGlhbHMuZ2V0U2VjcmV0S2V5KClcbiAgfVxuXG4gIHNldFNlc3Npb25Ub2tlbihzZXNzaW9uVG9rZW46IHN0cmluZykge1xuICAgIHRoaXMuY3JlZGVudGlhbHMuc2V0U2Vzc2lvblRva2VuKHNlc3Npb25Ub2tlbilcbiAgfVxuXG4gIGdldFNlc3Npb25Ub2tlbigpIHtcbiAgICByZXR1cm4gdGhpcy5jcmVkZW50aWFscy5nZXRTZXNzaW9uVG9rZW4oKVxuICB9XG59XG5cbi8vIGRlcHJlY2F0ZWQgZGVmYXVsdCBleHBvcnQsIHBsZWFzZSB1c2UgbmFtZWQgZXhwb3J0cy5cbi8vIGtlZXAgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWRlZmF1bHQtZXhwb3J0XG5leHBvcnQgZGVmYXVsdCBDcmVkZW50aWFsUHJvdmlkZXJcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsV0FBVyxRQUFRLG1CQUFrQjtBQUU5QyxPQUFPLE1BQU1DLGtCQUFrQixDQUFDO0VBRzlCQyxXQUFXQSxDQUFDO0lBQUVDLFNBQVM7SUFBRUMsU0FBUztJQUFFQztFQUE4RSxDQUFDLEVBQUU7SUFDbkgsSUFBSSxDQUFDQyxXQUFXLEdBQUcsSUFBSU4sV0FBVyxDQUFDO01BQ2pDRyxTQUFTO01BQ1RDLFNBQVM7TUFDVEM7SUFDRixDQUFDLENBQUM7RUFDSjtFQUVBLE1BQU1FLGNBQWNBLENBQUEsRUFBeUI7SUFDM0MsT0FBTyxJQUFJLENBQUNELFdBQVcsQ0FBQ0UsR0FBRyxDQUFDLENBQUM7RUFDL0I7RUFFQUMsY0FBY0EsQ0FBQ0gsV0FBd0IsRUFBRTtJQUN2QyxJQUFJQSxXQUFXLFlBQVlOLFdBQVcsRUFBRTtNQUN0QyxJQUFJLENBQUNNLFdBQVcsR0FBR0EsV0FBVztJQUNoQyxDQUFDLE1BQU07TUFDTCxNQUFNLElBQUlJLEtBQUssQ0FBQywwRUFBMEUsQ0FBQztJQUM3RjtFQUNGO0VBRUFDLFlBQVlBLENBQUNSLFNBQWlCLEVBQUU7SUFDOUIsSUFBSSxDQUFDRyxXQUFXLENBQUNLLFlBQVksQ0FBQ1IsU0FBUyxDQUFDO0VBQzFDO0VBRUFTLFlBQVlBLENBQUEsRUFBRztJQUNiLE9BQU8sSUFBSSxDQUFDTixXQUFXLENBQUNNLFlBQVksQ0FBQyxDQUFDO0VBQ3hDO0VBRUFDLFlBQVlBLENBQUNULFNBQWlCLEVBQUU7SUFDOUIsSUFBSSxDQUFDRSxXQUFXLENBQUNPLFlBQVksQ0FBQ1QsU0FBUyxDQUFDO0VBQzFDO0VBRUFVLFlBQVlBLENBQUEsRUFBRztJQUNiLE9BQU8sSUFBSSxDQUFDUixXQUFXLENBQUNRLFlBQVksQ0FBQyxDQUFDO0VBQ3hDO0VBRUFDLGVBQWVBLENBQUNWLFlBQW9CLEVBQUU7SUFDcEMsSUFBSSxDQUFDQyxXQUFXLENBQUNTLGVBQWUsQ0FBQ1YsWUFBWSxDQUFDO0VBQ2hEO0VBRUFXLGVBQWVBLENBQUEsRUFBRztJQUNoQixPQUFPLElBQUksQ0FBQ1YsV0FBVyxDQUFDVSxlQUFlLENBQUMsQ0FBQztFQUMzQztBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWVmLGtCQUFrQiJ9"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM;IACX,YAAY,EACV,SAAS,EACT,SAAS,EACT,YAAY,EACb,CAAE;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,sJAAA,CAAA,cAAW,CAAC;YACjC;YACA;YACA;QACF;IACF;IACA,MAAM,iBAAiB;QACrB,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG;IAC7B;IACA,eAAe,WAAW,EAAE;QAC1B,IAAI,uBAAuB,sJAAA,CAAA,cAAW,EAAE;YACtC,IAAI,CAAC,WAAW,GAAG;QACrB,OAAO;YACL,MAAM,IAAI,MAAM;QAClB;IACF;IACA,aAAa,SAAS,EAAE;QACtB,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC;IAChC;IACA,eAAe;QACb,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY;IACtC;IACA,aAAa,SAAS,EAAE;QACtB,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC;IAChC;IACA,eAAe;QACb,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY;IACtC;IACA,gBAAgB,YAAY,EAAE;QAC5B,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC;IACnC;IACA,kBAAkB;QAChB,OAAO,IAAI,CAAC,WAAW,CAAC,eAAe;IACzC;AACF;uCAKe;CACf,wlHAAwlH","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/internal/async.mjs"],"sourcesContent":["// promise helper for stdlib\n\nimport * as fs from \"fs\";\nimport * as stream from \"stream\";\nimport { promisify } from \"util\";\n\n// TODO: use \"node:fs/promise\" directly after we stop testing on nodejs 12\nexport { promises as fsp } from 'node:fs';\nexport const streamPromise = {\n  // node:stream/promises Added in: v15.0.0\n  pipeline: promisify(stream.pipeline)\n};\nexport const fstat = promisify(fs.fstat);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsInN0cmVhbSIsInByb21pc2lmeSIsInByb21pc2VzIiwiZnNwIiwic3RyZWFtUHJvbWlzZSIsInBpcGVsaW5lIiwiZnN0YXQiXSwic291cmNlcyI6WyJhc3luYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBwcm9taXNlIGhlbHBlciBmb3Igc3RkbGliXG5cbmltcG9ydCAqIGFzIGZzIGZyb20gJ25vZGU6ZnMnXG5pbXBvcnQgKiBhcyBzdHJlYW0gZnJvbSAnbm9kZTpzdHJlYW0nXG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tICdub2RlOnV0aWwnXG5cbi8vIFRPRE86IHVzZSBcIm5vZGU6ZnMvcHJvbWlzZVwiIGRpcmVjdGx5IGFmdGVyIHdlIHN0b3AgdGVzdGluZyBvbiBub2RlanMgMTJcbmV4cG9ydCB7IHByb21pc2VzIGFzIGZzcCB9IGZyb20gJ25vZGU6ZnMnXG5leHBvcnQgY29uc3Qgc3RyZWFtUHJvbWlzZSA9IHtcbiAgLy8gbm9kZTpzdHJlYW0vcHJvbWlzZXMgQWRkZWQgaW46IHYxNS4wLjBcbiAgcGlwZWxpbmU6IHByb21pc2lmeShzdHJlYW0ucGlwZWxpbmUpLFxufVxuXG5leHBvcnQgY29uc3QgZnN0YXQgPSBwcm9taXNpZnkoZnMuZnN0YXQpXG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE9BQU8sS0FBS0EsRUFBRTtBQUNkLE9BQU8sS0FBS0MsTUFBTTtBQUNsQixTQUFTQyxTQUFTOztBQUVsQjtBQUNBLFNBQVNDLFFBQVEsSUFBSUMsR0FBRyxRQUFRLFNBQVM7QUFDekMsT0FBTyxNQUFNQyxhQUFhLEdBQUc7RUFDM0I7RUFDQUMsUUFBUSxFQUFFSixTQUFTLENBQUNELE1BQU0sQ0FBQ0ssUUFBUTtBQUNyQyxDQUFDO0FBRUQsT0FBTyxNQUFNQyxLQUFLLEdBQUdMLFNBQVMsQ0FBQ0YsRUFBRSxDQUFDTyxLQUFLLENBQUMifQ=="],"names":[],"mappings":"AAAA,4BAA4B;;;;;AAE5B;AACA;AACA;AAEA,0EAA0E;AAC1E;;;;;AACO,MAAM,gBAAgB;IAC3B,yCAAyC;IACzC,UAAU,CAAA,GAAA,iGAAA,CAAA,YAAS,AAAD,EAAE,qGAAA,CAAA,WAAe;AACrC;AACO,MAAM,QAAQ,CAAA,GAAA,iGAAA,CAAA,YAAS,AAAD,EAAE,6FAAA,CAAA,QAAQ,GACvC,wqCAAwqC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/internal/type.mjs"],"sourcesContent":["// nodejs IncomingHttpHeaders is Record<string, string | string[]>, but it's actually this:\n\nexport let ENCRYPTION_TYPES = /*#__PURE__*/function (ENCRYPTION_TYPES) {\n  ENCRYPTION_TYPES[\"SSEC\"] = \"SSE-C\";\n  ENCRYPTION_TYPES[\"KMS\"] = \"KMS\";\n  return ENCRYPTION_TYPES;\n}({});\nexport let RETENTION_MODES = /*#__PURE__*/function (RETENTION_MODES) {\n  RETENTION_MODES[\"GOVERNANCE\"] = \"GOVERNANCE\";\n  RETENTION_MODES[\"COMPLIANCE\"] = \"COMPLIANCE\";\n  return RETENTION_MODES;\n}({});\nexport let RETENTION_VALIDITY_UNITS = /*#__PURE__*/function (RETENTION_VALIDITY_UNITS) {\n  RETENTION_VALIDITY_UNITS[\"DAYS\"] = \"Days\";\n  RETENTION_VALIDITY_UNITS[\"YEARS\"] = \"Years\";\n  return RETENTION_VALIDITY_UNITS;\n}({});\nexport let LEGAL_HOLD_STATUS = /*#__PURE__*/function (LEGAL_HOLD_STATUS) {\n  LEGAL_HOLD_STATUS[\"ENABLED\"] = \"ON\";\n  LEGAL_HOLD_STATUS[\"DISABLED\"] = \"OFF\";\n  return LEGAL_HOLD_STATUS;\n}({});\n\n/* Replication Config types */\n\n/* Replication Config types */\n\n/**\n * @deprecated keep for backward compatible, use `LEGAL_HOLD_STATUS` instead\n */\n\n/** List object api types **/ // Common types\n/** List object api types **/\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"AAAA,2FAA2F;;;;;;;AAEpF,IAAI,mBAAmB,WAAW,GAAE,SAAU,gBAAgB;IACnE,gBAAgB,CAAC,OAAO,GAAG;IAC3B,gBAAgB,CAAC,MAAM,GAAG;IAC1B,OAAO;AACT,EAAE,CAAC;AACI,IAAI,kBAAkB,WAAW,GAAE,SAAU,eAAe;IACjE,eAAe,CAAC,aAAa,GAAG;IAChC,eAAe,CAAC,aAAa,GAAG;IAChC,OAAO;AACT,EAAE,CAAC;AACI,IAAI,2BAA2B,WAAW,GAAE,SAAU,wBAAwB;IACnF,wBAAwB,CAAC,OAAO,GAAG;IACnC,wBAAwB,CAAC,QAAQ,GAAG;IACpC,OAAO;AACT,EAAE,CAAC;AACI,IAAI,oBAAoB,WAAW,GAAE,SAAU,iBAAiB;IACrE,iBAAiB,CAAC,UAAU,GAAG;IAC/B,iBAAiB,CAAC,WAAW,GAAG;IAChC,OAAO;AACT,EAAE,CAAC,IAEH,4BAA4B,IAE5B,4BAA4B,IAE5B;;CAEC,IAED,2BAA2B,IAAG,eAAe;CAC7C,2BAA2B,IAC3B,gjhBAAgjhB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 275, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/internal/helper.mjs"],"sourcesContent":["/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2015 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as crypto from \"crypto\";\nimport * as stream from \"stream\";\nimport { XMLParser } from 'fast-xml-parser';\nimport ipaddr from 'ipaddr.js';\nimport _ from 'lodash';\nimport * as mime from 'mime-types';\nimport { fsp, fstat } from \"./async.mjs\";\nimport { ENCRYPTION_TYPES } from \"./type.mjs\";\nconst MetaDataHeaderPrefix = 'x-amz-meta-';\nexport function hashBinary(buf, enableSHA256) {\n  let sha256sum = '';\n  if (enableSHA256) {\n    sha256sum = crypto.createHash('sha256').update(buf).digest('hex');\n  }\n  const md5sum = crypto.createHash('md5').update(buf).digest('base64');\n  return {\n    md5sum,\n    sha256sum\n  };\n}\n\n// S3 percent-encodes some extra non-standard characters in a URI . So comply with S3.\nconst encodeAsHex = c => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;\nexport function uriEscape(uriStr) {\n  return encodeURIComponent(uriStr).replace(/[!'()*]/g, encodeAsHex);\n}\nexport function uriResourceEscape(string) {\n  return uriEscape(string).replace(/%2F/g, '/');\n}\nexport function getScope(region, date, serviceName = 's3') {\n  return `${makeDateShort(date)}/${region}/${serviceName}/aws4_request`;\n}\n\n/**\n * isAmazonEndpoint - true if endpoint is 's3.amazonaws.com' or 's3.cn-north-1.amazonaws.com.cn'\n */\nexport function isAmazonEndpoint(endpoint) {\n  return endpoint === 's3.amazonaws.com' || endpoint === 's3.cn-north-1.amazonaws.com.cn';\n}\n\n/**\n * isVirtualHostStyle - verify if bucket name is support with virtual\n * hosts. bucketNames with periods should be always treated as path\n * style if the protocol is 'https:', this is due to SSL wildcard\n * limitation. For all other buckets and Amazon S3 endpoint we will\n * default to virtual host style.\n */\nexport function isVirtualHostStyle(endpoint, protocol, bucket, pathStyle) {\n  if (protocol === 'https:' && bucket.includes('.')) {\n    return false;\n  }\n  return isAmazonEndpoint(endpoint) || !pathStyle;\n}\nexport function isValidIP(ip) {\n  return ipaddr.isValid(ip);\n}\n\n/**\n * @returns if endpoint is valid domain.\n */\nexport function isValidEndpoint(endpoint) {\n  return isValidDomain(endpoint) || isValidIP(endpoint);\n}\n\n/**\n * @returns if input host is a valid domain.\n */\nexport function isValidDomain(host) {\n  if (!isString(host)) {\n    return false;\n  }\n  // See RFC 1035, RFC 3696.\n  if (host.length === 0 || host.length > 255) {\n    return false;\n  }\n  // Host cannot start or end with a '-'\n  if (host[0] === '-' || host.slice(-1) === '-') {\n    return false;\n  }\n  // Host cannot start or end with a '_'\n  if (host[0] === '_' || host.slice(-1) === '_') {\n    return false;\n  }\n  // Host cannot start with a '.'\n  if (host[0] === '.') {\n    return false;\n  }\n  const nonAlphaNumerics = '`~!@#$%^&*()+={}[]|\\\\\"\\';:><?/';\n  // All non alphanumeric characters are invalid.\n  for (const char of nonAlphaNumerics) {\n    if (host.includes(char)) {\n      return false;\n    }\n  }\n  // No need to regexp match, since the list is non-exhaustive.\n  // We let it be valid and fail later.\n  return true;\n}\n\n/**\n * Probes contentType using file extensions.\n *\n * @example\n * ```\n * // return 'image/png'\n * probeContentType('file.png')\n * ```\n */\nexport function probeContentType(path) {\n  let contentType = mime.lookup(path);\n  if (!contentType) {\n    contentType = 'application/octet-stream';\n  }\n  return contentType;\n}\n\n/**\n * is input port valid.\n */\nexport function isValidPort(port) {\n  // Convert string port to number if needed\n  const portNum = typeof port === 'string' ? parseInt(port, 10) : port;\n\n  // verify if port is a valid number\n  if (!isNumber(portNum) || isNaN(portNum)) {\n    return false;\n  }\n\n  // port `0` is valid and special case\n  return 0 <= portNum && portNum <= 65535;\n}\nexport function isValidBucketName(bucket) {\n  if (!isString(bucket)) {\n    return false;\n  }\n\n  // bucket length should be less than and no more than 63\n  // characters long.\n  if (bucket.length < 3 || bucket.length > 63) {\n    return false;\n  }\n  // bucket with successive periods is invalid.\n  if (bucket.includes('..')) {\n    return false;\n  }\n  // bucket cannot have ip address style.\n  if (/[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+/.test(bucket)) {\n    return false;\n  }\n  // bucket should begin with alphabet/number and end with alphabet/number,\n  // with alphabet/number/.- in the middle.\n  if (/^[a-z0-9][a-z0-9.-]+[a-z0-9]$/.test(bucket)) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * check if objectName is a valid object name\n */\nexport function isValidObjectName(objectName) {\n  if (!isValidPrefix(objectName)) {\n    return false;\n  }\n  return objectName.length !== 0;\n}\n\n/**\n * check if prefix is valid\n */\nexport function isValidPrefix(prefix) {\n  if (!isString(prefix)) {\n    return false;\n  }\n  if (prefix.length > 1024) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * check if typeof arg number\n */\nexport function isNumber(arg) {\n  return typeof arg === 'number';\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n/**\n * check if typeof arg function\n */\nexport function isFunction(arg) {\n  return typeof arg === 'function';\n}\n\n/**\n * check if typeof arg string\n */\nexport function isString(arg) {\n  return typeof arg === 'string';\n}\n\n/**\n * check if typeof arg object\n */\nexport function isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\n/**\n * check if object is readable stream\n */\nexport function isReadableStream(arg) {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  return isObject(arg) && isFunction(arg._read);\n}\n\n/**\n * check if arg is boolean\n */\nexport function isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexport function isEmpty(o) {\n  return _.isEmpty(o);\n}\nexport function isEmptyObject(o) {\n  return Object.values(o).filter(x => x !== undefined).length !== 0;\n}\nexport function isDefined(o) {\n  return o !== null && o !== undefined;\n}\n\n/**\n * check if arg is a valid date\n */\nexport function isValidDate(arg) {\n  // @ts-expect-error checknew Date(Math.NaN)\n  return arg instanceof Date && !isNaN(arg);\n}\n\n/**\n * Create a Date string with format: 'YYYYMMDDTHHmmss' + Z\n */\nexport function makeDateLong(date) {\n  date = date || new Date();\n\n  // Gives format like: '2017-08-07T16:28:59.889Z'\n  const s = date.toISOString();\n  return s.slice(0, 4) + s.slice(5, 7) + s.slice(8, 13) + s.slice(14, 16) + s.slice(17, 19) + 'Z';\n}\n\n/**\n * Create a Date string with format: 'YYYYMMDD'\n */\nexport function makeDateShort(date) {\n  date = date || new Date();\n\n  // Gives format like: '2017-08-07T16:28:59.889Z'\n  const s = date.toISOString();\n  return s.slice(0, 4) + s.slice(5, 7) + s.slice(8, 10);\n}\n\n/**\n * pipesetup sets up pipe() from left to right os streams array\n * pipesetup will also make sure that error emitted at any of the upstream Stream\n * will be emitted at the last stream. This makes error handling simple\n */\nexport function pipesetup(...streams) {\n  // @ts-expect-error ts can't narrow this\n  return streams.reduce((src, dst) => {\n    src.on('error', err => dst.emit('error', err));\n    return src.pipe(dst);\n  });\n}\n\n/**\n * return a Readable stream that emits data\n */\nexport function readableStream(data) {\n  const s = new stream.Readable();\n  s._read = () => {};\n  s.push(data);\n  s.push(null);\n  return s;\n}\n\n/**\n * Process metadata to insert appropriate value to `content-type` attribute\n */\nexport function insertContentType(metaData, filePath) {\n  // check if content-type attribute present in metaData\n  for (const key in metaData) {\n    if (key.toLowerCase() === 'content-type') {\n      return metaData;\n    }\n  }\n\n  // if `content-type` attribute is not present in metadata, then infer it from the extension in filePath\n  return {\n    ...metaData,\n    'content-type': probeContentType(filePath)\n  };\n}\n\n/**\n * Function prepends metadata with the appropriate prefix if it is not already on\n */\nexport function prependXAMZMeta(metaData) {\n  if (!metaData) {\n    return {};\n  }\n  return _.mapKeys(metaData, (value, key) => {\n    if (isAmzHeader(key) || isSupportedHeader(key) || isStorageClassHeader(key)) {\n      return key;\n    }\n    return MetaDataHeaderPrefix + key;\n  });\n}\n\n/**\n * Checks if it is a valid header according to the AmazonS3 API\n */\nexport function isAmzHeader(key) {\n  const temp = key.toLowerCase();\n  return temp.startsWith(MetaDataHeaderPrefix) || temp === 'x-amz-acl' || temp.startsWith('x-amz-server-side-encryption-') || temp === 'x-amz-server-side-encryption';\n}\n\n/**\n * Checks if it is a supported Header\n */\nexport function isSupportedHeader(key) {\n  const supported_headers = ['content-type', 'cache-control', 'content-encoding', 'content-disposition', 'content-language', 'x-amz-website-redirect-location', 'if-none-match', 'if-match'];\n  return supported_headers.includes(key.toLowerCase());\n}\n\n/**\n * Checks if it is a storage header\n */\nexport function isStorageClassHeader(key) {\n  return key.toLowerCase() === 'x-amz-storage-class';\n}\nexport function extractMetadata(headers) {\n  return _.mapKeys(_.pickBy(headers, (value, key) => isSupportedHeader(key) || isStorageClassHeader(key) || isAmzHeader(key)), (value, key) => {\n    const lower = key.toLowerCase();\n    if (lower.startsWith(MetaDataHeaderPrefix)) {\n      return lower.slice(MetaDataHeaderPrefix.length);\n    }\n    return key;\n  });\n}\nexport function getVersionId(headers = {}) {\n  return headers['x-amz-version-id'] || null;\n}\nexport function getSourceVersionId(headers = {}) {\n  return headers['x-amz-copy-source-version-id'] || null;\n}\nexport function sanitizeETag(etag = '') {\n  const replaceChars = {\n    '\"': '',\n    '&quot;': '',\n    '&#34;': '',\n    '&QUOT;': '',\n    '&#x00022': ''\n  };\n  return etag.replace(/^(\"|&quot;|&#34;)|(\"|&quot;|&#34;)$/g, m => replaceChars[m]);\n}\nexport function toMd5(payload) {\n  // use string from browser and buffer from nodejs\n  // browser support is tested only against minio server\n  return crypto.createHash('md5').update(Buffer.from(payload)).digest().toString('base64');\n}\nexport function toSha256(payload) {\n  return crypto.createHash('sha256').update(payload).digest('hex');\n}\n\n/**\n * toArray returns a single element array with param being the element,\n * if param is just a string, and returns 'param' back if it is an array\n * So, it makes sure param is always an array\n */\nexport function toArray(param) {\n  if (!Array.isArray(param)) {\n    return [param];\n  }\n  return param;\n}\nexport function sanitizeObjectKey(objectName) {\n  // + symbol characters are not decoded as spaces in JS. so replace them first and decode to get the correct result.\n  const asStrName = (objectName ? objectName.toString() : '').replace(/\\+/g, ' ');\n  return decodeURIComponent(asStrName);\n}\nexport function sanitizeSize(size) {\n  return size ? Number.parseInt(size) : undefined;\n}\nexport const PART_CONSTRAINTS = {\n  // absMinPartSize - absolute minimum part size (5 MiB)\n  ABS_MIN_PART_SIZE: 1024 * 1024 * 5,\n  // MIN_PART_SIZE - minimum part size 16MiB per object after which\n  MIN_PART_SIZE: 1024 * 1024 * 16,\n  // MAX_PARTS_COUNT - maximum number of parts for a single multipart session.\n  MAX_PARTS_COUNT: 10000,\n  // MAX_PART_SIZE - maximum part size 5GiB for a single multipart upload\n  // operation.\n  MAX_PART_SIZE: 1024 * 1024 * 1024 * 5,\n  // MAX_SINGLE_PUT_OBJECT_SIZE - maximum size 5GiB of object per PUT\n  // operation.\n  MAX_SINGLE_PUT_OBJECT_SIZE: 1024 * 1024 * 1024 * 5,\n  // MAX_MULTIPART_PUT_OBJECT_SIZE - maximum size 5TiB of object for\n  // Multipart operation.\n  MAX_MULTIPART_PUT_OBJECT_SIZE: 1024 * 1024 * 1024 * 1024 * 5\n};\nconst GENERIC_SSE_HEADER = 'X-Amz-Server-Side-Encryption';\nconst ENCRYPTION_HEADERS = {\n  // sseGenericHeader is the AWS SSE header used for SSE-S3 and SSE-KMS.\n  sseGenericHeader: GENERIC_SSE_HEADER,\n  // sseKmsKeyID is the AWS SSE-KMS key id.\n  sseKmsKeyID: GENERIC_SSE_HEADER + '-Aws-Kms-Key-Id'\n};\n\n/**\n * Return Encryption headers\n * @param encConfig\n * @returns an object with key value pairs that can be used in headers.\n */\nexport function getEncryptionHeaders(encConfig) {\n  const encType = encConfig.type;\n  if (!isEmpty(encType)) {\n    if (encType === ENCRYPTION_TYPES.SSEC) {\n      return {\n        [ENCRYPTION_HEADERS.sseGenericHeader]: 'AES256'\n      };\n    } else if (encType === ENCRYPTION_TYPES.KMS) {\n      return {\n        [ENCRYPTION_HEADERS.sseGenericHeader]: encConfig.SSEAlgorithm,\n        [ENCRYPTION_HEADERS.sseKmsKeyID]: encConfig.KMSMasterKeyID\n      };\n    }\n  }\n  return {};\n}\nexport function partsRequired(size) {\n  const maxPartSize = PART_CONSTRAINTS.MAX_MULTIPART_PUT_OBJECT_SIZE / (PART_CONSTRAINTS.MAX_PARTS_COUNT - 1);\n  let requiredPartSize = size / maxPartSize;\n  if (size % maxPartSize > 0) {\n    requiredPartSize++;\n  }\n  requiredPartSize = Math.trunc(requiredPartSize);\n  return requiredPartSize;\n}\n\n/**\n * calculateEvenSplits - computes splits for a source and returns\n * start and end index slices. Splits happen evenly to be sure that no\n * part is less than 5MiB, as that could fail the multipart request if\n * it is not the last part.\n */\nexport function calculateEvenSplits(size, objInfo) {\n  if (size === 0) {\n    return null;\n  }\n  const reqParts = partsRequired(size);\n  const startIndexParts = [];\n  const endIndexParts = [];\n  let start = objInfo.Start;\n  if (isEmpty(start) || start === -1) {\n    start = 0;\n  }\n  const divisorValue = Math.trunc(size / reqParts);\n  const reminderValue = size % reqParts;\n  let nextStart = start;\n  for (let i = 0; i < reqParts; i++) {\n    let curPartSize = divisorValue;\n    if (i < reminderValue) {\n      curPartSize++;\n    }\n    const currentStart = nextStart;\n    const currentEnd = currentStart + curPartSize - 1;\n    nextStart = currentEnd + 1;\n    startIndexParts.push(currentStart);\n    endIndexParts.push(currentEnd);\n  }\n  return {\n    startIndex: startIndexParts,\n    endIndex: endIndexParts,\n    objInfo: objInfo\n  };\n}\nconst fxp = new XMLParser({\n  numberParseOptions: {\n    eNotation: false,\n    hex: true,\n    leadingZeros: true\n  }\n});\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function parseXml(xml) {\n  const result = fxp.parse(xml);\n  if (result.Error) {\n    throw result.Error;\n  }\n  return result;\n}\n\n/**\n * get content size of object content to upload\n */\nexport async function getContentLength(s) {\n  // use length property of string | Buffer\n  if (typeof s === 'string' || Buffer.isBuffer(s)) {\n    return s.length;\n  }\n\n  // property of `fs.ReadStream`\n  const filePath = s.path;\n  if (filePath && typeof filePath === 'string') {\n    const stat = await fsp.lstat(filePath);\n    return stat.size;\n  }\n\n  // property of `fs.ReadStream`\n  const fd = s.fd;\n  if (fd && typeof fd === 'number') {\n    const stat = await fstat(fd);\n    return stat.size;\n  }\n  return null;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 752, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/helpers.mjs"],"sourcesContent":["import * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as querystring from 'query-string';\nimport * as errors from \"./errors.mjs\";\nimport { getEncryptionHeaders, isEmpty, isEmptyObject, isNumber, isObject, isString, isValidBucketName, isValidObjectName } from \"./internal/helper.mjs\";\nimport { RETENTION_MODES } from \"./internal/type.mjs\";\nexport { ENCRYPTION_TYPES, LEGAL_HOLD_STATUS, RETENTION_MODES, RETENTION_VALIDITY_UNITS } from \"./internal/type.mjs\";\nexport const DEFAULT_REGION = 'us-east-1';\nexport const PRESIGN_EXPIRY_DAYS_MAX = 24 * 60 * 60 * 7; // 7 days in seconds\n\nexport class CopySourceOptions {\n  constructor({\n    Bucket,\n    Object,\n    VersionID = '',\n    MatchETag = '',\n    NoMatchETag = '',\n    MatchModifiedSince = null,\n    MatchUnmodifiedSince = null,\n    MatchRange = false,\n    Start = 0,\n    End = 0,\n    Encryption = undefined\n  }) {\n    this.Bucket = Bucket;\n    this.Object = Object;\n    this.VersionID = VersionID;\n    this.MatchETag = MatchETag;\n    this.NoMatchETag = NoMatchETag;\n    this.MatchModifiedSince = MatchModifiedSince;\n    this.MatchUnmodifiedSince = MatchUnmodifiedSince;\n    this.MatchRange = MatchRange;\n    this.Start = Start;\n    this.End = End;\n    this.Encryption = Encryption;\n  }\n  validate() {\n    if (!isValidBucketName(this.Bucket)) {\n      throw new errors.InvalidBucketNameError('Invalid Source bucket name: ' + this.Bucket);\n    }\n    if (!isValidObjectName(this.Object)) {\n      throw new errors.InvalidObjectNameError(`Invalid Source object name: ${this.Object}`);\n    }\n    if (this.MatchRange && this.Start !== -1 && this.End !== -1 && this.Start > this.End || this.Start < 0) {\n      throw new errors.InvalidObjectNameError('Source start must be non-negative, and start must be at most end.');\n    } else if (this.MatchRange && !isNumber(this.Start) || !isNumber(this.End)) {\n      throw new errors.InvalidObjectNameError('MatchRange is specified. But Invalid Start and End values are specified.');\n    }\n    return true;\n  }\n  getHeaders() {\n    const headerOptions = {};\n    headerOptions['x-amz-copy-source'] = encodeURI(this.Bucket + '/' + this.Object);\n    if (!isEmpty(this.VersionID)) {\n      headerOptions['x-amz-copy-source'] = `${encodeURI(this.Bucket + '/' + this.Object)}?versionId=${this.VersionID}`;\n    }\n    if (!isEmpty(this.MatchETag)) {\n      headerOptions['x-amz-copy-source-if-match'] = this.MatchETag;\n    }\n    if (!isEmpty(this.NoMatchETag)) {\n      headerOptions['x-amz-copy-source-if-none-match'] = this.NoMatchETag;\n    }\n    if (!isEmpty(this.MatchModifiedSince)) {\n      headerOptions['x-amz-copy-source-if-modified-since'] = this.MatchModifiedSince;\n    }\n    if (!isEmpty(this.MatchUnmodifiedSince)) {\n      headerOptions['x-amz-copy-source-if-unmodified-since'] = this.MatchUnmodifiedSince;\n    }\n    return headerOptions;\n  }\n}\n\n/**\n * @deprecated use nodejs fs module\n */\nexport function removeDirAndFiles(dirPath, removeSelf = true) {\n  if (removeSelf) {\n    return fs.rmSync(dirPath, {\n      recursive: true,\n      force: true\n    });\n  }\n  fs.readdirSync(dirPath).forEach(item => {\n    fs.rmSync(path.join(dirPath, item), {\n      recursive: true,\n      force: true\n    });\n  });\n}\nexport class CopyDestinationOptions {\n  constructor({\n    Bucket,\n    Object,\n    Encryption,\n    UserMetadata,\n    UserTags,\n    LegalHold,\n    RetainUntilDate,\n    Mode,\n    MetadataDirective,\n    Headers\n  }) {\n    this.Bucket = Bucket;\n    this.Object = Object;\n    this.Encryption = Encryption ?? undefined; // null input will become undefined, easy for runtime assert\n    this.UserMetadata = UserMetadata;\n    this.UserTags = UserTags;\n    this.LegalHold = LegalHold;\n    this.Mode = Mode; // retention mode\n    this.RetainUntilDate = RetainUntilDate;\n    this.MetadataDirective = MetadataDirective;\n    this.Headers = Headers;\n  }\n  getHeaders() {\n    const replaceDirective = 'REPLACE';\n    const headerOptions = {};\n    const userTags = this.UserTags;\n    if (!isEmpty(userTags)) {\n      headerOptions['X-Amz-Tagging-Directive'] = replaceDirective;\n      headerOptions['X-Amz-Tagging'] = isObject(userTags) ? querystring.stringify(userTags) : isString(userTags) ? userTags : '';\n    }\n    if (this.Mode) {\n      headerOptions['X-Amz-Object-Lock-Mode'] = this.Mode; // GOVERNANCE or COMPLIANCE\n    }\n\n    if (this.RetainUntilDate) {\n      headerOptions['X-Amz-Object-Lock-Retain-Until-Date'] = this.RetainUntilDate; // needs to be UTC.\n    }\n\n    if (this.LegalHold) {\n      headerOptions['X-Amz-Object-Lock-Legal-Hold'] = this.LegalHold; // ON or OFF\n    }\n\n    if (this.UserMetadata) {\n      for (const [key, value] of Object.entries(this.UserMetadata)) {\n        headerOptions[`X-Amz-Meta-${key}`] = value.toString();\n      }\n    }\n    if (this.MetadataDirective) {\n      headerOptions[`X-Amz-Metadata-Directive`] = this.MetadataDirective;\n    }\n    if (this.Encryption) {\n      const encryptionHeaders = getEncryptionHeaders(this.Encryption);\n      for (const [key, value] of Object.entries(encryptionHeaders)) {\n        headerOptions[key] = value;\n      }\n    }\n    if (this.Headers) {\n      for (const [key, value] of Object.entries(this.Headers)) {\n        headerOptions[key] = value;\n      }\n    }\n    return headerOptions;\n  }\n  validate() {\n    if (!isValidBucketName(this.Bucket)) {\n      throw new errors.InvalidBucketNameError('Invalid Destination bucket name: ' + this.Bucket);\n    }\n    if (!isValidObjectName(this.Object)) {\n      throw new errors.InvalidObjectNameError(`Invalid Destination object name: ${this.Object}`);\n    }\n    if (!isEmpty(this.UserMetadata) && !isObject(this.UserMetadata)) {\n      throw new errors.InvalidObjectNameError(`Destination UserMetadata should be an object with key value pairs`);\n    }\n    if (!isEmpty(this.Mode) && ![RETENTION_MODES.GOVERNANCE, RETENTION_MODES.COMPLIANCE].includes(this.Mode)) {\n      throw new errors.InvalidObjectNameError(`Invalid Mode specified for destination object it should be one of [GOVERNANCE,COMPLIANCE]`);\n    }\n    if (this.Encryption !== undefined && isEmptyObject(this.Encryption)) {\n      throw new errors.InvalidObjectNameError(`Invalid Encryption configuration for destination object `);\n    }\n    return true;\n  }\n}\n\n/**\n * maybe this should be a generic type for Records, leave it for later refactor\n */\nexport class SelectResults {\n  constructor({\n    records,\n    // parsed data as stream\n    response,\n    // original response stream\n    stats,\n    // stats as xml\n    progress // stats as xml\n  }) {\n    this.records = records;\n    this.response = response;\n    this.stats = stats;\n    this.progress = progress;\n  }\n  setStats(stats) {\n    this.stats = stats;\n  }\n  getStats() {\n    return this.stats;\n  }\n  setProgress(progress) {\n    this.progress = progress;\n  }\n  getProgress() {\n    return this.progress;\n  }\n  setResponse(response) {\n    this.response = response;\n  }\n  getResponse() {\n    return this.response;\n  }\n  setRecords(records) {\n    this.records = records;\n  }\n  getRecords() {\n    return this.records;\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 967, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/signing.mjs"],"sourcesContent":["/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2016 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as crypto from \"crypto\";\nimport * as errors from \"./errors.mjs\";\nimport { PRESIGN_EXPIRY_DAYS_MAX } from \"./helpers.mjs\";\nimport { getScope, isNumber, isObject, isString, makeDateLong, makeDateShort, uriEscape } from \"./internal/helper.mjs\";\nconst signV4Algorithm = 'AWS4-HMAC-SHA256';\n\n// getCanonicalRequest generate a canonical request of style.\n//\n// canonicalRequest =\n//  <HTTPMethod>\\n\n//  <CanonicalURI>\\n\n//  <CanonicalQueryString>\\n\n//  <CanonicalHeaders>\\n\n//  <SignedHeaders>\\n\n//  <HashedPayload>\n//\nfunction getCanonicalRequest(method, path, headers, signedHeaders, hashedPayload) {\n  if (!isString(method)) {\n    throw new TypeError('method should be of type \"string\"');\n  }\n  if (!isString(path)) {\n    throw new TypeError('path should be of type \"string\"');\n  }\n  if (!isObject(headers)) {\n    throw new TypeError('headers should be of type \"object\"');\n  }\n  if (!Array.isArray(signedHeaders)) {\n    throw new TypeError('signedHeaders should be of type \"array\"');\n  }\n  if (!isString(hashedPayload)) {\n    throw new TypeError('hashedPayload should be of type \"string\"');\n  }\n  const headersArray = signedHeaders.reduce((acc, i) => {\n    // Trim spaces from the value (required by V4 spec)\n    const val = `${headers[i]}`.replace(/ +/g, ' ');\n    acc.push(`${i.toLowerCase()}:${val}`);\n    return acc;\n  }, []);\n  const requestResource = path.split('?')[0];\n  let requestQuery = path.split('?')[1];\n  if (!requestQuery) {\n    requestQuery = '';\n  }\n  if (requestQuery) {\n    requestQuery = requestQuery.split('&').sort().map(element => !element.includes('=') ? element + '=' : element).join('&');\n  }\n  return [method.toUpperCase(), requestResource, requestQuery, headersArray.join('\\n') + '\\n', signedHeaders.join(';').toLowerCase(), hashedPayload].join('\\n');\n}\n\n// generate a credential string\nfunction getCredential(accessKey, region, requestDate, serviceName = 's3') {\n  if (!isString(accessKey)) {\n    throw new TypeError('accessKey should be of type \"string\"');\n  }\n  if (!isString(region)) {\n    throw new TypeError('region should be of type \"string\"');\n  }\n  if (!isObject(requestDate)) {\n    throw new TypeError('requestDate should be of type \"object\"');\n  }\n  return `${accessKey}/${getScope(region, requestDate, serviceName)}`;\n}\n\n// Returns signed headers array - alphabetically sorted\nfunction getSignedHeaders(headers) {\n  if (!isObject(headers)) {\n    throw new TypeError('request should be of type \"object\"');\n  }\n  // Excerpts from @lsegal - https://github.com/aws/aws-sdk-js/issues/659#issuecomment-120477258\n  //\n  //  User-Agent:\n  //\n  //      This is ignored from signing because signing this causes problems with generating pre-signed URLs\n  //      (that are executed by other agents) or when customers pass requests through proxies, which may\n  //      modify the user-agent.\n  //\n  //  Content-Length:\n  //\n  //      This is ignored from signing because generating a pre-signed URL should not provide a content-length\n  //      constraint, specifically when vending a S3 pre-signed PUT URL. The corollary to this is that when\n  //      sending regular requests (non-pre-signed), the signature contains a checksum of the body, which\n  //      implicitly validates the payload length (since changing the number of bytes would change the checksum)\n  //      and therefore this header is not valuable in the signature.\n  //\n  //  Content-Type:\n  //\n  //      Signing this header causes quite a number of problems in browser environments, where browsers\n  //      like to modify and normalize the content-type header in different ways. There is more information\n  //      on this in https://github.com/aws/aws-sdk-js/issues/244. Avoiding this field simplifies logic\n  //      and reduces the possibility of future bugs\n  //\n  //  Authorization:\n  //\n  //      Is skipped for obvious reasons\n\n  const ignoredHeaders = ['authorization', 'content-length', 'content-type', 'user-agent'];\n  return Object.keys(headers).filter(header => !ignoredHeaders.includes(header)).sort();\n}\n\n// returns the key used for calculating signature\nfunction getSigningKey(date, region, secretKey, serviceName = 's3') {\n  if (!isObject(date)) {\n    throw new TypeError('date should be of type \"object\"');\n  }\n  if (!isString(region)) {\n    throw new TypeError('region should be of type \"string\"');\n  }\n  if (!isString(secretKey)) {\n    throw new TypeError('secretKey should be of type \"string\"');\n  }\n  const dateLine = makeDateShort(date);\n  const hmac1 = crypto.createHmac('sha256', 'AWS4' + secretKey).update(dateLine).digest(),\n    hmac2 = crypto.createHmac('sha256', hmac1).update(region).digest(),\n    hmac3 = crypto.createHmac('sha256', hmac2).update(serviceName).digest();\n  return crypto.createHmac('sha256', hmac3).update('aws4_request').digest();\n}\n\n// returns the string that needs to be signed\nfunction getStringToSign(canonicalRequest, requestDate, region, serviceName = 's3') {\n  if (!isString(canonicalRequest)) {\n    throw new TypeError('canonicalRequest should be of type \"string\"');\n  }\n  if (!isObject(requestDate)) {\n    throw new TypeError('requestDate should be of type \"object\"');\n  }\n  if (!isString(region)) {\n    throw new TypeError('region should be of type \"string\"');\n  }\n  const hash = crypto.createHash('sha256').update(canonicalRequest).digest('hex');\n  const scope = getScope(region, requestDate, serviceName);\n  const stringToSign = [signV4Algorithm, makeDateLong(requestDate), scope, hash];\n  return stringToSign.join('\\n');\n}\n\n// calculate the signature of the POST policy\nexport function postPresignSignatureV4(region, date, secretKey, policyBase64) {\n  if (!isString(region)) {\n    throw new TypeError('region should be of type \"string\"');\n  }\n  if (!isObject(date)) {\n    throw new TypeError('date should be of type \"object\"');\n  }\n  if (!isString(secretKey)) {\n    throw new TypeError('secretKey should be of type \"string\"');\n  }\n  if (!isString(policyBase64)) {\n    throw new TypeError('policyBase64 should be of type \"string\"');\n  }\n  const signingKey = getSigningKey(date, region, secretKey);\n  return crypto.createHmac('sha256', signingKey).update(policyBase64).digest('hex').toLowerCase();\n}\n\n// Returns the authorization header\nexport function signV4(request, accessKey, secretKey, region, requestDate, sha256sum, serviceName = 's3') {\n  if (!isObject(request)) {\n    throw new TypeError('request should be of type \"object\"');\n  }\n  if (!isString(accessKey)) {\n    throw new TypeError('accessKey should be of type \"string\"');\n  }\n  if (!isString(secretKey)) {\n    throw new TypeError('secretKey should be of type \"string\"');\n  }\n  if (!isString(region)) {\n    throw new TypeError('region should be of type \"string\"');\n  }\n  if (!accessKey) {\n    throw new errors.AccessKeyRequiredError('accessKey is required for signing');\n  }\n  if (!secretKey) {\n    throw new errors.SecretKeyRequiredError('secretKey is required for signing');\n  }\n  const signedHeaders = getSignedHeaders(request.headers);\n  const canonicalRequest = getCanonicalRequest(request.method, request.path, request.headers, signedHeaders, sha256sum);\n  const serviceIdentifier = serviceName || 's3';\n  const stringToSign = getStringToSign(canonicalRequest, requestDate, region, serviceIdentifier);\n  const signingKey = getSigningKey(requestDate, region, secretKey, serviceIdentifier);\n  const credential = getCredential(accessKey, region, requestDate, serviceIdentifier);\n  const signature = crypto.createHmac('sha256', signingKey).update(stringToSign).digest('hex').toLowerCase();\n  return `${signV4Algorithm} Credential=${credential}, SignedHeaders=${signedHeaders.join(';').toLowerCase()}, Signature=${signature}`;\n}\nexport function signV4ByServiceName(request, accessKey, secretKey, region, requestDate, contentSha256, serviceName = 's3') {\n  return signV4(request, accessKey, secretKey, region, requestDate, contentSha256, serviceName);\n}\n\n// returns a presigned URL string\nexport function presignSignatureV4(request, accessKey, secretKey, sessionToken, region, requestDate, expires) {\n  if (!isObject(request)) {\n    throw new TypeError('request should be of type \"object\"');\n  }\n  if (!isString(accessKey)) {\n    throw new TypeError('accessKey should be of type \"string\"');\n  }\n  if (!isString(secretKey)) {\n    throw new TypeError('secretKey should be of type \"string\"');\n  }\n  if (!isString(region)) {\n    throw new TypeError('region should be of type \"string\"');\n  }\n  if (!accessKey) {\n    throw new errors.AccessKeyRequiredError('accessKey is required for presigning');\n  }\n  if (!secretKey) {\n    throw new errors.SecretKeyRequiredError('secretKey is required for presigning');\n  }\n  if (expires && !isNumber(expires)) {\n    throw new TypeError('expires should be of type \"number\"');\n  }\n  if (expires && expires < 1) {\n    throw new errors.ExpiresParamError('expires param cannot be less than 1 seconds');\n  }\n  if (expires && expires > PRESIGN_EXPIRY_DAYS_MAX) {\n    throw new errors.ExpiresParamError('expires param cannot be greater than 7 days');\n  }\n  const iso8601Date = makeDateLong(requestDate);\n  const signedHeaders = getSignedHeaders(request.headers);\n  const credential = getCredential(accessKey, region, requestDate);\n  const hashedPayload = 'UNSIGNED-PAYLOAD';\n  const requestQuery = [];\n  requestQuery.push(`X-Amz-Algorithm=${signV4Algorithm}`);\n  requestQuery.push(`X-Amz-Credential=${uriEscape(credential)}`);\n  requestQuery.push(`X-Amz-Date=${iso8601Date}`);\n  requestQuery.push(`X-Amz-Expires=${expires}`);\n  requestQuery.push(`X-Amz-SignedHeaders=${uriEscape(signedHeaders.join(';').toLowerCase())}`);\n  if (sessionToken) {\n    requestQuery.push(`X-Amz-Security-Token=${uriEscape(sessionToken)}`);\n  }\n  const resource = request.path.split('?')[0];\n  let query = request.path.split('?')[1];\n  if (query) {\n    query = query + '&' + requestQuery.join('&');\n  } else {\n    query = requestQuery.join('&');\n  }\n  const path = resource + '?' + query;\n  const canonicalRequest = getCanonicalRequest(request.method, path, request.headers, signedHeaders, hashedPayload);\n  const stringToSign = getStringToSign(canonicalRequest, requestDate, region);\n  const signingKey = getSigningKey(requestDate, region, secretKey);\n  const signature = crypto.createHmac('sha256', signingKey).update(stringToSign).digest('hex').toLowerCase();\n  return request.protocol + '//' + request.headers.host + path + `&X-Amz-Signature=${signature}`;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1242, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/internal/copy-conditions.mjs"],"sourcesContent":["export class CopyConditions {\n  modified = '';\n  unmodified = '';\n  matchETag = '';\n  matchETagExcept = '';\n  setModified(date) {\n    if (!(date instanceof Date)) {\n      throw new TypeError('date must be of type Date');\n    }\n    this.modified = date.toUTCString();\n  }\n  setUnmodified(date) {\n    if (!(date instanceof Date)) {\n      throw new TypeError('date must be of type Date');\n    }\n    this.unmodified = date.toUTCString();\n  }\n  setMatchETag(etag) {\n    this.matchETag = etag;\n  }\n  setMatchETagExcept(etag) {\n    this.matchETagExcept = etag;\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb3B5Q29uZGl0aW9ucyIsIm1vZGlmaWVkIiwidW5tb2RpZmllZCIsIm1hdGNoRVRhZyIsIm1hdGNoRVRhZ0V4Y2VwdCIsInNldE1vZGlmaWVkIiwiZGF0ZSIsIkRhdGUiLCJUeXBlRXJyb3IiLCJ0b1VUQ1N0cmluZyIsInNldFVubW9kaWZpZWQiLCJzZXRNYXRjaEVUYWciLCJldGFnIiwic2V0TWF0Y2hFVGFnRXhjZXB0Il0sInNvdXJjZXMiOlsiY29weS1jb25kaXRpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBDb3B5Q29uZGl0aW9ucyB7XG4gIHB1YmxpYyBtb2RpZmllZCA9ICcnXG4gIHB1YmxpYyB1bm1vZGlmaWVkID0gJydcbiAgcHVibGljIG1hdGNoRVRhZyA9ICcnXG4gIHB1YmxpYyBtYXRjaEVUYWdFeGNlcHQgPSAnJ1xuXG4gIHNldE1vZGlmaWVkKGRhdGU6IERhdGUpOiB2b2lkIHtcbiAgICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGUgbXVzdCBiZSBvZiB0eXBlIERhdGUnKVxuICAgIH1cblxuICAgIHRoaXMubW9kaWZpZWQgPSBkYXRlLnRvVVRDU3RyaW5nKClcbiAgfVxuXG4gIHNldFVubW9kaWZpZWQoZGF0ZTogRGF0ZSk6IHZvaWQge1xuICAgIGlmICghKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGF0ZSBtdXN0IGJlIG9mIHR5cGUgRGF0ZScpXG4gICAgfVxuXG4gICAgdGhpcy51bm1vZGlmaWVkID0gZGF0ZS50b1VUQ1N0cmluZygpXG4gIH1cblxuICBzZXRNYXRjaEVUYWcoZXRhZzogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5tYXRjaEVUYWcgPSBldGFnXG4gIH1cblxuICBzZXRNYXRjaEVUYWdFeGNlcHQoZXRhZzogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5tYXRjaEVUYWdFeGNlcHQgPSBldGFnXG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxNQUFNQSxjQUFjLENBQUM7RUFDbkJDLFFBQVEsR0FBRyxFQUFFO0VBQ2JDLFVBQVUsR0FBRyxFQUFFO0VBQ2ZDLFNBQVMsR0FBRyxFQUFFO0VBQ2RDLGVBQWUsR0FBRyxFQUFFO0VBRTNCQyxXQUFXQSxDQUFDQyxJQUFVLEVBQVE7SUFDNUIsSUFBSSxFQUFFQSxJQUFJLFlBQVlDLElBQUksQ0FBQyxFQUFFO01BQzNCLE1BQU0sSUFBSUMsU0FBUyxDQUFDLDJCQUEyQixDQUFDO0lBQ2xEO0lBRUEsSUFBSSxDQUFDUCxRQUFRLEdBQUdLLElBQUksQ0FBQ0csV0FBVyxDQUFDLENBQUM7RUFDcEM7RUFFQUMsYUFBYUEsQ0FBQ0osSUFBVSxFQUFRO0lBQzlCLElBQUksRUFBRUEsSUFBSSxZQUFZQyxJQUFJLENBQUMsRUFBRTtNQUMzQixNQUFNLElBQUlDLFNBQVMsQ0FBQywyQkFBMkIsQ0FBQztJQUNsRDtJQUVBLElBQUksQ0FBQ04sVUFBVSxHQUFHSSxJQUFJLENBQUNHLFdBQVcsQ0FBQyxDQUFDO0VBQ3RDO0VBRUFFLFlBQVlBLENBQUNDLElBQVksRUFBUTtJQUMvQixJQUFJLENBQUNULFNBQVMsR0FBR1MsSUFBSTtFQUN2QjtFQUVBQyxrQkFBa0JBLENBQUNELElBQVksRUFBUTtJQUNyQyxJQUFJLENBQUNSLGVBQWUsR0FBR1EsSUFBSTtFQUM3QjtBQUNGIn0="],"names":[],"mappings":";;;AAAO,MAAM;IACX,WAAW,GAAG;IACd,aAAa,GAAG;IAChB,YAAY,GAAG;IACf,kBAAkB,GAAG;IACrB,YAAY,IAAI,EAAE;QAChB,IAAI,CAAC,CAAC,gBAAgB,IAAI,GAAG;YAC3B,MAAM,IAAI,UAAU;QACtB;QACA,IAAI,CAAC,QAAQ,GAAG,KAAK,WAAW;IAClC;IACA,cAAc,IAAI,EAAE;QAClB,IAAI,CAAC,CAAC,gBAAgB,IAAI,GAAG;YAC3B,MAAM,IAAI,UAAU;QACtB;QACA,IAAI,CAAC,UAAU,GAAG,KAAK,WAAW;IACpC;IACA,aAAa,IAAI,EAAE;QACjB,IAAI,CAAC,SAAS,GAAG;IACnB;IACA,mBAAmB,IAAI,EAAE;QACvB,IAAI,CAAC,eAAe,GAAG;IACzB;AACF,EACA,4kEAA4kE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1275, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/internal/response.mjs"],"sourcesContent":["export async function readAsBuffer(res) {\n  return new Promise((resolve, reject) => {\n    const body = [];\n    res.on('data', chunk => body.push(chunk)).on('error', e => reject(e)).on('end', () => resolve(Buffer.concat(body)));\n  });\n}\nexport async function readAsString(res) {\n  const body = await readAsBuffer(res);\n  return body.toString();\n}\nexport async function drainResponse(res) {\n  return new Promise((resolve, reject) => {\n    res.on('data', () => {}).on('error', e => reject(e)).on('end', () => resolve());\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFkQXNCdWZmZXIiLCJyZXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImJvZHkiLCJvbiIsImNodW5rIiwicHVzaCIsImUiLCJCdWZmZXIiLCJjb25jYXQiLCJyZWFkQXNTdHJpbmciLCJ0b1N0cmluZyIsImRyYWluUmVzcG9uc2UiXSwic291cmNlcyI6WyJyZXNwb25zZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSBodHRwIGZyb20gJ25vZGU6aHR0cCdcbmltcG9ydCB0eXBlIHN0cmVhbSBmcm9tICdub2RlOnN0cmVhbSdcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlYWRBc0J1ZmZlcihyZXM6IHN0cmVhbS5SZWFkYWJsZSk6IFByb21pc2U8QnVmZmVyPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgYm9keTogQnVmZmVyW10gPSBbXVxuICAgIHJlc1xuICAgICAgLm9uKCdkYXRhJywgKGNodW5rOiBCdWZmZXIpID0+IGJvZHkucHVzaChjaHVuaykpXG4gICAgICAub24oJ2Vycm9yJywgKGUpID0+IHJlamVjdChlKSlcbiAgICAgIC5vbignZW5kJywgKCkgPT4gcmVzb2x2ZShCdWZmZXIuY29uY2F0KGJvZHkpKSlcbiAgfSlcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlYWRBc1N0cmluZyhyZXM6IGh0dHAuSW5jb21pbmdNZXNzYWdlKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgYm9keSA9IGF3YWl0IHJlYWRBc0J1ZmZlcihyZXMpXG4gIHJldHVybiBib2R5LnRvU3RyaW5nKClcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRyYWluUmVzcG9uc2UocmVzOiBzdHJlYW0uUmVhZGFibGUpOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICByZXNcbiAgICAgIC5vbignZGF0YScsICgpID0+IHt9KVxuICAgICAgLm9uKCdlcnJvcicsIChlKSA9PiByZWplY3QoZSkpXG4gICAgICAub24oJ2VuZCcsICgpID0+IHJlc29sdmUoKSlcbiAgfSlcbn1cbiJdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxlQUFlQSxZQUFZQSxDQUFDQyxHQUFvQixFQUFtQjtFQUN4RSxPQUFPLElBQUlDLE9BQU8sQ0FBQyxDQUFDQyxPQUFPLEVBQUVDLE1BQU0sS0FBSztJQUN0QyxNQUFNQyxJQUFjLEdBQUcsRUFBRTtJQUN6QkosR0FBRyxDQUNBSyxFQUFFLENBQUMsTUFBTSxFQUFHQyxLQUFhLElBQUtGLElBQUksQ0FBQ0csSUFBSSxDQUFDRCxLQUFLLENBQUMsQ0FBQyxDQUMvQ0QsRUFBRSxDQUFDLE9BQU8sRUFBR0csQ0FBQyxJQUFLTCxNQUFNLENBQUNLLENBQUMsQ0FBQyxDQUFDLENBQzdCSCxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU1ILE9BQU8sQ0FBQ08sTUFBTSxDQUFDQyxNQUFNLENBQUNOLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbEQsQ0FBQyxDQUFDO0FBQ0o7QUFFQSxPQUFPLGVBQWVPLFlBQVlBLENBQUNYLEdBQXlCLEVBQW1CO0VBQzdFLE1BQU1JLElBQUksR0FBRyxNQUFNTCxZQUFZLENBQUNDLEdBQUcsQ0FBQztFQUNwQyxPQUFPSSxJQUFJLENBQUNRLFFBQVEsQ0FBQyxDQUFDO0FBQ3hCO0FBRUEsT0FBTyxlQUFlQyxhQUFhQSxDQUFDYixHQUFvQixFQUFpQjtFQUN2RSxPQUFPLElBQUlDLE9BQU8sQ0FBQyxDQUFDQyxPQUFPLEVBQUVDLE1BQU0sS0FBSztJQUN0Q0gsR0FBRyxDQUNBSyxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FDcEJBLEVBQUUsQ0FBQyxPQUFPLEVBQUdHLENBQUMsSUFBS0wsTUFBTSxDQUFDSyxDQUFDLENBQUMsQ0FBQyxDQUM3QkgsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNSCxPQUFPLENBQUMsQ0FBQyxDQUFDO0VBQy9CLENBQUMsQ0FBQztBQUNKIn0="],"names":[],"mappings":";;;;;AAAO,eAAe,aAAa,GAAG;IACpC,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,MAAM,OAAO,EAAE;QACf,IAAI,EAAE,CAAC,QAAQ,CAAA,QAAS,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAA,IAAK,OAAO,IAAI,EAAE,CAAC,OAAO,IAAM,QAAQ,OAAO,MAAM,CAAC;IAC9G;AACF;AACO,eAAe,aAAa,GAAG;IACpC,MAAM,OAAO,MAAM,aAAa;IAChC,OAAO,KAAK,QAAQ;AACtB;AACO,eAAe,cAAc,GAAG;IACrC,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,IAAI,EAAE,CAAC,QAAQ,KAAO,GAAG,EAAE,CAAC,SAAS,CAAA,IAAK,OAAO,IAAI,EAAE,CAAC,OAAO,IAAM;IACvE;AACF,EACA,47EAA47E","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1301, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/internal/xml-parser.mjs"],"sourcesContent":["import crc32 from 'buffer-crc32';\nimport { XMLParser } from 'fast-xml-parser';\nimport * as errors from \"../errors.mjs\";\nimport { SelectResults } from \"../helpers.mjs\";\nimport { isObject, parseXml, readableStream, sanitizeETag, sanitizeObjectKey, sanitizeSize, toArray } from \"./helper.mjs\";\nimport { readAsString } from \"./response.mjs\";\nimport { RETENTION_VALIDITY_UNITS } from \"./type.mjs\";\n\n// parse XML response for bucket region\nexport function parseBucketRegion(xml) {\n  // return region information\n  return parseXml(xml).LocationConstraint;\n}\nconst fxp = new XMLParser();\nconst fxpWithoutNumParser = new XMLParser({\n  // @ts-ignore\n  numberParseOptions: {\n    skipLike: /./\n  }\n});\n\n// Parse XML and return information as Javascript types\n// parse error XML response\nexport function parseError(xml, headerInfo) {\n  let xmlErr = {};\n  const xmlObj = fxp.parse(xml);\n  if (xmlObj.Error) {\n    xmlErr = xmlObj.Error;\n  }\n  const e = new errors.S3Error();\n  Object.entries(xmlErr).forEach(([key, value]) => {\n    e[key.toLowerCase()] = value;\n  });\n  Object.entries(headerInfo).forEach(([key, value]) => {\n    e[key] = value;\n  });\n  return e;\n}\n\n// Generates an Error object depending on http statusCode and XML body\nexport async function parseResponseError(response) {\n  const statusCode = response.statusCode;\n  let code = '',\n    message = '';\n  if (statusCode === 301) {\n    code = 'MovedPermanently';\n    message = 'Moved Permanently';\n  } else if (statusCode === 307) {\n    code = 'TemporaryRedirect';\n    message = 'Are you using the correct endpoint URL?';\n  } else if (statusCode === 403) {\n    code = 'AccessDenied';\n    message = 'Valid and authorized credentials required';\n  } else if (statusCode === 404) {\n    code = 'NotFound';\n    message = 'Not Found';\n  } else if (statusCode === 405) {\n    code = 'MethodNotAllowed';\n    message = 'Method Not Allowed';\n  } else if (statusCode === 501) {\n    code = 'MethodNotAllowed';\n    message = 'Method Not Allowed';\n  } else if (statusCode === 503) {\n    code = 'SlowDown';\n    message = 'Please reduce your request rate.';\n  } else {\n    const hErrCode = response.headers['x-minio-error-code'];\n    const hErrDesc = response.headers['x-minio-error-desc'];\n    if (hErrCode && hErrDesc) {\n      code = hErrCode;\n      message = hErrDesc;\n    }\n  }\n  const headerInfo = {};\n  // A value created by S3 compatible server that uniquely identifies the request.\n  headerInfo.amzRequestid = response.headers['x-amz-request-id'];\n  // A special token that helps troubleshoot API replies and issues.\n  headerInfo.amzId2 = response.headers['x-amz-id-2'];\n\n  // Region where the bucket is located. This header is returned only\n  // in HEAD bucket and ListObjects response.\n  headerInfo.amzBucketRegion = response.headers['x-amz-bucket-region'];\n  const xmlString = await readAsString(response);\n  if (xmlString) {\n    throw parseError(xmlString, headerInfo);\n  }\n\n  // Message should be instantiated for each S3Errors.\n  const e = new errors.S3Error(message, {\n    cause: headerInfo\n  });\n  // S3 Error code.\n  e.code = code;\n  Object.entries(headerInfo).forEach(([key, value]) => {\n    // @ts-expect-error force set error properties\n    e[key] = value;\n  });\n  throw e;\n}\n\n/**\n * parse XML response for list objects v2 with metadata in a bucket\n */\nexport function parseListObjectsV2WithMetadata(xml) {\n  const result = {\n    objects: [],\n    isTruncated: false,\n    nextContinuationToken: ''\n  };\n  let xmlobj = parseXml(xml);\n  if (!xmlobj.ListBucketResult) {\n    throw new errors.InvalidXMLError('Missing tag: \"ListBucketResult\"');\n  }\n  xmlobj = xmlobj.ListBucketResult;\n  if (xmlobj.IsTruncated) {\n    result.isTruncated = xmlobj.IsTruncated;\n  }\n  if (xmlobj.NextContinuationToken) {\n    result.nextContinuationToken = xmlobj.NextContinuationToken;\n  }\n  if (xmlobj.Contents) {\n    toArray(xmlobj.Contents).forEach(content => {\n      const name = sanitizeObjectKey(content.Key);\n      const lastModified = new Date(content.LastModified);\n      const etag = sanitizeETag(content.ETag);\n      const size = content.Size;\n      let tags = {};\n      if (content.UserTags != null) {\n        toArray(content.UserTags.split('&')).forEach(tag => {\n          const [key, value] = tag.split('=');\n          tags[key] = value;\n        });\n      } else {\n        tags = {};\n      }\n      let metadata;\n      if (content.UserMetadata != null) {\n        metadata = toArray(content.UserMetadata)[0];\n      } else {\n        metadata = null;\n      }\n      result.objects.push({\n        name,\n        lastModified,\n        etag,\n        size,\n        metadata,\n        tags\n      });\n    });\n  }\n  if (xmlobj.CommonPrefixes) {\n    toArray(xmlobj.CommonPrefixes).forEach(commonPrefix => {\n      result.objects.push({\n        prefix: sanitizeObjectKey(toArray(commonPrefix.Prefix)[0]),\n        size: 0\n      });\n    });\n  }\n  return result;\n}\n// parse XML response for list parts of an in progress multipart upload\nexport function parseListParts(xml) {\n  let xmlobj = parseXml(xml);\n  const result = {\n    isTruncated: false,\n    parts: [],\n    marker: 0\n  };\n  if (!xmlobj.ListPartsResult) {\n    throw new errors.InvalidXMLError('Missing tag: \"ListPartsResult\"');\n  }\n  xmlobj = xmlobj.ListPartsResult;\n  if (xmlobj.IsTruncated) {\n    result.isTruncated = xmlobj.IsTruncated;\n  }\n  if (xmlobj.NextPartNumberMarker) {\n    result.marker = toArray(xmlobj.NextPartNumberMarker)[0] || '';\n  }\n  if (xmlobj.Part) {\n    toArray(xmlobj.Part).forEach(p => {\n      const part = parseInt(toArray(p.PartNumber)[0], 10);\n      const lastModified = new Date(p.LastModified);\n      const etag = p.ETag.replace(/^\"/g, '').replace(/\"$/g, '').replace(/^&quot;/g, '').replace(/&quot;$/g, '').replace(/^&#34;/g, '').replace(/&#34;$/g, '');\n      result.parts.push({\n        part,\n        lastModified,\n        etag,\n        size: parseInt(p.Size, 10)\n      });\n    });\n  }\n  return result;\n}\nexport function parseListBucket(xml) {\n  let result = [];\n  const listBucketResultParser = new XMLParser({\n    parseTagValue: true,\n    // Enable parsing of values\n    numberParseOptions: {\n      leadingZeros: false,\n      // Disable number parsing for values with leading zeros\n      hex: false,\n      // Disable hex number parsing - Invalid bucket name\n      skipLike: /^[0-9]+$/ // Skip number parsing if the value consists entirely of digits\n    },\n\n    tagValueProcessor: (tagName, tagValue = '') => {\n      // Ensure that the Name tag is always treated as a string\n      if (tagName === 'Name') {\n        return tagValue.toString();\n      }\n      return tagValue;\n    },\n    ignoreAttributes: false // Ensure that all attributes are parsed\n  });\n\n  const parsedXmlRes = listBucketResultParser.parse(xml);\n  if (!parsedXmlRes.ListAllMyBucketsResult) {\n    throw new errors.InvalidXMLError('Missing tag: \"ListAllMyBucketsResult\"');\n  }\n  const {\n    ListAllMyBucketsResult: {\n      Buckets = {}\n    } = {}\n  } = parsedXmlRes;\n  if (Buckets.Bucket) {\n    result = toArray(Buckets.Bucket).map((bucket = {}) => {\n      const {\n        Name: bucketName,\n        CreationDate\n      } = bucket;\n      const creationDate = new Date(CreationDate);\n      return {\n        name: bucketName,\n        creationDate\n      };\n    });\n  }\n  return result;\n}\nexport function parseInitiateMultipart(xml) {\n  let xmlobj = parseXml(xml);\n  if (!xmlobj.InitiateMultipartUploadResult) {\n    throw new errors.InvalidXMLError('Missing tag: \"InitiateMultipartUploadResult\"');\n  }\n  xmlobj = xmlobj.InitiateMultipartUploadResult;\n  if (xmlobj.UploadId) {\n    return xmlobj.UploadId;\n  }\n  throw new errors.InvalidXMLError('Missing tag: \"UploadId\"');\n}\nexport function parseReplicationConfig(xml) {\n  const xmlObj = parseXml(xml);\n  const {\n    Role,\n    Rule\n  } = xmlObj.ReplicationConfiguration;\n  return {\n    ReplicationConfiguration: {\n      role: Role,\n      rules: toArray(Rule)\n    }\n  };\n}\nexport function parseObjectLegalHoldConfig(xml) {\n  const xmlObj = parseXml(xml);\n  return xmlObj.LegalHold;\n}\nexport function parseTagging(xml) {\n  const xmlObj = parseXml(xml);\n  let result = [];\n  if (xmlObj.Tagging && xmlObj.Tagging.TagSet && xmlObj.Tagging.TagSet.Tag) {\n    const tagResult = xmlObj.Tagging.TagSet.Tag;\n    // if it is a single tag convert into an array so that the return value is always an array.\n    if (isObject(tagResult)) {\n      result.push(tagResult);\n    } else {\n      result = tagResult;\n    }\n  }\n  return result;\n}\n\n// parse XML response when a multipart upload is completed\nexport function parseCompleteMultipart(xml) {\n  const xmlobj = parseXml(xml).CompleteMultipartUploadResult;\n  if (xmlobj.Location) {\n    const location = toArray(xmlobj.Location)[0];\n    const bucket = toArray(xmlobj.Bucket)[0];\n    const key = xmlobj.Key;\n    const etag = xmlobj.ETag.replace(/^\"/g, '').replace(/\"$/g, '').replace(/^&quot;/g, '').replace(/&quot;$/g, '').replace(/^&#34;/g, '').replace(/&#34;$/g, '');\n    return {\n      location,\n      bucket,\n      key,\n      etag\n    };\n  }\n  // Complete Multipart can return XML Error after a 200 OK response\n  if (xmlobj.Code && xmlobj.Message) {\n    const errCode = toArray(xmlobj.Code)[0];\n    const errMessage = toArray(xmlobj.Message)[0];\n    return {\n      errCode,\n      errMessage\n    };\n  }\n}\n// parse XML response for listing in-progress multipart uploads\nexport function parseListMultipart(xml) {\n  const result = {\n    prefixes: [],\n    uploads: [],\n    isTruncated: false,\n    nextKeyMarker: '',\n    nextUploadIdMarker: ''\n  };\n  let xmlobj = parseXml(xml);\n  if (!xmlobj.ListMultipartUploadsResult) {\n    throw new errors.InvalidXMLError('Missing tag: \"ListMultipartUploadsResult\"');\n  }\n  xmlobj = xmlobj.ListMultipartUploadsResult;\n  if (xmlobj.IsTruncated) {\n    result.isTruncated = xmlobj.IsTruncated;\n  }\n  if (xmlobj.NextKeyMarker) {\n    result.nextKeyMarker = xmlobj.NextKeyMarker;\n  }\n  if (xmlobj.NextUploadIdMarker) {\n    result.nextUploadIdMarker = xmlobj.nextUploadIdMarker || '';\n  }\n  if (xmlobj.CommonPrefixes) {\n    toArray(xmlobj.CommonPrefixes).forEach(prefix => {\n      // @ts-expect-error index check\n      result.prefixes.push({\n        prefix: sanitizeObjectKey(toArray(prefix.Prefix)[0])\n      });\n    });\n  }\n  if (xmlobj.Upload) {\n    toArray(xmlobj.Upload).forEach(upload => {\n      const uploadItem = {\n        key: upload.Key,\n        uploadId: upload.UploadId,\n        storageClass: upload.StorageClass,\n        initiated: new Date(upload.Initiated)\n      };\n      if (upload.Initiator) {\n        uploadItem.initiator = {\n          id: upload.Initiator.ID,\n          displayName: upload.Initiator.DisplayName\n        };\n      }\n      if (upload.Owner) {\n        uploadItem.owner = {\n          id: upload.Owner.ID,\n          displayName: upload.Owner.DisplayName\n        };\n      }\n      result.uploads.push(uploadItem);\n    });\n  }\n  return result;\n}\nexport function parseObjectLockConfig(xml) {\n  const xmlObj = parseXml(xml);\n  let lockConfigResult = {};\n  if (xmlObj.ObjectLockConfiguration) {\n    lockConfigResult = {\n      objectLockEnabled: xmlObj.ObjectLockConfiguration.ObjectLockEnabled\n    };\n    let retentionResp;\n    if (xmlObj.ObjectLockConfiguration && xmlObj.ObjectLockConfiguration.Rule && xmlObj.ObjectLockConfiguration.Rule.DefaultRetention) {\n      retentionResp = xmlObj.ObjectLockConfiguration.Rule.DefaultRetention || {};\n      lockConfigResult.mode = retentionResp.Mode;\n    }\n    if (retentionResp) {\n      const isUnitYears = retentionResp.Years;\n      if (isUnitYears) {\n        lockConfigResult.validity = isUnitYears;\n        lockConfigResult.unit = RETENTION_VALIDITY_UNITS.YEARS;\n      } else {\n        lockConfigResult.validity = retentionResp.Days;\n        lockConfigResult.unit = RETENTION_VALIDITY_UNITS.DAYS;\n      }\n    }\n  }\n  return lockConfigResult;\n}\nexport function parseBucketVersioningConfig(xml) {\n  const xmlObj = parseXml(xml);\n  return xmlObj.VersioningConfiguration;\n}\n\n// Used only in selectObjectContent API.\n// extractHeaderType extracts the first half of the header message, the header type.\nfunction extractHeaderType(stream) {\n  const headerNameLen = Buffer.from(stream.read(1)).readUInt8();\n  const headerNameWithSeparator = Buffer.from(stream.read(headerNameLen)).toString();\n  const splitBySeparator = (headerNameWithSeparator || '').split(':');\n  return splitBySeparator.length >= 1 ? splitBySeparator[1] : '';\n}\nfunction extractHeaderValue(stream) {\n  const bodyLen = Buffer.from(stream.read(2)).readUInt16BE();\n  return Buffer.from(stream.read(bodyLen)).toString();\n}\nexport function parseSelectObjectContentResponse(res) {\n  const selectResults = new SelectResults({}); // will be returned\n\n  const responseStream = readableStream(res); // convert byte array to a readable responseStream\n  // @ts-ignore\n  while (responseStream._readableState.length) {\n    // Top level responseStream read tracker.\n    let msgCrcAccumulator; // accumulate from start of the message till the message crc start.\n\n    const totalByteLengthBuffer = Buffer.from(responseStream.read(4));\n    msgCrcAccumulator = crc32(totalByteLengthBuffer);\n    const headerBytesBuffer = Buffer.from(responseStream.read(4));\n    msgCrcAccumulator = crc32(headerBytesBuffer, msgCrcAccumulator);\n    const calculatedPreludeCrc = msgCrcAccumulator.readInt32BE(); // use it to check if any CRC mismatch in header itself.\n\n    const preludeCrcBuffer = Buffer.from(responseStream.read(4)); // read 4 bytes    i.e 4+4 =8 + 4 = 12 ( prelude + prelude crc)\n    msgCrcAccumulator = crc32(preludeCrcBuffer, msgCrcAccumulator);\n    const totalMsgLength = totalByteLengthBuffer.readInt32BE();\n    const headerLength = headerBytesBuffer.readInt32BE();\n    const preludeCrcByteValue = preludeCrcBuffer.readInt32BE();\n    if (preludeCrcByteValue !== calculatedPreludeCrc) {\n      // Handle Header CRC mismatch Error\n      throw new Error(`Header Checksum Mismatch, Prelude CRC of ${preludeCrcByteValue} does not equal expected CRC of ${calculatedPreludeCrc}`);\n    }\n    const headers = {};\n    if (headerLength > 0) {\n      const headerBytes = Buffer.from(responseStream.read(headerLength));\n      msgCrcAccumulator = crc32(headerBytes, msgCrcAccumulator);\n      const headerReaderStream = readableStream(headerBytes);\n      // @ts-ignore\n      while (headerReaderStream._readableState.length) {\n        const headerTypeName = extractHeaderType(headerReaderStream);\n        headerReaderStream.read(1); // just read and ignore it.\n        if (headerTypeName) {\n          headers[headerTypeName] = extractHeaderValue(headerReaderStream);\n        }\n      }\n    }\n    let payloadStream;\n    const payLoadLength = totalMsgLength - headerLength - 16;\n    if (payLoadLength > 0) {\n      const payLoadBuffer = Buffer.from(responseStream.read(payLoadLength));\n      msgCrcAccumulator = crc32(payLoadBuffer, msgCrcAccumulator);\n      // read the checksum early and detect any mismatch so we can avoid unnecessary further processing.\n      const messageCrcByteValue = Buffer.from(responseStream.read(4)).readInt32BE();\n      const calculatedCrc = msgCrcAccumulator.readInt32BE();\n      // Handle message CRC Error\n      if (messageCrcByteValue !== calculatedCrc) {\n        throw new Error(`Message Checksum Mismatch, Message CRC of ${messageCrcByteValue} does not equal expected CRC of ${calculatedCrc}`);\n      }\n      payloadStream = readableStream(payLoadBuffer);\n    }\n    const messageType = headers['message-type'];\n    switch (messageType) {\n      case 'error':\n        {\n          const errorMessage = headers['error-code'] + ':\"' + headers['error-message'] + '\"';\n          throw new Error(errorMessage);\n        }\n      case 'event':\n        {\n          const contentType = headers['content-type'];\n          const eventType = headers['event-type'];\n          switch (eventType) {\n            case 'End':\n              {\n                selectResults.setResponse(res);\n                return selectResults;\n              }\n            case 'Records':\n              {\n                var _payloadStream;\n                const readData = (_payloadStream = payloadStream) === null || _payloadStream === void 0 ? void 0 : _payloadStream.read(payLoadLength);\n                selectResults.setRecords(readData);\n                break;\n              }\n            case 'Progress':\n              {\n                switch (contentType) {\n                  case 'text/xml':\n                    {\n                      var _payloadStream2;\n                      const progressData = (_payloadStream2 = payloadStream) === null || _payloadStream2 === void 0 ? void 0 : _payloadStream2.read(payLoadLength);\n                      selectResults.setProgress(progressData.toString());\n                      break;\n                    }\n                  default:\n                    {\n                      const errorMessage = `Unexpected content-type ${contentType} sent for event-type Progress`;\n                      throw new Error(errorMessage);\n                    }\n                }\n              }\n              break;\n            case 'Stats':\n              {\n                switch (contentType) {\n                  case 'text/xml':\n                    {\n                      var _payloadStream3;\n                      const statsData = (_payloadStream3 = payloadStream) === null || _payloadStream3 === void 0 ? void 0 : _payloadStream3.read(payLoadLength);\n                      selectResults.setStats(statsData.toString());\n                      break;\n                    }\n                  default:\n                    {\n                      const errorMessage = `Unexpected content-type ${contentType} sent for event-type Stats`;\n                      throw new Error(errorMessage);\n                    }\n                }\n              }\n              break;\n            default:\n              {\n                // Continuation message: Not sure if it is supported. did not find a reference or any message in response.\n                // It does not have a payload.\n                const warningMessage = `Un implemented event detected  ${messageType}.`;\n                // eslint-disable-next-line no-console\n                console.warn(warningMessage);\n              }\n          }\n        }\n    }\n  }\n}\nexport function parseLifecycleConfig(xml) {\n  const xmlObj = parseXml(xml);\n  return xmlObj.LifecycleConfiguration;\n}\nexport function parseBucketEncryptionConfig(xml) {\n  return parseXml(xml);\n}\nexport function parseObjectRetentionConfig(xml) {\n  const xmlObj = parseXml(xml);\n  const retentionConfig = xmlObj.Retention;\n  return {\n    mode: retentionConfig.Mode,\n    retainUntilDate: retentionConfig.RetainUntilDate\n  };\n}\nexport function removeObjectsParser(xml) {\n  const xmlObj = parseXml(xml);\n  if (xmlObj.DeleteResult && xmlObj.DeleteResult.Error) {\n    // return errors as array always. as the response is object in case of single object passed in removeObjects\n    return toArray(xmlObj.DeleteResult.Error);\n  }\n  return [];\n}\n\n// parse XML response for copy object\nexport function parseCopyObject(xml) {\n  const result = {\n    etag: '',\n    lastModified: ''\n  };\n  let xmlobj = parseXml(xml);\n  if (!xmlobj.CopyObjectResult) {\n    throw new errors.InvalidXMLError('Missing tag: \"CopyObjectResult\"');\n  }\n  xmlobj = xmlobj.CopyObjectResult;\n  if (xmlobj.ETag) {\n    result.etag = xmlobj.ETag.replace(/^\"/g, '').replace(/\"$/g, '').replace(/^&quot;/g, '').replace(/&quot;$/g, '').replace(/^&#34;/g, '').replace(/&#34;$/g, '');\n  }\n  if (xmlobj.LastModified) {\n    result.lastModified = new Date(xmlobj.LastModified);\n  }\n  return result;\n}\nconst formatObjInfo = (content, opts = {}) => {\n  const {\n    Key,\n    LastModified,\n    ETag,\n    Size,\n    VersionId,\n    IsLatest\n  } = content;\n  if (!isObject(opts)) {\n    opts = {};\n  }\n  const name = sanitizeObjectKey(toArray(Key)[0] || '');\n  const lastModified = LastModified ? new Date(toArray(LastModified)[0] || '') : undefined;\n  const etag = sanitizeETag(toArray(ETag)[0] || '');\n  const size = sanitizeSize(Size || '');\n  return {\n    name,\n    lastModified,\n    etag,\n    size,\n    versionId: VersionId,\n    isLatest: IsLatest,\n    isDeleteMarker: opts.IsDeleteMarker ? opts.IsDeleteMarker : false\n  };\n};\n\n// parse XML response for list objects in a bucket\nexport function parseListObjects(xml) {\n  const result = {\n    objects: [],\n    isTruncated: false,\n    nextMarker: undefined,\n    versionIdMarker: undefined\n  };\n  let isTruncated = false;\n  let nextMarker, nextVersionKeyMarker;\n  const xmlobj = fxpWithoutNumParser.parse(xml);\n  const parseCommonPrefixesEntity = commonPrefixEntry => {\n    if (commonPrefixEntry) {\n      toArray(commonPrefixEntry).forEach(commonPrefix => {\n        result.objects.push({\n          prefix: sanitizeObjectKey(toArray(commonPrefix.Prefix)[0] || ''),\n          size: 0\n        });\n      });\n    }\n  };\n  const listBucketResult = xmlobj.ListBucketResult;\n  const listVersionsResult = xmlobj.ListVersionsResult;\n  if (listBucketResult) {\n    if (listBucketResult.IsTruncated) {\n      isTruncated = listBucketResult.IsTruncated;\n    }\n    if (listBucketResult.Contents) {\n      toArray(listBucketResult.Contents).forEach(content => {\n        const name = sanitizeObjectKey(toArray(content.Key)[0] || '');\n        const lastModified = new Date(toArray(content.LastModified)[0] || '');\n        const etag = sanitizeETag(toArray(content.ETag)[0] || '');\n        const size = sanitizeSize(content.Size || '');\n        result.objects.push({\n          name,\n          lastModified,\n          etag,\n          size\n        });\n      });\n    }\n    if (listBucketResult.Marker) {\n      nextMarker = listBucketResult.Marker;\n    } else if (isTruncated && result.objects.length > 0) {\n      var _result$objects;\n      nextMarker = (_result$objects = result.objects[result.objects.length - 1]) === null || _result$objects === void 0 ? void 0 : _result$objects.name;\n    }\n    if (listBucketResult.CommonPrefixes) {\n      parseCommonPrefixesEntity(listBucketResult.CommonPrefixes);\n    }\n  }\n  if (listVersionsResult) {\n    if (listVersionsResult.IsTruncated) {\n      isTruncated = listVersionsResult.IsTruncated;\n    }\n    if (listVersionsResult.Version) {\n      toArray(listVersionsResult.Version).forEach(content => {\n        result.objects.push(formatObjInfo(content));\n      });\n    }\n    if (listVersionsResult.DeleteMarker) {\n      toArray(listVersionsResult.DeleteMarker).forEach(content => {\n        result.objects.push(formatObjInfo(content, {\n          IsDeleteMarker: true\n        }));\n      });\n    }\n    if (listVersionsResult.NextKeyMarker) {\n      nextVersionKeyMarker = listVersionsResult.NextKeyMarker;\n    }\n    if (listVersionsResult.NextVersionIdMarker) {\n      result.versionIdMarker = listVersionsResult.NextVersionIdMarker;\n    }\n    if (listVersionsResult.CommonPrefixes) {\n      parseCommonPrefixesEntity(listVersionsResult.CommonPrefixes);\n    }\n  }\n  result.isTruncated = isTruncated;\n  if (isTruncated) {\n    result.nextMarker = nextVersionKeyMarker || nextMarker;\n  }\n  return result;\n}\nexport function uploadPartParser(xml) {\n  const xmlObj = parseXml(xml);\n  const respEl = xmlObj.CopyPartResult;\n  return respEl;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1984, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/internal/extensions.mjs"],"sourcesContent":["/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as stream from \"stream\";\nimport * as errors from \"../errors.mjs\";\nimport { isBoolean, isString, isValidBucketName, isValidPrefix, uriEscape } from \"./helper.mjs\";\nimport { readAsString } from \"./response.mjs\";\nimport { parseListObjectsV2WithMetadata } from \"./xml-parser.mjs\";\nexport class Extensions {\n  constructor(client) {\n    this.client = client;\n  }\n\n  /**\n   * List the objects in the bucket using S3 ListObjects V2 With Metadata\n   *\n   * @param bucketName - name of the bucket\n   * @param prefix - the prefix of the objects that should be listed (optional, default `''`)\n   * @param recursive - `true` indicates recursive style listing and `false` indicates directory style listing delimited by '/'. (optional, default `false`)\n   * @param startAfter - Specifies the key to start after when listing objects in a bucket. (optional, default `''`)\n   * @returns stream emitting the objects in the bucket, the object is of the format:\n   */\n  listObjectsV2WithMetadata(bucketName, prefix, recursive, startAfter) {\n    if (prefix === undefined) {\n      prefix = '';\n    }\n    if (recursive === undefined) {\n      recursive = false;\n    }\n    if (startAfter === undefined) {\n      startAfter = '';\n    }\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidPrefix(prefix)) {\n      throw new errors.InvalidPrefixError(`Invalid prefix : ${prefix}`);\n    }\n    if (!isString(prefix)) {\n      throw new TypeError('prefix should be of type \"string\"');\n    }\n    if (!isBoolean(recursive)) {\n      throw new TypeError('recursive should be of type \"boolean\"');\n    }\n    if (!isString(startAfter)) {\n      throw new TypeError('startAfter should be of type \"string\"');\n    }\n\n    // if recursive is false set delimiter to '/'\n    const delimiter = recursive ? '' : '/';\n    return stream.Readable.from(this.listObjectsV2WithMetadataGen(bucketName, prefix, delimiter, startAfter), {\n      objectMode: true\n    });\n  }\n  async *listObjectsV2WithMetadataGen(bucketName, prefix, delimiter, startAfter) {\n    let ended = false;\n    let continuationToken = '';\n    do {\n      const result = await this.listObjectsV2WithMetadataQuery(bucketName, prefix, continuationToken, delimiter, startAfter);\n      ended = !result.isTruncated;\n      continuationToken = result.nextContinuationToken;\n      for (const obj of result.objects) {\n        yield obj;\n      }\n    } while (!ended);\n  }\n  async listObjectsV2WithMetadataQuery(bucketName, prefix, continuationToken, delimiter, startAfter) {\n    const queries = [];\n\n    // Call for listing objects v2 API\n    queries.push(`list-type=2`);\n    queries.push(`encoding-type=url`);\n    // escape every value in query string, except maxKeys\n    queries.push(`prefix=${uriEscape(prefix)}`);\n    queries.push(`delimiter=${uriEscape(delimiter)}`);\n    queries.push(`metadata=true`);\n    if (continuationToken) {\n      continuationToken = uriEscape(continuationToken);\n      queries.push(`continuation-token=${continuationToken}`);\n    }\n    // Set start-after\n    if (startAfter) {\n      startAfter = uriEscape(startAfter);\n      queries.push(`start-after=${startAfter}`);\n    }\n    queries.push(`max-keys=1000`);\n    queries.sort();\n    let query = '';\n    if (queries.length > 0) {\n      query = `${queries.join('&')}`;\n    }\n    const method = 'GET';\n    const res = await this.client.makeRequestAsync({\n      method,\n      bucketName,\n      query\n    });\n    return parseListObjectsV2WithMetadata(await readAsString(res));\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2105, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/internal/join-host-port.mjs"],"sourcesContent":["/**\n * joinHostPort combines host and port into a network address of the\n * form \"host:port\". If host contains a colon, as found in literal\n * IPv6 addresses, then JoinHostPort returns \"[host]:port\".\n *\n * @param host\n * @param port\n * @returns Cleaned up host\n * @internal\n */\nexport function joinHostPort(host, port) {\n  if (port === undefined) {\n    return host;\n  }\n\n  // We assume that host is a literal IPv6 address if host has\n  // colons.\n  if (host.includes(':')) {\n    return `[${host}]:${port.toString()}`;\n  }\n  return `${host}:${port.toString()}`;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqb2luSG9zdFBvcnQiLCJob3N0IiwicG9ydCIsInVuZGVmaW5lZCIsImluY2x1ZGVzIiwidG9TdHJpbmciXSwic291cmNlcyI6WyJqb2luLWhvc3QtcG9ydC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGpvaW5Ib3N0UG9ydCBjb21iaW5lcyBob3N0IGFuZCBwb3J0IGludG8gYSBuZXR3b3JrIGFkZHJlc3Mgb2YgdGhlXG4gKiBmb3JtIFwiaG9zdDpwb3J0XCIuIElmIGhvc3QgY29udGFpbnMgYSBjb2xvbiwgYXMgZm91bmQgaW4gbGl0ZXJhbFxuICogSVB2NiBhZGRyZXNzZXMsIHRoZW4gSm9pbkhvc3RQb3J0IHJldHVybnMgXCJbaG9zdF06cG9ydFwiLlxuICpcbiAqIEBwYXJhbSBob3N0XG4gKiBAcGFyYW0gcG9ydFxuICogQHJldHVybnMgQ2xlYW5lZCB1cCBob3N0XG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGpvaW5Ib3N0UG9ydChob3N0OiBzdHJpbmcsIHBvcnQ/OiBudW1iZXIpOiBzdHJpbmcge1xuICBpZiAocG9ydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGhvc3RcbiAgfVxuXG4gIC8vIFdlIGFzc3VtZSB0aGF0IGhvc3QgaXMgYSBsaXRlcmFsIElQdjYgYWRkcmVzcyBpZiBob3N0IGhhc1xuICAvLyBjb2xvbnMuXG4gIGlmIChob3N0LmluY2x1ZGVzKCc6JykpIHtcbiAgICByZXR1cm4gYFske2hvc3R9XToke3BvcnQudG9TdHJpbmcoKX1gXG4gIH1cblxuICByZXR1cm4gYCR7aG9zdH06JHtwb3J0LnRvU3RyaW5nKCl9YFxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sU0FBU0EsWUFBWUEsQ0FBQ0MsSUFBWSxFQUFFQyxJQUFhLEVBQVU7RUFDaEUsSUFBSUEsSUFBSSxLQUFLQyxTQUFTLEVBQUU7SUFDdEIsT0FBT0YsSUFBSTtFQUNiOztFQUVBO0VBQ0E7RUFDQSxJQUFJQSxJQUFJLENBQUNHLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtJQUN0QixPQUFRLElBQUdILElBQUssS0FBSUMsSUFBSSxDQUFDRyxRQUFRLENBQUMsQ0FBRSxFQUFDO0VBQ3ZDO0VBRUEsT0FBUSxHQUFFSixJQUFLLElBQUdDLElBQUksQ0FBQ0csUUFBUSxDQUFDLENBQUUsRUFBQztBQUNyQyJ9"],"names":[],"mappings":"AAAA;;;;;;;;;CASC;;;AACM,SAAS,aAAa,IAAI,EAAE,IAAI;IACrC,IAAI,SAAS,WAAW;QACtB,OAAO;IACT;IAEA,4DAA4D;IAC5D,UAAU;IACV,IAAI,KAAK,QAAQ,CAAC,MAAM;QACtB,OAAO,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,KAAK,QAAQ,IAAI;IACvC;IACA,OAAO,GAAG,KAAK,CAAC,EAAE,KAAK,QAAQ,IAAI;AACrC,EACA,ogDAAogD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2134, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/internal/post-policy.mjs"],"sourcesContent":["// Build PostPolicy object that can be signed by presignedPostPolicy\nimport * as errors from \"../errors.mjs\";\nimport { isObject, isValidBucketName, isValidObjectName, isValidPrefix } from \"./helper.mjs\";\nexport class PostPolicy {\n  policy = {\n    conditions: []\n  };\n  formData = {};\n\n  // set expiration date\n  setExpires(date) {\n    if (!date) {\n      throw new errors.InvalidDateError('Invalid date: cannot be null');\n    }\n    this.policy.expiration = date.toISOString();\n  }\n\n  // set object name\n  setKey(objectName) {\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name : ${objectName}`);\n    }\n    this.policy.conditions.push(['eq', '$key', objectName]);\n    this.formData.key = objectName;\n  }\n\n  // set object name prefix, i.e policy allows any keys with this prefix\n  setKeyStartsWith(prefix) {\n    if (!isValidPrefix(prefix)) {\n      throw new errors.InvalidPrefixError(`Invalid prefix : ${prefix}`);\n    }\n    this.policy.conditions.push(['starts-with', '$key', prefix]);\n    this.formData.key = prefix;\n  }\n\n  // set bucket name\n  setBucket(bucketName) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError(`Invalid bucket name : ${bucketName}`);\n    }\n    this.policy.conditions.push(['eq', '$bucket', bucketName]);\n    this.formData.bucket = bucketName;\n  }\n\n  // set Content-Type\n  setContentType(type) {\n    if (!type) {\n      throw new Error('content-type cannot be null');\n    }\n    this.policy.conditions.push(['eq', '$Content-Type', type]);\n    this.formData['Content-Type'] = type;\n  }\n\n  // set Content-Type prefix, i.e image/ allows any image\n  setContentTypeStartsWith(prefix) {\n    if (!prefix) {\n      throw new Error('content-type cannot be null');\n    }\n    this.policy.conditions.push(['starts-with', '$Content-Type', prefix]);\n    this.formData['Content-Type'] = prefix;\n  }\n\n  // set Content-Disposition\n  setContentDisposition(value) {\n    if (!value) {\n      throw new Error('content-disposition cannot be null');\n    }\n    this.policy.conditions.push(['eq', '$Content-Disposition', value]);\n    this.formData['Content-Disposition'] = value;\n  }\n\n  // set minimum/maximum length of what Content-Length can be.\n  setContentLengthRange(min, max) {\n    if (min > max) {\n      throw new Error('min cannot be more than max');\n    }\n    if (min < 0) {\n      throw new Error('min should be > 0');\n    }\n    if (max < 0) {\n      throw new Error('max should be > 0');\n    }\n    this.policy.conditions.push(['content-length-range', min, max]);\n  }\n\n  // set user defined metadata\n  setUserMetaData(metaData) {\n    if (!isObject(metaData)) {\n      throw new TypeError('metadata should be of type \"object\"');\n    }\n    Object.entries(metaData).forEach(([key, value]) => {\n      const amzMetaDataKey = `x-amz-meta-${key}`;\n      this.policy.conditions.push(['eq', `$${amzMetaDataKey}`, value]);\n      this.formData[amzMetaDataKey] = value.toString();\n    });\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"AAAA,oEAAoE;;;;AACpE;AACA;;;AACO,MAAM;IACX,SAAS;QACP,YAAY,EAAE;IAChB,EAAE;IACF,WAAW,CAAC,EAAE;IAEd,sBAAsB;IACtB,WAAW,IAAI,EAAE;QACf,IAAI,CAAC,MAAM;YACT,MAAM,IAAI,iJAAA,CAAA,mBAAuB,CAAC;QACpC;QACA,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,KAAK,WAAW;IAC3C;IAEA,kBAAkB;IAClB,OAAO,UAAU,EAAE;QACjB,IAAI,CAAC,CAAA,GAAA,6JAAA,CAAA,oBAAiB,AAAD,EAAE,aAAa;YAClC,MAAM,IAAI,iJAAA,CAAA,yBAA6B,CAAC,CAAC,sBAAsB,EAAE,YAAY;QAC/E;QACA,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;YAAC;YAAM;YAAQ;SAAW;QACtD,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG;IACtB;IAEA,sEAAsE;IACtE,iBAAiB,MAAM,EAAE;QACvB,IAAI,CAAC,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAAE,SAAS;YAC1B,MAAM,IAAI,iJAAA,CAAA,qBAAyB,CAAC,CAAC,iBAAiB,EAAE,QAAQ;QAClE;QACA,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAO;QAC3D,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG;IACtB;IAEA,kBAAkB;IAClB,UAAU,UAAU,EAAE;QACpB,IAAI,CAAC,CAAA,GAAA,6JAAA,CAAA,oBAAiB,AAAD,EAAE,aAAa;YAClC,MAAM,IAAI,iJAAA,CAAA,yBAA6B,CAAC,CAAC,sBAAsB,EAAE,YAAY;QAC/E;QACA,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;YAAC;YAAM;YAAW;SAAW;QACzD,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG;IACzB;IAEA,mBAAmB;IACnB,eAAe,IAAI,EAAE;QACnB,IAAI,CAAC,MAAM;YACT,MAAM,IAAI,MAAM;QAClB;QACA,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;YAAC;YAAM;YAAiB;SAAK;QACzD,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG;IAClC;IAEA,uDAAuD;IACvD,yBAAyB,MAAM,EAAE;QAC/B,IAAI,CAAC,QAAQ;YACX,MAAM,IAAI,MAAM;QAClB;QACA,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;YAAC;YAAe;YAAiB;SAAO;QACpE,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG;IAClC;IAEA,0BAA0B;IAC1B,sBAAsB,KAAK,EAAE;QAC3B,IAAI,CAAC,OAAO;YACV,MAAM,IAAI,MAAM;QAClB;QACA,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;YAAC;YAAM;YAAwB;SAAM;QACjE,IAAI,CAAC,QAAQ,CAAC,sBAAsB,GAAG;IACzC;IAEA,4DAA4D;IAC5D,sBAAsB,GAAG,EAAE,GAAG,EAAE;QAC9B,IAAI,MAAM,KAAK;YACb,MAAM,IAAI,MAAM;QAClB;QACA,IAAI,MAAM,GAAG;YACX,MAAM,IAAI,MAAM;QAClB;QACA,IAAI,MAAM,GAAG;YACX,MAAM,IAAI,MAAM;QAClB;QACA,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;YAAC;YAAwB;YAAK;SAAI;IAChE;IAEA,4BAA4B;IAC5B,gBAAgB,QAAQ,EAAE;QACxB,IAAI,CAAC,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,WAAW;YACvB,MAAM,IAAI,UAAU;QACtB;QACA,OAAO,OAAO,CAAC,UAAU,OAAO,CAAC,CAAC,CAAC,KAAK,MAAM;YAC5C,MAAM,iBAAiB,CAAC,WAAW,EAAE,KAAK;YAC1C,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;gBAAC;gBAAM,CAAC,CAAC,EAAE,gBAAgB;gBAAE;aAAM;YAC/D,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG,MAAM,QAAQ;QAChD;IACF;AACF,EACA,w6RAAw6R","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2265, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/internal/request.mjs"],"sourcesContent":["import { pipeline } from \"stream\";\nimport { promisify } from \"util\";\nconst pipelineAsync = promisify(pipeline);\nexport async function request(transport, opt, body = null) {\n  return new Promise((resolve, reject) => {\n    const requestObj = transport.request(opt, response => {\n      resolve(response);\n    });\n    requestObj.on('error', reject);\n    if (!body || Buffer.isBuffer(body) || typeof body === 'string') {\n      requestObj.end(body);\n    } else {\n      pipelineAsync(body, requestObj).catch(reject);\n    }\n  });\n}\nconst MAX_RETRIES = 10;\nconst EXP_BACK_OFF_BASE_DELAY = 1000; // Base delay for exponential backoff\nconst ADDITIONAL_DELAY_FACTOR = 1.0; // to avoid synchronized retries\n\n// Retryable error codes for HTTP ( ref: minio-go)\nexport const retryHttpCodes = {\n  408: true,\n  429: true,\n  499: true,\n  500: true,\n  502: true,\n  503: true,\n  504: true,\n  520: true\n};\nconst isHttpRetryable = httpResCode => {\n  return retryHttpCodes[httpResCode] !== undefined;\n};\nconst sleep = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\nconst getExpBackOffDelay = retryCount => {\n  const backOffBy = EXP_BACK_OFF_BASE_DELAY * 2 ** retryCount;\n  const additionalDelay = Math.random() * backOffBy * ADDITIONAL_DELAY_FACTOR;\n  return backOffBy + additionalDelay;\n};\nexport async function requestWithRetry(transport, opt, body = null, maxRetries = MAX_RETRIES) {\n  let attempt = 0;\n  let isRetryable = false;\n  while (attempt <= maxRetries) {\n    try {\n      const response = await request(transport, opt, body);\n      // Check if the HTTP status code is retryable\n      if (isHttpRetryable(response.statusCode)) {\n        isRetryable = true;\n        throw new Error(`Retryable HTTP status: ${response.statusCode}`); // trigger retry attempt with calculated delay\n      }\n\n      return response; // Success, return the raw response\n    } catch (err) {\n      if (isRetryable) {\n        attempt++;\n        isRetryable = false;\n        if (attempt > maxRetries) {\n          throw new Error(`Request failed after ${maxRetries} retries: ${err}`);\n        }\n        const delay = getExpBackOffDelay(attempt);\n        // eslint-disable-next-line no-console\n        console.warn(`${new Date().toLocaleString()} Retrying request (attempt ${attempt}/${maxRetries}) after ${delay}ms due to: ${err}`);\n        await sleep(delay);\n      } else {\n        throw err; // re-throw if any request, syntax errors\n      }\n    }\n  }\n\n  throw new Error(`${MAX_RETRIES} Retries exhausted, request failed.`);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":";;;;;AAAA;AACA;;;AACA,MAAM,gBAAgB,CAAA,GAAA,iGAAA,CAAA,YAAS,AAAD,EAAE,qGAAA,CAAA,WAAQ;AACjC,eAAe,QAAQ,SAAS,EAAE,GAAG,EAAE,OAAO,IAAI;IACvD,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,MAAM,aAAa,UAAU,OAAO,CAAC,KAAK,CAAA;YACxC,QAAQ;QACV;QACA,WAAW,EAAE,CAAC,SAAS;QACvB,IAAI,CAAC,QAAQ,OAAO,QAAQ,CAAC,SAAS,OAAO,SAAS,UAAU;YAC9D,WAAW,GAAG,CAAC;QACjB,OAAO;YACL,cAAc,MAAM,YAAY,KAAK,CAAC;QACxC;IACF;AACF;AACA,MAAM,cAAc;AACpB,MAAM,0BAA0B,MAAM,qCAAqC;AAC3E,MAAM,0BAA0B,KAAK,gCAAgC;AAG9D,MAAM,iBAAiB;IAC5B,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;AACP;AACA,MAAM,kBAAkB,CAAA;IACtB,OAAO,cAAc,CAAC,YAAY,KAAK;AACzC;AACA,MAAM,QAAQ,CAAA;IACZ,OAAO,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;AACpD;AACA,MAAM,qBAAqB,CAAA;IACzB,MAAM,YAAY,0BAA0B,KAAK;IACjD,MAAM,kBAAkB,KAAK,MAAM,KAAK,YAAY;IACpD,OAAO,YAAY;AACrB;AACO,eAAe,iBAAiB,SAAS,EAAE,GAAG,EAAE,OAAO,IAAI,EAAE,aAAa,WAAW;IAC1F,IAAI,UAAU;IACd,IAAI,cAAc;IAClB,MAAO,WAAW,WAAY;QAC5B,IAAI;YACF,MAAM,WAAW,MAAM,QAAQ,WAAW,KAAK;YAC/C,6CAA6C;YAC7C,IAAI,gBAAgB,SAAS,UAAU,GAAG;gBACxC,cAAc;gBACd,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,SAAS,UAAU,EAAE,GAAG,8CAA8C;YAClH;YAEA,OAAO,UAAU,mCAAmC;QACtD,EAAE,OAAO,KAAK;YACZ,IAAI,aAAa;gBACf;gBACA,cAAc;gBACd,IAAI,UAAU,YAAY;oBACxB,MAAM,IAAI,MAAM,CAAC,qBAAqB,EAAE,WAAW,UAAU,EAAE,KAAK;gBACtE;gBACA,MAAM,QAAQ,mBAAmB;gBACjC,sCAAsC;gBACtC,QAAQ,IAAI,CAAC,GAAG,IAAI,OAAO,cAAc,GAAG,2BAA2B,EAAE,QAAQ,CAAC,EAAE,WAAW,QAAQ,EAAE,MAAM,WAAW,EAAE,KAAK;gBACjI,MAAM,MAAM;YACd,OAAO;gBACL,MAAM,KAAK,yCAAyC;YACtD;QACF;IACF;IAEA,MAAM,IAAI,MAAM,GAAG,YAAY,mCAAmC,CAAC;AACrE,EACA,g4PAAg4P","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2348, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/internal/s3-endpoints.mjs"],"sourcesContent":["/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2015, 2016 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isString } from \"./helper.mjs\";\n\n// List of currently supported endpoints.\nconst awsS3Endpoint = {\n  'af-south-1': 's3.af-south-1.amazonaws.com',\n  'ap-east-1': 's3.ap-east-1.amazonaws.com',\n  'ap-south-1': 's3.ap-south-1.amazonaws.com',\n  'ap-south-2': 's3.ap-south-2.amazonaws.com',\n  'ap-southeast-1': 's3.ap-southeast-1.amazonaws.com',\n  'ap-southeast-2': 's3.ap-southeast-2.amazonaws.com',\n  'ap-southeast-3': 's3.ap-southeast-3.amazonaws.com',\n  'ap-southeast-4': 's3.ap-southeast-4.amazonaws.com',\n  'ap-southeast-5': 's3.ap-southeast-5.amazonaws.com',\n  'ap-northeast-1': 's3.ap-northeast-1.amazonaws.com',\n  'ap-northeast-2': 's3.ap-northeast-2.amazonaws.com',\n  'ap-northeast-3': 's3.ap-northeast-3.amazonaws.com',\n  'ca-central-1': 's3.ca-central-1.amazonaws.com',\n  'ca-west-1': 's3.ca-west-1.amazonaws.com',\n  'cn-north-1': 's3.cn-north-1.amazonaws.com.cn',\n  'eu-central-1': 's3.eu-central-1.amazonaws.com',\n  'eu-central-2': 's3.eu-central-2.amazonaws.com',\n  'eu-north-1': 's3.eu-north-1.amazonaws.com',\n  'eu-south-1': 's3.eu-south-1.amazonaws.com',\n  'eu-south-2': 's3.eu-south-2.amazonaws.com',\n  'eu-west-1': 's3.eu-west-1.amazonaws.com',\n  'eu-west-2': 's3.eu-west-2.amazonaws.com',\n  'eu-west-3': 's3.eu-west-3.amazonaws.com',\n  'il-central-1': 's3.il-central-1.amazonaws.com',\n  'me-central-1': 's3.me-central-1.amazonaws.com',\n  'me-south-1': 's3.me-south-1.amazonaws.com',\n  'sa-east-1': 's3.sa-east-1.amazonaws.com',\n  'us-east-1': 's3.us-east-1.amazonaws.com',\n  'us-east-2': 's3.us-east-2.amazonaws.com',\n  'us-west-1': 's3.us-west-1.amazonaws.com',\n  'us-west-2': 's3.us-west-2.amazonaws.com',\n  'us-gov-east-1': 's3.us-gov-east-1.amazonaws.com',\n  'us-gov-west-1': 's3.us-gov-west-1.amazonaws.com'\n  // Add new endpoints here.\n};\n\n// getS3Endpoint get relevant endpoint for the region.\nexport function getS3Endpoint(region) {\n  if (!isString(region)) {\n    throw new TypeError(`Invalid region: ${region}`);\n  }\n  const endpoint = awsS3Endpoint[region];\n  if (endpoint) {\n    return endpoint;\n  }\n  return 's3.amazonaws.com';\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc1N0cmluZyIsImF3c1MzRW5kcG9pbnQiLCJnZXRTM0VuZHBvaW50IiwicmVnaW9uIiwiVHlwZUVycm9yIiwiZW5kcG9pbnQiXSwic291cmNlcyI6WyJzMy1lbmRwb2ludHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIE1pbklPIEphdmFzY3JpcHQgTGlicmFyeSBmb3IgQW1hem9uIFMzIENvbXBhdGlibGUgQ2xvdWQgU3RvcmFnZSwgKEMpIDIwMTUsIDIwMTYgTWluSU8sIEluYy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuL2hlbHBlci50cydcblxuLy8gTGlzdCBvZiBjdXJyZW50bHkgc3VwcG9ydGVkIGVuZHBvaW50cy5cbmNvbnN0IGF3c1MzRW5kcG9pbnQgPSB7XG4gICdhZi1zb3V0aC0xJzogJ3MzLmFmLXNvdXRoLTEuYW1hem9uYXdzLmNvbScsXG4gICdhcC1lYXN0LTEnOiAnczMuYXAtZWFzdC0xLmFtYXpvbmF3cy5jb20nLFxuICAnYXAtc291dGgtMSc6ICdzMy5hcC1zb3V0aC0xLmFtYXpvbmF3cy5jb20nLFxuICAnYXAtc291dGgtMic6ICdzMy5hcC1zb3V0aC0yLmFtYXpvbmF3cy5jb20nLFxuICAnYXAtc291dGhlYXN0LTEnOiAnczMuYXAtc291dGhlYXN0LTEuYW1hem9uYXdzLmNvbScsXG4gICdhcC1zb3V0aGVhc3QtMic6ICdzMy5hcC1zb3V0aGVhc3QtMi5hbWF6b25hd3MuY29tJyxcbiAgJ2FwLXNvdXRoZWFzdC0zJzogJ3MzLmFwLXNvdXRoZWFzdC0zLmFtYXpvbmF3cy5jb20nLFxuICAnYXAtc291dGhlYXN0LTQnOiAnczMuYXAtc291dGhlYXN0LTQuYW1hem9uYXdzLmNvbScsXG4gICdhcC1zb3V0aGVhc3QtNSc6ICdzMy5hcC1zb3V0aGVhc3QtNS5hbWF6b25hd3MuY29tJyxcbiAgJ2FwLW5vcnRoZWFzdC0xJzogJ3MzLmFwLW5vcnRoZWFzdC0xLmFtYXpvbmF3cy5jb20nLFxuICAnYXAtbm9ydGhlYXN0LTInOiAnczMuYXAtbm9ydGhlYXN0LTIuYW1hem9uYXdzLmNvbScsXG4gICdhcC1ub3J0aGVhc3QtMyc6ICdzMy5hcC1ub3J0aGVhc3QtMy5hbWF6b25hd3MuY29tJyxcbiAgJ2NhLWNlbnRyYWwtMSc6ICdzMy5jYS1jZW50cmFsLTEuYW1hem9uYXdzLmNvbScsXG4gICdjYS13ZXN0LTEnOiAnczMuY2Etd2VzdC0xLmFtYXpvbmF3cy5jb20nLFxuICAnY24tbm9ydGgtMSc6ICdzMy5jbi1ub3J0aC0xLmFtYXpvbmF3cy5jb20uY24nLFxuICAnZXUtY2VudHJhbC0xJzogJ3MzLmV1LWNlbnRyYWwtMS5hbWF6b25hd3MuY29tJyxcbiAgJ2V1LWNlbnRyYWwtMic6ICdzMy5ldS1jZW50cmFsLTIuYW1hem9uYXdzLmNvbScsXG4gICdldS1ub3J0aC0xJzogJ3MzLmV1LW5vcnRoLTEuYW1hem9uYXdzLmNvbScsXG4gICdldS1zb3V0aC0xJzogJ3MzLmV1LXNvdXRoLTEuYW1hem9uYXdzLmNvbScsXG4gICdldS1zb3V0aC0yJzogJ3MzLmV1LXNvdXRoLTIuYW1hem9uYXdzLmNvbScsXG4gICdldS13ZXN0LTEnOiAnczMuZXUtd2VzdC0xLmFtYXpvbmF3cy5jb20nLFxuICAnZXUtd2VzdC0yJzogJ3MzLmV1LXdlc3QtMi5hbWF6b25hd3MuY29tJyxcbiAgJ2V1LXdlc3QtMyc6ICdzMy5ldS13ZXN0LTMuYW1hem9uYXdzLmNvbScsXG4gICdpbC1jZW50cmFsLTEnOiAnczMuaWwtY2VudHJhbC0xLmFtYXpvbmF3cy5jb20nLFxuICAnbWUtY2VudHJhbC0xJzogJ3MzLm1lLWNlbnRyYWwtMS5hbWF6b25hd3MuY29tJyxcbiAgJ21lLXNvdXRoLTEnOiAnczMubWUtc291dGgtMS5hbWF6b25hd3MuY29tJyxcbiAgJ3NhLWVhc3QtMSc6ICdzMy5zYS1lYXN0LTEuYW1hem9uYXdzLmNvbScsXG4gICd1cy1lYXN0LTEnOiAnczMudXMtZWFzdC0xLmFtYXpvbmF3cy5jb20nLFxuICAndXMtZWFzdC0yJzogJ3MzLnVzLWVhc3QtMi5hbWF6b25hd3MuY29tJyxcbiAgJ3VzLXdlc3QtMSc6ICdzMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbScsXG4gICd1cy13ZXN0LTInOiAnczMudXMtd2VzdC0yLmFtYXpvbmF3cy5jb20nLFxuICAndXMtZ292LWVhc3QtMSc6ICdzMy51cy1nb3YtZWFzdC0xLmFtYXpvbmF3cy5jb20nLFxuICAndXMtZ292LXdlc3QtMSc6ICdzMy51cy1nb3Ytd2VzdC0xLmFtYXpvbmF3cy5jb20nLFxuICAvLyBBZGQgbmV3IGVuZHBvaW50cyBoZXJlLlxufVxuXG5leHBvcnQgdHlwZSBSZWdpb24gPSBrZXlvZiB0eXBlb2YgYXdzUzNFbmRwb2ludCB8IHN0cmluZ1xuXG4vLyBnZXRTM0VuZHBvaW50IGdldCByZWxldmFudCBlbmRwb2ludCBmb3IgdGhlIHJlZ2lvbi5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTM0VuZHBvaW50KHJlZ2lvbjogUmVnaW9uKTogc3RyaW5nIHtcbiAgaWYgKCFpc1N0cmluZyhyZWdpb24pKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCByZWdpb246ICR7cmVnaW9ufWApXG4gIH1cblxuICBjb25zdCBlbmRwb2ludCA9IChhd3NTM0VuZHBvaW50IGFzIFJlY29yZDxzdHJpbmcsIHN0cmluZz4pW3JlZ2lvbl1cbiAgaWYgKGVuZHBvaW50KSB7XG4gICAgcmV0dXJuIGVuZHBvaW50XG4gIH1cbiAgcmV0dXJuICdzMy5hbWF6b25hd3MuY29tJ1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsUUFBUSxRQUFRLGNBQWE7O0FBRXRDO0FBQ0EsTUFBTUMsYUFBYSxHQUFHO0VBQ3BCLFlBQVksRUFBRSw2QkFBNkI7RUFDM0MsV0FBVyxFQUFFLDRCQUE0QjtFQUN6QyxZQUFZLEVBQUUsNkJBQTZCO0VBQzNDLFlBQVksRUFBRSw2QkFBNkI7RUFDM0MsZ0JBQWdCLEVBQUUsaUNBQWlDO0VBQ25ELGdCQUFnQixFQUFFLGlDQUFpQztFQUNuRCxnQkFBZ0IsRUFBRSxpQ0FBaUM7RUFDbkQsZ0JBQWdCLEVBQUUsaUNBQWlDO0VBQ25ELGdCQUFnQixFQUFFLGlDQUFpQztFQUNuRCxnQkFBZ0IsRUFBRSxpQ0FBaUM7RUFDbkQsZ0JBQWdCLEVBQUUsaUNBQWlDO0VBQ25ELGdCQUFnQixFQUFFLGlDQUFpQztFQUNuRCxjQUFjLEVBQUUsK0JBQStCO0VBQy9DLFdBQVcsRUFBRSw0QkFBNEI7RUFDekMsWUFBWSxFQUFFLGdDQUFnQztFQUM5QyxjQUFjLEVBQUUsK0JBQStCO0VBQy9DLGNBQWMsRUFBRSwrQkFBK0I7RUFDL0MsWUFBWSxFQUFFLDZCQUE2QjtFQUMzQyxZQUFZLEVBQUUsNkJBQTZCO0VBQzNDLFlBQVksRUFBRSw2QkFBNkI7RUFDM0MsV0FBVyxFQUFFLDRCQUE0QjtFQUN6QyxXQUFXLEVBQUUsNEJBQTRCO0VBQ3pDLFdBQVcsRUFBRSw0QkFBNEI7RUFDekMsY0FBYyxFQUFFLCtCQUErQjtFQUMvQyxjQUFjLEVBQUUsK0JBQStCO0VBQy9DLFlBQVksRUFBRSw2QkFBNkI7RUFDM0MsV0FBVyxFQUFFLDRCQUE0QjtFQUN6QyxXQUFXLEVBQUUsNEJBQTRCO0VBQ3pDLFdBQVcsRUFBRSw0QkFBNEI7RUFDekMsV0FBVyxFQUFFLDRCQUE0QjtFQUN6QyxXQUFXLEVBQUUsNEJBQTRCO0VBQ3pDLGVBQWUsRUFBRSxnQ0FBZ0M7RUFDakQsZUFBZSxFQUFFO0VBQ2pCO0FBQ0YsQ0FBQzs7QUFJRDtBQUNBLE9BQU8sU0FBU0MsYUFBYUEsQ0FBQ0MsTUFBYyxFQUFVO0VBQ3BELElBQUksQ0FBQ0gsUUFBUSxDQUFDRyxNQUFNLENBQUMsRUFBRTtJQUNyQixNQUFNLElBQUlDLFNBQVMsQ0FBRSxtQkFBa0JELE1BQU8sRUFBQyxDQUFDO0VBQ2xEO0VBRUEsTUFBTUUsUUFBUSxHQUFJSixhQUFhLENBQTRCRSxNQUFNLENBQUM7RUFDbEUsSUFBSUUsUUFBUSxFQUFFO0lBQ1osT0FBT0EsUUFBUTtFQUNqQjtFQUNBLE9BQU8sa0JBQWtCO0FBQzNCIn0="],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;CAcC;;;AAED;;AAEA,yCAAyC;AACzC,MAAM,gBAAgB;IACpB,cAAc;IACd,aAAa;IACb,cAAc;IACd,cAAc;IACd,kBAAkB;IAClB,kBAAkB;IAClB,kBAAkB;IAClB,kBAAkB;IAClB,kBAAkB;IAClB,kBAAkB;IAClB,kBAAkB;IAClB,kBAAkB;IAClB,gBAAgB;IAChB,aAAa;IACb,cAAc;IACd,gBAAgB;IAChB,gBAAgB;IAChB,cAAc;IACd,cAAc;IACd,cAAc;IACd,aAAa;IACb,aAAa;IACb,aAAa;IACb,gBAAgB;IAChB,gBAAgB;IAChB,cAAc;IACd,aAAa;IACb,aAAa;IACb,aAAa;IACb,aAAa;IACb,aAAa;IACb,iBAAiB;IACjB,iBAAiB;AAEnB;AAGO,SAAS,cAAc,MAAM;IAClC,IAAI,CAAC,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,SAAS;QACrB,MAAM,IAAI,UAAU,CAAC,gBAAgB,EAAE,QAAQ;IACjD;IACA,MAAM,WAAW,aAAa,CAAC,OAAO;IACtC,IAAI,UAAU;QACZ,OAAO;IACT;IACA,OAAO;AACT,EACA,wkLAAwkL","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2419, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/internal/client.mjs"],"sourcesContent":["import * as crypto from \"crypto\";\nimport * as fs from \"fs\";\nimport * as http from \"http\";\nimport * as https from \"https\";\nimport * as path from \"path\";\nimport * as stream from \"stream\";\nimport * as async from 'async';\nimport BlockStream2 from 'block-stream2';\nimport { isBrowser } from 'browser-or-node';\nimport _ from 'lodash';\nimport * as qs from 'query-string';\nimport xml2js from 'xml2js';\nimport { CredentialProvider } from \"../CredentialProvider.mjs\";\nimport * as errors from \"../errors.mjs\";\nimport { CopyDestinationOptions, CopySourceOptions, DEFAULT_REGION, LEGAL_HOLD_STATUS, PRESIGN_EXPIRY_DAYS_MAX, RETENTION_MODES, RETENTION_VALIDITY_UNITS } from \"../helpers.mjs\";\nimport { postPresignSignatureV4, presignSignatureV4, signV4 } from \"../signing.mjs\";\nimport { fsp, streamPromise } from \"./async.mjs\";\nimport { CopyConditions } from \"./copy-conditions.mjs\";\nimport { Extensions } from \"./extensions.mjs\";\nimport { calculateEvenSplits, extractMetadata, getContentLength, getScope, getSourceVersionId, getVersionId, hashBinary, insertContentType, isAmazonEndpoint, isBoolean, isDefined, isEmpty, isNumber, isObject, isReadableStream, isString, isValidBucketName, isValidEndpoint, isValidObjectName, isValidPort, isValidPrefix, isVirtualHostStyle, makeDateLong, PART_CONSTRAINTS, partsRequired, prependXAMZMeta, readableStream, sanitizeETag, toMd5, toSha256, uriEscape, uriResourceEscape } from \"./helper.mjs\";\nimport { joinHostPort } from \"./join-host-port.mjs\";\nimport { PostPolicy } from \"./post-policy.mjs\";\nimport { requestWithRetry } from \"./request.mjs\";\nimport { drainResponse, readAsBuffer, readAsString } from \"./response.mjs\";\nimport { getS3Endpoint } from \"./s3-endpoints.mjs\";\nimport { parseCompleteMultipart, parseInitiateMultipart, parseListObjects, parseObjectLegalHoldConfig, parseSelectObjectContentResponse, uploadPartParser } from \"./xml-parser.mjs\";\nimport * as xmlParsers from \"./xml-parser.mjs\";\nconst xml = new xml2js.Builder({\n  renderOpts: {\n    pretty: false\n  },\n  headless: true\n});\n\n// will be replaced by bundler.\nconst Package = {\n  version: \"8.0.5\" || 'development'\n};\nconst requestOptionProperties = ['agent', 'ca', 'cert', 'ciphers', 'clientCertEngine', 'crl', 'dhparam', 'ecdhCurve', 'family', 'honorCipherOrder', 'key', 'passphrase', 'pfx', 'rejectUnauthorized', 'secureOptions', 'secureProtocol', 'servername', 'sessionIdContext'];\nexport class TypedClient {\n  partSize = 64 * 1024 * 1024;\n  maximumPartSize = 5 * 1024 * 1024 * 1024;\n  maxObjectSize = 5 * 1024 * 1024 * 1024 * 1024;\n  constructor(params) {\n    // @ts-expect-error deprecated property\n    if (params.secure !== undefined) {\n      throw new Error('\"secure\" option deprecated, \"useSSL\" should be used instead');\n    }\n    // Default values if not specified.\n    if (params.useSSL === undefined) {\n      params.useSSL = true;\n    }\n    if (!params.port) {\n      params.port = 0;\n    }\n    // Validate input params.\n    if (!isValidEndpoint(params.endPoint)) {\n      throw new errors.InvalidEndpointError(`Invalid endPoint : ${params.endPoint}`);\n    }\n    if (!isValidPort(params.port)) {\n      throw new errors.InvalidArgumentError(`Invalid port : ${params.port}`);\n    }\n    if (!isBoolean(params.useSSL)) {\n      throw new errors.InvalidArgumentError(`Invalid useSSL flag type : ${params.useSSL}, expected to be of type \"boolean\"`);\n    }\n\n    // Validate region only if its set.\n    if (params.region) {\n      if (!isString(params.region)) {\n        throw new errors.InvalidArgumentError(`Invalid region : ${params.region}`);\n      }\n    }\n    const host = params.endPoint.toLowerCase();\n    let port = params.port;\n    let protocol;\n    let transport;\n    let transportAgent;\n    // Validate if configuration is not using SSL\n    // for constructing relevant endpoints.\n    if (params.useSSL) {\n      // Defaults to secure.\n      transport = https;\n      protocol = 'https:';\n      port = port || 443;\n      transportAgent = https.globalAgent;\n    } else {\n      transport = http;\n      protocol = 'http:';\n      port = port || 80;\n      transportAgent = http.globalAgent;\n    }\n\n    // if custom transport is set, use it.\n    if (params.transport) {\n      if (!isObject(params.transport)) {\n        throw new errors.InvalidArgumentError(`Invalid transport type : ${params.transport}, expected to be type \"object\"`);\n      }\n      transport = params.transport;\n    }\n\n    // if custom transport agent is set, use it.\n    if (params.transportAgent) {\n      if (!isObject(params.transportAgent)) {\n        throw new errors.InvalidArgumentError(`Invalid transportAgent type: ${params.transportAgent}, expected to be type \"object\"`);\n      }\n      transportAgent = params.transportAgent;\n    }\n\n    // User Agent should always following the below style.\n    // Please open an issue to discuss any new changes here.\n    //\n    //       MinIO (OS; ARCH) LIB/VER APP/VER\n    //\n    const libraryComments = `(${process.platform}; ${process.arch})`;\n    const libraryAgent = `MinIO ${libraryComments} minio-js/${Package.version}`;\n    // User agent block ends.\n\n    this.transport = transport;\n    this.transportAgent = transportAgent;\n    this.host = host;\n    this.port = port;\n    this.protocol = protocol;\n    this.userAgent = `${libraryAgent}`;\n\n    // Default path style is true\n    if (params.pathStyle === undefined) {\n      this.pathStyle = true;\n    } else {\n      this.pathStyle = params.pathStyle;\n    }\n    this.accessKey = params.accessKey ?? '';\n    this.secretKey = params.secretKey ?? '';\n    this.sessionToken = params.sessionToken;\n    this.anonymous = !this.accessKey || !this.secretKey;\n    if (params.credentialsProvider) {\n      this.anonymous = false;\n      this.credentialsProvider = params.credentialsProvider;\n    }\n    this.regionMap = {};\n    if (params.region) {\n      this.region = params.region;\n    }\n    if (params.partSize) {\n      this.partSize = params.partSize;\n      this.overRidePartSize = true;\n    }\n    if (this.partSize < 5 * 1024 * 1024) {\n      throw new errors.InvalidArgumentError(`Part size should be greater than 5MB`);\n    }\n    if (this.partSize > 5 * 1024 * 1024 * 1024) {\n      throw new errors.InvalidArgumentError(`Part size should be less than 5GB`);\n    }\n\n    // SHA256 is enabled only for authenticated http requests. If the request is authenticated\n    // and the connection is https we use x-amz-content-sha256=UNSIGNED-PAYLOAD\n    // header for signature calculation.\n    this.enableSHA256 = !this.anonymous && !params.useSSL;\n    this.s3AccelerateEndpoint = params.s3AccelerateEndpoint || undefined;\n    this.reqOptions = {};\n    this.clientExtensions = new Extensions(this);\n  }\n  /**\n   * Minio extensions that aren't necessary present for Amazon S3 compatible storage servers\n   */\n  get extensions() {\n    return this.clientExtensions;\n  }\n\n  /**\n   * @param endPoint - valid S3 acceleration end point\n   */\n  setS3TransferAccelerate(endPoint) {\n    this.s3AccelerateEndpoint = endPoint;\n  }\n\n  /**\n   * Sets the supported request options.\n   */\n  setRequestOptions(options) {\n    if (!isObject(options)) {\n      throw new TypeError('request options should be of type \"object\"');\n    }\n    this.reqOptions = _.pick(options, requestOptionProperties);\n  }\n\n  /**\n   *  This is s3 Specific and does not hold validity in any other Object storage.\n   */\n  getAccelerateEndPointIfSet(bucketName, objectName) {\n    if (!isEmpty(this.s3AccelerateEndpoint) && !isEmpty(bucketName) && !isEmpty(objectName)) {\n      // http://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html\n      // Disable transfer acceleration for non-compliant bucket names.\n      if (bucketName.includes('.')) {\n        throw new Error(`Transfer Acceleration is not supported for non compliant bucket:${bucketName}`);\n      }\n      // If transfer acceleration is requested set new host.\n      // For more details about enabling transfer acceleration read here.\n      // http://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html\n      return this.s3AccelerateEndpoint;\n    }\n    return false;\n  }\n\n  /**\n   *   Set application specific information.\n   *   Generates User-Agent in the following style.\n   *   MinIO (OS; ARCH) LIB/VER APP/VER\n   */\n  setAppInfo(appName, appVersion) {\n    if (!isString(appName)) {\n      throw new TypeError(`Invalid appName: ${appName}`);\n    }\n    if (appName.trim() === '') {\n      throw new errors.InvalidArgumentError('Input appName cannot be empty.');\n    }\n    if (!isString(appVersion)) {\n      throw new TypeError(`Invalid appVersion: ${appVersion}`);\n    }\n    if (appVersion.trim() === '') {\n      throw new errors.InvalidArgumentError('Input appVersion cannot be empty.');\n    }\n    this.userAgent = `${this.userAgent} ${appName}/${appVersion}`;\n  }\n\n  /**\n   * returns options object that can be used with http.request()\n   * Takes care of constructing virtual-host-style or path-style hostname\n   */\n  getRequestOptions(opts) {\n    const method = opts.method;\n    const region = opts.region;\n    const bucketName = opts.bucketName;\n    let objectName = opts.objectName;\n    const headers = opts.headers;\n    const query = opts.query;\n    let reqOptions = {\n      method,\n      headers: {},\n      protocol: this.protocol,\n      // If custom transportAgent was supplied earlier, we'll inject it here\n      agent: this.transportAgent\n    };\n\n    // Verify if virtual host supported.\n    let virtualHostStyle;\n    if (bucketName) {\n      virtualHostStyle = isVirtualHostStyle(this.host, this.protocol, bucketName, this.pathStyle);\n    }\n    let path = '/';\n    let host = this.host;\n    let port;\n    if (this.port) {\n      port = this.port;\n    }\n    if (objectName) {\n      objectName = uriResourceEscape(objectName);\n    }\n\n    // For Amazon S3 endpoint, get endpoint based on region.\n    if (isAmazonEndpoint(host)) {\n      const accelerateEndPoint = this.getAccelerateEndPointIfSet(bucketName, objectName);\n      if (accelerateEndPoint) {\n        host = `${accelerateEndPoint}`;\n      } else {\n        host = getS3Endpoint(region);\n      }\n    }\n    if (virtualHostStyle && !opts.pathStyle) {\n      // For all hosts which support virtual host style, `bucketName`\n      // is part of the hostname in the following format:\n      //\n      //  var host = 'bucketName.example.com'\n      //\n      if (bucketName) {\n        host = `${bucketName}.${host}`;\n      }\n      if (objectName) {\n        path = `/${objectName}`;\n      }\n    } else {\n      // For all S3 compatible storage services we will fallback to\n      // path style requests, where `bucketName` is part of the URI\n      // path.\n      if (bucketName) {\n        path = `/${bucketName}`;\n      }\n      if (objectName) {\n        path = `/${bucketName}/${objectName}`;\n      }\n    }\n    if (query) {\n      path += `?${query}`;\n    }\n    reqOptions.headers.host = host;\n    if (reqOptions.protocol === 'http:' && port !== 80 || reqOptions.protocol === 'https:' && port !== 443) {\n      reqOptions.headers.host = joinHostPort(host, port);\n    }\n    reqOptions.headers['user-agent'] = this.userAgent;\n    if (headers) {\n      // have all header keys in lower case - to make signing easy\n      for (const [k, v] of Object.entries(headers)) {\n        reqOptions.headers[k.toLowerCase()] = v;\n      }\n    }\n\n    // Use any request option specified in minioClient.setRequestOptions()\n    reqOptions = Object.assign({}, this.reqOptions, reqOptions);\n    return {\n      ...reqOptions,\n      headers: _.mapValues(_.pickBy(reqOptions.headers, isDefined), v => v.toString()),\n      host,\n      port,\n      path\n    };\n  }\n  async setCredentialsProvider(credentialsProvider) {\n    if (!(credentialsProvider instanceof CredentialProvider)) {\n      throw new Error('Unable to get credentials. Expected instance of CredentialProvider');\n    }\n    this.credentialsProvider = credentialsProvider;\n    await this.checkAndRefreshCreds();\n  }\n  async checkAndRefreshCreds() {\n    if (this.credentialsProvider) {\n      try {\n        const credentialsConf = await this.credentialsProvider.getCredentials();\n        this.accessKey = credentialsConf.getAccessKey();\n        this.secretKey = credentialsConf.getSecretKey();\n        this.sessionToken = credentialsConf.getSessionToken();\n      } catch (e) {\n        throw new Error(`Unable to get credentials: ${e}`, {\n          cause: e\n        });\n      }\n    }\n  }\n  /**\n   * log the request, response, error\n   */\n  logHTTP(reqOptions, response, err) {\n    // if no logStream available return.\n    if (!this.logStream) {\n      return;\n    }\n    if (!isObject(reqOptions)) {\n      throw new TypeError('reqOptions should be of type \"object\"');\n    }\n    if (response && !isReadableStream(response)) {\n      throw new TypeError('response should be of type \"Stream\"');\n    }\n    if (err && !(err instanceof Error)) {\n      throw new TypeError('err should be of type \"Error\"');\n    }\n    const logStream = this.logStream;\n    const logHeaders = headers => {\n      Object.entries(headers).forEach(([k, v]) => {\n        if (k == 'authorization') {\n          if (isString(v)) {\n            const redactor = new RegExp('Signature=([0-9a-f]+)');\n            v = v.replace(redactor, 'Signature=**REDACTED**');\n          }\n        }\n        logStream.write(`${k}: ${v}\\n`);\n      });\n      logStream.write('\\n');\n    };\n    logStream.write(`REQUEST: ${reqOptions.method} ${reqOptions.path}\\n`);\n    logHeaders(reqOptions.headers);\n    if (response) {\n      this.logStream.write(`RESPONSE: ${response.statusCode}\\n`);\n      logHeaders(response.headers);\n    }\n    if (err) {\n      logStream.write('ERROR BODY:\\n');\n      const errJSON = JSON.stringify(err, null, '\\t');\n      logStream.write(`${errJSON}\\n`);\n    }\n  }\n\n  /**\n   * Enable tracing\n   */\n  traceOn(stream) {\n    if (!stream) {\n      stream = process.stdout;\n    }\n    this.logStream = stream;\n  }\n\n  /**\n   * Disable tracing\n   */\n  traceOff() {\n    this.logStream = undefined;\n  }\n\n  /**\n   * makeRequest is the primitive used by the apis for making S3 requests.\n   * payload can be empty string in case of no payload.\n   * statusCode is the expected statusCode. If response.statusCode does not match\n   * we parse the XML error and call the callback with the error message.\n   *\n   * A valid region is passed by the calls - listBuckets, makeBucket and getBucketRegion.\n   *\n   * @internal\n   */\n  async makeRequestAsync(options, payload = '', expectedCodes = [200], region = '') {\n    if (!isObject(options)) {\n      throw new TypeError('options should be of type \"object\"');\n    }\n    if (!isString(payload) && !isObject(payload)) {\n      // Buffer is of type 'object'\n      throw new TypeError('payload should be of type \"string\" or \"Buffer\"');\n    }\n    expectedCodes.forEach(statusCode => {\n      if (!isNumber(statusCode)) {\n        throw new TypeError('statusCode should be of type \"number\"');\n      }\n    });\n    if (!isString(region)) {\n      throw new TypeError('region should be of type \"string\"');\n    }\n    if (!options.headers) {\n      options.headers = {};\n    }\n    if (options.method === 'POST' || options.method === 'PUT' || options.method === 'DELETE') {\n      options.headers['content-length'] = payload.length.toString();\n    }\n    const sha256sum = this.enableSHA256 ? toSha256(payload) : '';\n    return this.makeRequestStreamAsync(options, payload, sha256sum, expectedCodes, region);\n  }\n\n  /**\n   * new request with promise\n   *\n   * No need to drain response, response body is not valid\n   */\n  async makeRequestAsyncOmit(options, payload = '', statusCodes = [200], region = '') {\n    const res = await this.makeRequestAsync(options, payload, statusCodes, region);\n    await drainResponse(res);\n    return res;\n  }\n\n  /**\n   * makeRequestStream will be used directly instead of makeRequest in case the payload\n   * is available as a stream. for ex. putObject\n   *\n   * @internal\n   */\n  async makeRequestStreamAsync(options, body, sha256sum, statusCodes, region) {\n    if (!isObject(options)) {\n      throw new TypeError('options should be of type \"object\"');\n    }\n    if (!(Buffer.isBuffer(body) || typeof body === 'string' || isReadableStream(body))) {\n      throw new errors.InvalidArgumentError(`stream should be a Buffer, string or readable Stream, got ${typeof body} instead`);\n    }\n    if (!isString(sha256sum)) {\n      throw new TypeError('sha256sum should be of type \"string\"');\n    }\n    statusCodes.forEach(statusCode => {\n      if (!isNumber(statusCode)) {\n        throw new TypeError('statusCode should be of type \"number\"');\n      }\n    });\n    if (!isString(region)) {\n      throw new TypeError('region should be of type \"string\"');\n    }\n    // sha256sum will be empty for anonymous or https requests\n    if (!this.enableSHA256 && sha256sum.length !== 0) {\n      throw new errors.InvalidArgumentError(`sha256sum expected to be empty for anonymous or https requests`);\n    }\n    // sha256sum should be valid for non-anonymous http requests.\n    if (this.enableSHA256 && sha256sum.length !== 64) {\n      throw new errors.InvalidArgumentError(`Invalid sha256sum : ${sha256sum}`);\n    }\n    await this.checkAndRefreshCreds();\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    region = region || (await this.getBucketRegionAsync(options.bucketName));\n    const reqOptions = this.getRequestOptions({\n      ...options,\n      region\n    });\n    if (!this.anonymous) {\n      // For non-anonymous https requests sha256sum is 'UNSIGNED-PAYLOAD' for signature calculation.\n      if (!this.enableSHA256) {\n        sha256sum = 'UNSIGNED-PAYLOAD';\n      }\n      const date = new Date();\n      reqOptions.headers['x-amz-date'] = makeDateLong(date);\n      reqOptions.headers['x-amz-content-sha256'] = sha256sum;\n      if (this.sessionToken) {\n        reqOptions.headers['x-amz-security-token'] = this.sessionToken;\n      }\n      reqOptions.headers.authorization = signV4(reqOptions, this.accessKey, this.secretKey, region, date, sha256sum);\n    }\n    const response = await requestWithRetry(this.transport, reqOptions, body);\n    if (!response.statusCode) {\n      throw new Error(\"BUG: response doesn't have a statusCode\");\n    }\n    if (!statusCodes.includes(response.statusCode)) {\n      // For an incorrect region, S3 server always sends back 400.\n      // But we will do cache invalidation for all errors so that,\n      // in future, if AWS S3 decides to send a different status code or\n      // XML error code we will still work fine.\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      delete this.regionMap[options.bucketName];\n      const err = await xmlParsers.parseResponseError(response);\n      this.logHTTP(reqOptions, response, err);\n      throw err;\n    }\n    this.logHTTP(reqOptions, response);\n    return response;\n  }\n\n  /**\n   * gets the region of the bucket\n   *\n   * @param bucketName\n   *\n   * @internal\n   */\n  async getBucketRegionAsync(bucketName) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError(`Invalid bucket name : ${bucketName}`);\n    }\n\n    // Region is set with constructor, return the region right here.\n    if (this.region) {\n      return this.region;\n    }\n    const cached = this.regionMap[bucketName];\n    if (cached) {\n      return cached;\n    }\n    const extractRegionAsync = async response => {\n      const body = await readAsString(response);\n      const region = xmlParsers.parseBucketRegion(body) || DEFAULT_REGION;\n      this.regionMap[bucketName] = region;\n      return region;\n    };\n    const method = 'GET';\n    const query = 'location';\n    // `getBucketLocation` behaves differently in following ways for\n    // different environments.\n    //\n    // - For nodejs env we default to path style requests.\n    // - For browser env path style requests on buckets yields CORS\n    //   error. To circumvent this problem we make a virtual host\n    //   style request signed with 'us-east-1'. This request fails\n    //   with an error 'AuthorizationHeaderMalformed', additionally\n    //   the error XML also provides Region of the bucket. To validate\n    //   this region is proper we retry the same request with the newly\n    //   obtained region.\n    const pathStyle = this.pathStyle && !isBrowser;\n    let region;\n    try {\n      const res = await this.makeRequestAsync({\n        method,\n        bucketName,\n        query,\n        pathStyle\n      }, '', [200], DEFAULT_REGION);\n      return extractRegionAsync(res);\n    } catch (e) {\n      // make alignment with mc cli\n      if (e instanceof errors.S3Error) {\n        const errCode = e.code;\n        const errRegion = e.region;\n        if (errCode === 'AccessDenied' && !errRegion) {\n          return DEFAULT_REGION;\n        }\n      }\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      if (!(e.name === 'AuthorizationHeaderMalformed')) {\n        throw e;\n      }\n      // @ts-expect-error we set extra properties on error object\n      region = e.Region;\n      if (!region) {\n        throw e;\n      }\n    }\n    const res = await this.makeRequestAsync({\n      method,\n      bucketName,\n      query,\n      pathStyle\n    }, '', [200], region);\n    return await extractRegionAsync(res);\n  }\n\n  /**\n   * makeRequest is the primitive used by the apis for making S3 requests.\n   * payload can be empty string in case of no payload.\n   * statusCode is the expected statusCode. If response.statusCode does not match\n   * we parse the XML error and call the callback with the error message.\n   * A valid region is passed by the calls - listBuckets, makeBucket and\n   * getBucketRegion.\n   *\n   * @deprecated use `makeRequestAsync` instead\n   */\n  makeRequest(options, payload = '', expectedCodes = [200], region = '', returnResponse, cb) {\n    let prom;\n    if (returnResponse) {\n      prom = this.makeRequestAsync(options, payload, expectedCodes, region);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error compatible for old behaviour\n      prom = this.makeRequestAsyncOmit(options, payload, expectedCodes, region);\n    }\n    prom.then(result => cb(null, result), err => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      cb(err);\n    });\n  }\n\n  /**\n   * makeRequestStream will be used directly instead of makeRequest in case the payload\n   * is available as a stream. for ex. putObject\n   *\n   * @deprecated use `makeRequestStreamAsync` instead\n   */\n  makeRequestStream(options, stream, sha256sum, statusCodes, region, returnResponse, cb) {\n    const executor = async () => {\n      const res = await this.makeRequestStreamAsync(options, stream, sha256sum, statusCodes, region);\n      if (!returnResponse) {\n        await drainResponse(res);\n      }\n      return res;\n    };\n    executor().then(result => cb(null, result),\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    err => cb(err));\n  }\n\n  /**\n   * @deprecated use `getBucketRegionAsync` instead\n   */\n  getBucketRegion(bucketName, cb) {\n    return this.getBucketRegionAsync(bucketName).then(result => cb(null, result),\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    err => cb(err));\n  }\n\n  // Bucket operations\n\n  /**\n   * Creates the bucket `bucketName`.\n   *\n   */\n  async makeBucket(bucketName, region = '', makeOpts) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    // Backward Compatibility\n    if (isObject(region)) {\n      makeOpts = region;\n      region = '';\n    }\n    if (!isString(region)) {\n      throw new TypeError('region should be of type \"string\"');\n    }\n    if (makeOpts && !isObject(makeOpts)) {\n      throw new TypeError('makeOpts should be of type \"object\"');\n    }\n    let payload = '';\n\n    // Region already set in constructor, validate if\n    // caller requested bucket location is same.\n    if (region && this.region) {\n      if (region !== this.region) {\n        throw new errors.InvalidArgumentError(`Configured region ${this.region}, requested ${region}`);\n      }\n    }\n    // sending makeBucket request with XML containing 'us-east-1' fails. For\n    // default region server expects the request without body\n    if (region && region !== DEFAULT_REGION) {\n      payload = xml.buildObject({\n        CreateBucketConfiguration: {\n          $: {\n            xmlns: 'http://s3.amazonaws.com/doc/2006-03-01/'\n          },\n          LocationConstraint: region\n        }\n      });\n    }\n    const method = 'PUT';\n    const headers = {};\n    if (makeOpts && makeOpts.ObjectLocking) {\n      headers['x-amz-bucket-object-lock-enabled'] = true;\n    }\n\n    // For custom region clients  default to custom region specified in client constructor\n    const finalRegion = this.region || region || DEFAULT_REGION;\n    const requestOpt = {\n      method,\n      bucketName,\n      headers\n    };\n    try {\n      await this.makeRequestAsyncOmit(requestOpt, payload, [200], finalRegion);\n    } catch (err) {\n      if (region === '' || region === DEFAULT_REGION) {\n        if (err instanceof errors.S3Error) {\n          const errCode = err.code;\n          const errRegion = err.region;\n          if (errCode === 'AuthorizationHeaderMalformed' && errRegion !== '') {\n            // Retry with region returned as part of error\n            await this.makeRequestAsyncOmit(requestOpt, payload, [200], errCode);\n          }\n        }\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * To check if a bucket already exists.\n   */\n  async bucketExists(bucketName) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    const method = 'HEAD';\n    try {\n      await this.makeRequestAsyncOmit({\n        method,\n        bucketName\n      });\n    } catch (err) {\n      // @ts-ignore\n      if (err.code === 'NoSuchBucket' || err.code === 'NotFound') {\n        return false;\n      }\n      throw err;\n    }\n    return true;\n  }\n\n  /**\n   * @deprecated use promise style API\n   */\n\n  async removeBucket(bucketName) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    const method = 'DELETE';\n    await this.makeRequestAsyncOmit({\n      method,\n      bucketName\n    }, '', [204]);\n    delete this.regionMap[bucketName];\n  }\n\n  /**\n   * Callback is called with readable stream of the object content.\n   */\n  async getObject(bucketName, objectName, getOpts) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n    }\n    return this.getPartialObject(bucketName, objectName, 0, 0, getOpts);\n  }\n\n  /**\n   * Callback is called with readable stream of the partial object content.\n   * @param bucketName\n   * @param objectName\n   * @param offset\n   * @param length - length of the object that will be read in the stream (optional, if not specified we read the rest of the file from the offset)\n   * @param getOpts\n   */\n  async getPartialObject(bucketName, objectName, offset, length = 0, getOpts) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n    }\n    if (!isNumber(offset)) {\n      throw new TypeError('offset should be of type \"number\"');\n    }\n    if (!isNumber(length)) {\n      throw new TypeError('length should be of type \"number\"');\n    }\n    let range = '';\n    if (offset || length) {\n      if (offset) {\n        range = `bytes=${+offset}-`;\n      } else {\n        range = 'bytes=0-';\n        offset = 0;\n      }\n      if (length) {\n        range += `${+length + offset - 1}`;\n      }\n    }\n    let query = '';\n    let headers = {\n      ...(range !== '' && {\n        range\n      })\n    };\n    if (getOpts) {\n      const sseHeaders = {\n        ...(getOpts.SSECustomerAlgorithm && {\n          'X-Amz-Server-Side-Encryption-Customer-Algorithm': getOpts.SSECustomerAlgorithm\n        }),\n        ...(getOpts.SSECustomerKey && {\n          'X-Amz-Server-Side-Encryption-Customer-Key': getOpts.SSECustomerKey\n        }),\n        ...(getOpts.SSECustomerKeyMD5 && {\n          'X-Amz-Server-Side-Encryption-Customer-Key-MD5': getOpts.SSECustomerKeyMD5\n        })\n      };\n      query = qs.stringify(getOpts);\n      headers = {\n        ...prependXAMZMeta(sseHeaders),\n        ...headers\n      };\n    }\n    const expectedStatusCodes = [200];\n    if (range) {\n      expectedStatusCodes.push(206);\n    }\n    const method = 'GET';\n    return await this.makeRequestAsync({\n      method,\n      bucketName,\n      objectName,\n      headers,\n      query\n    }, '', expectedStatusCodes);\n  }\n\n  /**\n   * download object content to a file.\n   * This method will create a temp file named `${filename}.${base64(etag)}.part.minio` when downloading.\n   *\n   * @param bucketName - name of the bucket\n   * @param objectName - name of the object\n   * @param filePath - path to which the object data will be written to\n   * @param getOpts - Optional object get option\n   */\n  async fGetObject(bucketName, objectName, filePath, getOpts) {\n    // Input validation.\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n    }\n    if (!isString(filePath)) {\n      throw new TypeError('filePath should be of type \"string\"');\n    }\n    const downloadToTmpFile = async () => {\n      let partFileStream;\n      const objStat = await this.statObject(bucketName, objectName, getOpts);\n      const encodedEtag = Buffer.from(objStat.etag).toString('base64');\n      const partFile = `${filePath}.${encodedEtag}.part.minio`;\n      await fsp.mkdir(path.dirname(filePath), {\n        recursive: true\n      });\n      let offset = 0;\n      try {\n        const stats = await fsp.stat(partFile);\n        if (objStat.size === stats.size) {\n          return partFile;\n        }\n        offset = stats.size;\n        partFileStream = fs.createWriteStream(partFile, {\n          flags: 'a'\n        });\n      } catch (e) {\n        if (e instanceof Error && e.code === 'ENOENT') {\n          // file not exist\n          partFileStream = fs.createWriteStream(partFile, {\n            flags: 'w'\n          });\n        } else {\n          // other error, maybe access deny\n          throw e;\n        }\n      }\n      const downloadStream = await this.getPartialObject(bucketName, objectName, offset, 0, getOpts);\n      await streamPromise.pipeline(downloadStream, partFileStream);\n      const stats = await fsp.stat(partFile);\n      if (stats.size === objStat.size) {\n        return partFile;\n      }\n      throw new Error('Size mismatch between downloaded file and the object');\n    };\n    const partFile = await downloadToTmpFile();\n    await fsp.rename(partFile, filePath);\n  }\n\n  /**\n   * Stat information of the object.\n   */\n  async statObject(bucketName, objectName, statOpts) {\n    const statOptDef = statOpts || {};\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n    }\n    if (!isObject(statOptDef)) {\n      throw new errors.InvalidArgumentError('statOpts should be of type \"object\"');\n    }\n    const query = qs.stringify(statOptDef);\n    const method = 'HEAD';\n    const res = await this.makeRequestAsyncOmit({\n      method,\n      bucketName,\n      objectName,\n      query\n    });\n    return {\n      size: parseInt(res.headers['content-length']),\n      metaData: extractMetadata(res.headers),\n      lastModified: new Date(res.headers['last-modified']),\n      versionId: getVersionId(res.headers),\n      etag: sanitizeETag(res.headers.etag)\n    };\n  }\n  async removeObject(bucketName, objectName, removeOpts) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError(`Invalid bucket name: ${bucketName}`);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n    }\n    if (removeOpts && !isObject(removeOpts)) {\n      throw new errors.InvalidArgumentError('removeOpts should be of type \"object\"');\n    }\n    const method = 'DELETE';\n    const headers = {};\n    if (removeOpts !== null && removeOpts !== void 0 && removeOpts.governanceBypass) {\n      headers['X-Amz-Bypass-Governance-Retention'] = true;\n    }\n    if (removeOpts !== null && removeOpts !== void 0 && removeOpts.forceDelete) {\n      headers['x-minio-force-delete'] = true;\n    }\n    const queryParams = {};\n    if (removeOpts !== null && removeOpts !== void 0 && removeOpts.versionId) {\n      queryParams.versionId = `${removeOpts.versionId}`;\n    }\n    const query = qs.stringify(queryParams);\n    await this.makeRequestAsyncOmit({\n      method,\n      bucketName,\n      objectName,\n      headers,\n      query\n    }, '', [200, 204]);\n  }\n\n  // Calls implemented below are related to multipart.\n\n  listIncompleteUploads(bucket, prefix, recursive) {\n    if (prefix === undefined) {\n      prefix = '';\n    }\n    if (recursive === undefined) {\n      recursive = false;\n    }\n    if (!isValidBucketName(bucket)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucket);\n    }\n    if (!isValidPrefix(prefix)) {\n      throw new errors.InvalidPrefixError(`Invalid prefix : ${prefix}`);\n    }\n    if (!isBoolean(recursive)) {\n      throw new TypeError('recursive should be of type \"boolean\"');\n    }\n    const delimiter = recursive ? '' : '/';\n    let keyMarker = '';\n    let uploadIdMarker = '';\n    const uploads = [];\n    let ended = false;\n\n    // TODO: refactor this with async/await and `stream.Readable.from`\n    const readStream = new stream.Readable({\n      objectMode: true\n    });\n    readStream._read = () => {\n      // push one upload info per _read()\n      if (uploads.length) {\n        return readStream.push(uploads.shift());\n      }\n      if (ended) {\n        return readStream.push(null);\n      }\n      this.listIncompleteUploadsQuery(bucket, prefix, keyMarker, uploadIdMarker, delimiter).then(result => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        result.prefixes.forEach(prefix => uploads.push(prefix));\n        async.eachSeries(result.uploads, (upload, cb) => {\n          // for each incomplete upload add the sizes of its uploaded parts\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          this.listParts(bucket, upload.key, upload.uploadId).then(parts => {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            upload.size = parts.reduce((acc, item) => acc + item.size, 0);\n            uploads.push(upload);\n            cb();\n          }, err => cb(err));\n        }, err => {\n          if (err) {\n            readStream.emit('error', err);\n            return;\n          }\n          if (result.isTruncated) {\n            keyMarker = result.nextKeyMarker;\n            uploadIdMarker = result.nextUploadIdMarker;\n          } else {\n            ended = true;\n          }\n\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          readStream._read();\n        });\n      }, e => {\n        readStream.emit('error', e);\n      });\n    };\n    return readStream;\n  }\n\n  /**\n   * Called by listIncompleteUploads to fetch a batch of incomplete uploads.\n   */\n  async listIncompleteUploadsQuery(bucketName, prefix, keyMarker, uploadIdMarker, delimiter) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isString(prefix)) {\n      throw new TypeError('prefix should be of type \"string\"');\n    }\n    if (!isString(keyMarker)) {\n      throw new TypeError('keyMarker should be of type \"string\"');\n    }\n    if (!isString(uploadIdMarker)) {\n      throw new TypeError('uploadIdMarker should be of type \"string\"');\n    }\n    if (!isString(delimiter)) {\n      throw new TypeError('delimiter should be of type \"string\"');\n    }\n    const queries = [];\n    queries.push(`prefix=${uriEscape(prefix)}`);\n    queries.push(`delimiter=${uriEscape(delimiter)}`);\n    if (keyMarker) {\n      queries.push(`key-marker=${uriEscape(keyMarker)}`);\n    }\n    if (uploadIdMarker) {\n      queries.push(`upload-id-marker=${uploadIdMarker}`);\n    }\n    const maxUploads = 1000;\n    queries.push(`max-uploads=${maxUploads}`);\n    queries.sort();\n    queries.unshift('uploads');\n    let query = '';\n    if (queries.length > 0) {\n      query = `${queries.join('&')}`;\n    }\n    const method = 'GET';\n    const res = await this.makeRequestAsync({\n      method,\n      bucketName,\n      query\n    });\n    const body = await readAsString(res);\n    return xmlParsers.parseListMultipart(body);\n  }\n\n  /**\n   * Initiate a new multipart upload.\n   * @internal\n   */\n  async initiateNewMultipartUpload(bucketName, objectName, headers) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n    }\n    if (!isObject(headers)) {\n      throw new errors.InvalidObjectNameError('contentType should be of type \"object\"');\n    }\n    const method = 'POST';\n    const query = 'uploads';\n    const res = await this.makeRequestAsync({\n      method,\n      bucketName,\n      objectName,\n      query,\n      headers\n    });\n    const body = await readAsBuffer(res);\n    return parseInitiateMultipart(body.toString());\n  }\n\n  /**\n   * Internal Method to abort a multipart upload request in case of any errors.\n   *\n   * @param bucketName - Bucket Name\n   * @param objectName - Object Name\n   * @param uploadId - id of a multipart upload to cancel during compose object sequence.\n   */\n  async abortMultipartUpload(bucketName, objectName, uploadId) {\n    const method = 'DELETE';\n    const query = `uploadId=${uploadId}`;\n    const requestOptions = {\n      method,\n      bucketName,\n      objectName: objectName,\n      query\n    };\n    await this.makeRequestAsyncOmit(requestOptions, '', [204]);\n  }\n  async findUploadId(bucketName, objectName) {\n    var _latestUpload;\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n    }\n    let latestUpload;\n    let keyMarker = '';\n    let uploadIdMarker = '';\n    for (;;) {\n      const result = await this.listIncompleteUploadsQuery(bucketName, objectName, keyMarker, uploadIdMarker, '');\n      for (const upload of result.uploads) {\n        if (upload.key === objectName) {\n          if (!latestUpload || upload.initiated.getTime() > latestUpload.initiated.getTime()) {\n            latestUpload = upload;\n          }\n        }\n      }\n      if (result.isTruncated) {\n        keyMarker = result.nextKeyMarker;\n        uploadIdMarker = result.nextUploadIdMarker;\n        continue;\n      }\n      break;\n    }\n    return (_latestUpload = latestUpload) === null || _latestUpload === void 0 ? void 0 : _latestUpload.uploadId;\n  }\n\n  /**\n   * this call will aggregate the parts on the server into a single object.\n   */\n  async completeMultipartUpload(bucketName, objectName, uploadId, etags) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n    }\n    if (!isString(uploadId)) {\n      throw new TypeError('uploadId should be of type \"string\"');\n    }\n    if (!isObject(etags)) {\n      throw new TypeError('etags should be of type \"Array\"');\n    }\n    if (!uploadId) {\n      throw new errors.InvalidArgumentError('uploadId cannot be empty');\n    }\n    const method = 'POST';\n    const query = `uploadId=${uriEscape(uploadId)}`;\n    const builder = new xml2js.Builder();\n    const payload = builder.buildObject({\n      CompleteMultipartUpload: {\n        $: {\n          xmlns: 'http://s3.amazonaws.com/doc/2006-03-01/'\n        },\n        Part: etags.map(etag => {\n          return {\n            PartNumber: etag.part,\n            ETag: etag.etag\n          };\n        })\n      }\n    });\n    const res = await this.makeRequestAsync({\n      method,\n      bucketName,\n      objectName,\n      query\n    }, payload);\n    const body = await readAsBuffer(res);\n    const result = parseCompleteMultipart(body.toString());\n    if (!result) {\n      throw new Error('BUG: failed to parse server response');\n    }\n    if (result.errCode) {\n      // Multipart Complete API returns an error XML after a 200 http status\n      throw new errors.S3Error(result.errMessage);\n    }\n    return {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      etag: result.etag,\n      versionId: getVersionId(res.headers)\n    };\n  }\n\n  /**\n   * Get part-info of all parts of an incomplete upload specified by uploadId.\n   */\n  async listParts(bucketName, objectName, uploadId) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n    }\n    if (!isString(uploadId)) {\n      throw new TypeError('uploadId should be of type \"string\"');\n    }\n    if (!uploadId) {\n      throw new errors.InvalidArgumentError('uploadId cannot be empty');\n    }\n    const parts = [];\n    let marker = 0;\n    let result;\n    do {\n      result = await this.listPartsQuery(bucketName, objectName, uploadId, marker);\n      marker = result.marker;\n      parts.push(...result.parts);\n    } while (result.isTruncated);\n    return parts;\n  }\n\n  /**\n   * Called by listParts to fetch a batch of part-info\n   */\n  async listPartsQuery(bucketName, objectName, uploadId, marker) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n    }\n    if (!isString(uploadId)) {\n      throw new TypeError('uploadId should be of type \"string\"');\n    }\n    if (!isNumber(marker)) {\n      throw new TypeError('marker should be of type \"number\"');\n    }\n    if (!uploadId) {\n      throw new errors.InvalidArgumentError('uploadId cannot be empty');\n    }\n    let query = `uploadId=${uriEscape(uploadId)}`;\n    if (marker) {\n      query += `&part-number-marker=${marker}`;\n    }\n    const method = 'GET';\n    const res = await this.makeRequestAsync({\n      method,\n      bucketName,\n      objectName,\n      query\n    });\n    return xmlParsers.parseListParts(await readAsString(res));\n  }\n  async listBuckets() {\n    const method = 'GET';\n    const regionConf = this.region || DEFAULT_REGION;\n    const httpRes = await this.makeRequestAsync({\n      method\n    }, '', [200], regionConf);\n    const xmlResult = await readAsString(httpRes);\n    return xmlParsers.parseListBucket(xmlResult);\n  }\n\n  /**\n   * Calculate part size given the object size. Part size will be atleast this.partSize\n   */\n  calculatePartSize(size) {\n    if (!isNumber(size)) {\n      throw new TypeError('size should be of type \"number\"');\n    }\n    if (size > this.maxObjectSize) {\n      throw new TypeError(`size should not be more than ${this.maxObjectSize}`);\n    }\n    if (this.overRidePartSize) {\n      return this.partSize;\n    }\n    let partSize = this.partSize;\n    for (;;) {\n      // while(true) {...} throws linting error.\n      // If partSize is big enough to accomodate the object size, then use it.\n      if (partSize * 10000 > size) {\n        return partSize;\n      }\n      // Try part sizes as 64MB, 80MB, 96MB etc.\n      partSize += 16 * 1024 * 1024;\n    }\n  }\n\n  /**\n   * Uploads the object using contents from a file\n   */\n  async fPutObject(bucketName, objectName, filePath, metaData) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n    }\n    if (!isString(filePath)) {\n      throw new TypeError('filePath should be of type \"string\"');\n    }\n    if (metaData && !isObject(metaData)) {\n      throw new TypeError('metaData should be of type \"object\"');\n    }\n\n    // Inserts correct `content-type` attribute based on metaData and filePath\n    metaData = insertContentType(metaData || {}, filePath);\n    const stat = await fsp.lstat(filePath);\n    return await this.putObject(bucketName, objectName, fs.createReadStream(filePath), stat.size, metaData);\n  }\n\n  /**\n   *  Uploading a stream, \"Buffer\" or \"string\".\n   *  It's recommended to pass `size` argument with stream.\n   */\n  async putObject(bucketName, objectName, stream, size, metaData) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError(`Invalid bucket name: ${bucketName}`);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n    }\n\n    // We'll need to shift arguments to the left because of metaData\n    // and size being optional.\n    if (isObject(size)) {\n      metaData = size;\n    }\n    // Ensures Metadata has appropriate prefix for A3 API\n    const headers = prependXAMZMeta(metaData);\n    if (typeof stream === 'string' || stream instanceof Buffer) {\n      // Adapts the non-stream interface into a stream.\n      size = stream.length;\n      stream = readableStream(stream);\n    } else if (!isReadableStream(stream)) {\n      throw new TypeError('third argument should be of type \"stream.Readable\" or \"Buffer\" or \"string\"');\n    }\n    if (isNumber(size) && size < 0) {\n      throw new errors.InvalidArgumentError(`size cannot be negative, given size: ${size}`);\n    }\n\n    // Get the part size and forward that to the BlockStream. Default to the\n    // largest block size possible if necessary.\n    if (!isNumber(size)) {\n      size = this.maxObjectSize;\n    }\n\n    // Get the part size and forward that to the BlockStream. Default to the\n    // largest block size possible if necessary.\n    if (size === undefined) {\n      const statSize = await getContentLength(stream);\n      if (statSize !== null) {\n        size = statSize;\n      }\n    }\n    if (!isNumber(size)) {\n      // Backward compatibility\n      size = this.maxObjectSize;\n    }\n    const partSize = this.calculatePartSize(size);\n    if (typeof stream === 'string' || stream.readableLength === 0 || Buffer.isBuffer(stream) || size <= partSize) {\n      const buf = isReadableStream(stream) ? await readAsBuffer(stream) : Buffer.from(stream);\n      return this.uploadBuffer(bucketName, objectName, headers, buf);\n    }\n    return this.uploadStream(bucketName, objectName, headers, stream, partSize);\n  }\n\n  /**\n   * method to upload buffer in one call\n   * @private\n   */\n  async uploadBuffer(bucketName, objectName, headers, buf) {\n    const {\n      md5sum,\n      sha256sum\n    } = hashBinary(buf, this.enableSHA256);\n    headers['Content-Length'] = buf.length;\n    if (!this.enableSHA256) {\n      headers['Content-MD5'] = md5sum;\n    }\n    const res = await this.makeRequestStreamAsync({\n      method: 'PUT',\n      bucketName,\n      objectName,\n      headers\n    }, buf, sha256sum, [200], '');\n    await drainResponse(res);\n    return {\n      etag: sanitizeETag(res.headers.etag),\n      versionId: getVersionId(res.headers)\n    };\n  }\n\n  /**\n   * upload stream with MultipartUpload\n   * @private\n   */\n  async uploadStream(bucketName, objectName, headers, body, partSize) {\n    // A map of the previously uploaded chunks, for resuming a file upload. This\n    // will be null if we aren't resuming an upload.\n    const oldParts = {};\n\n    // Keep track of the etags for aggregating the chunks together later. Each\n    // etag represents a single chunk of the file.\n    const eTags = [];\n    const previousUploadId = await this.findUploadId(bucketName, objectName);\n    let uploadId;\n    if (!previousUploadId) {\n      uploadId = await this.initiateNewMultipartUpload(bucketName, objectName, headers);\n    } else {\n      uploadId = previousUploadId;\n      const oldTags = await this.listParts(bucketName, objectName, previousUploadId);\n      oldTags.forEach(e => {\n        oldParts[e.part] = e;\n      });\n    }\n    const chunkier = new BlockStream2({\n      size: partSize,\n      zeroPadding: false\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, o] = await Promise.all([new Promise((resolve, reject) => {\n      body.pipe(chunkier).on('error', reject);\n      chunkier.on('end', resolve).on('error', reject);\n    }), (async () => {\n      let partNumber = 1;\n      for await (const chunk of chunkier) {\n        const md5 = crypto.createHash('md5').update(chunk).digest();\n        const oldPart = oldParts[partNumber];\n        if (oldPart) {\n          if (oldPart.etag === md5.toString('hex')) {\n            eTags.push({\n              part: partNumber,\n              etag: oldPart.etag\n            });\n            partNumber++;\n            continue;\n          }\n        }\n        partNumber++;\n\n        // now start to upload missing part\n        const options = {\n          method: 'PUT',\n          query: qs.stringify({\n            partNumber,\n            uploadId\n          }),\n          headers: {\n            'Content-Length': chunk.length,\n            'Content-MD5': md5.toString('base64')\n          },\n          bucketName,\n          objectName\n        };\n        const response = await this.makeRequestAsyncOmit(options, chunk);\n        let etag = response.headers.etag;\n        if (etag) {\n          etag = etag.replace(/^\"/, '').replace(/\"$/, '');\n        } else {\n          etag = '';\n        }\n        eTags.push({\n          part: partNumber,\n          etag\n        });\n      }\n      return await this.completeMultipartUpload(bucketName, objectName, uploadId, eTags);\n    })()]);\n    return o;\n  }\n  async removeBucketReplication(bucketName) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    const method = 'DELETE';\n    const query = 'replication';\n    await this.makeRequestAsyncOmit({\n      method,\n      bucketName,\n      query\n    }, '', [200, 204], '');\n  }\n  async setBucketReplication(bucketName, replicationConfig) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isObject(replicationConfig)) {\n      throw new errors.InvalidArgumentError('replicationConfig should be of type \"object\"');\n    } else {\n      if (_.isEmpty(replicationConfig.role)) {\n        throw new errors.InvalidArgumentError('Role cannot be empty');\n      } else if (replicationConfig.role && !isString(replicationConfig.role)) {\n        throw new errors.InvalidArgumentError('Invalid value for role', replicationConfig.role);\n      }\n      if (_.isEmpty(replicationConfig.rules)) {\n        throw new errors.InvalidArgumentError('Minimum one replication rule must be specified');\n      }\n    }\n    const method = 'PUT';\n    const query = 'replication';\n    const headers = {};\n    const replicationParamsConfig = {\n      ReplicationConfiguration: {\n        Role: replicationConfig.role,\n        Rule: replicationConfig.rules\n      }\n    };\n    const builder = new xml2js.Builder({\n      renderOpts: {\n        pretty: false\n      },\n      headless: true\n    });\n    const payload = builder.buildObject(replicationParamsConfig);\n    headers['Content-MD5'] = toMd5(payload);\n    await this.makeRequestAsyncOmit({\n      method,\n      bucketName,\n      query,\n      headers\n    }, payload);\n  }\n  async getBucketReplication(bucketName) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    const method = 'GET';\n    const query = 'replication';\n    const httpRes = await this.makeRequestAsync({\n      method,\n      bucketName,\n      query\n    }, '', [200, 204]);\n    const xmlResult = await readAsString(httpRes);\n    return xmlParsers.parseReplicationConfig(xmlResult);\n  }\n  async getObjectLegalHold(bucketName, objectName, getOpts) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n    }\n    if (getOpts) {\n      if (!isObject(getOpts)) {\n        throw new TypeError('getOpts should be of type \"Object\"');\n      } else if (Object.keys(getOpts).length > 0 && getOpts.versionId && !isString(getOpts.versionId)) {\n        throw new TypeError('versionId should be of type string.:', getOpts.versionId);\n      }\n    }\n    const method = 'GET';\n    let query = 'legal-hold';\n    if (getOpts !== null && getOpts !== void 0 && getOpts.versionId) {\n      query += `&versionId=${getOpts.versionId}`;\n    }\n    const httpRes = await this.makeRequestAsync({\n      method,\n      bucketName,\n      objectName,\n      query\n    }, '', [200]);\n    const strRes = await readAsString(httpRes);\n    return parseObjectLegalHoldConfig(strRes);\n  }\n  async setObjectLegalHold(bucketName, objectName, setOpts = {\n    status: LEGAL_HOLD_STATUS.ENABLED\n  }) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n    }\n    if (!isObject(setOpts)) {\n      throw new TypeError('setOpts should be of type \"Object\"');\n    } else {\n      if (![LEGAL_HOLD_STATUS.ENABLED, LEGAL_HOLD_STATUS.DISABLED].includes(setOpts === null || setOpts === void 0 ? void 0 : setOpts.status)) {\n        throw new TypeError('Invalid status: ' + setOpts.status);\n      }\n      if (setOpts.versionId && !setOpts.versionId.length) {\n        throw new TypeError('versionId should be of type string.:' + setOpts.versionId);\n      }\n    }\n    const method = 'PUT';\n    let query = 'legal-hold';\n    if (setOpts.versionId) {\n      query += `&versionId=${setOpts.versionId}`;\n    }\n    const config = {\n      Status: setOpts.status\n    };\n    const builder = new xml2js.Builder({\n      rootName: 'LegalHold',\n      renderOpts: {\n        pretty: false\n      },\n      headless: true\n    });\n    const payload = builder.buildObject(config);\n    const headers = {};\n    headers['Content-MD5'] = toMd5(payload);\n    await this.makeRequestAsyncOmit({\n      method,\n      bucketName,\n      objectName,\n      query,\n      headers\n    }, payload);\n  }\n\n  /**\n   * Get Tags associated with a Bucket\n   */\n  async getBucketTagging(bucketName) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError(`Invalid bucket name: ${bucketName}`);\n    }\n    const method = 'GET';\n    const query = 'tagging';\n    const requestOptions = {\n      method,\n      bucketName,\n      query\n    };\n    const response = await this.makeRequestAsync(requestOptions);\n    const body = await readAsString(response);\n    return xmlParsers.parseTagging(body);\n  }\n\n  /**\n   *  Get the tags associated with a bucket OR an object\n   */\n  async getObjectTagging(bucketName, objectName, getOpts) {\n    const method = 'GET';\n    let query = 'tagging';\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidBucketNameError('Invalid object name: ' + objectName);\n    }\n    if (getOpts && !isObject(getOpts)) {\n      throw new errors.InvalidArgumentError('getOpts should be of type \"object\"');\n    }\n    if (getOpts && getOpts.versionId) {\n      query = `${query}&versionId=${getOpts.versionId}`;\n    }\n    const requestOptions = {\n      method,\n      bucketName,\n      query\n    };\n    if (objectName) {\n      requestOptions['objectName'] = objectName;\n    }\n    const response = await this.makeRequestAsync(requestOptions);\n    const body = await readAsString(response);\n    return xmlParsers.parseTagging(body);\n  }\n\n  /**\n   *  Set the policy on a bucket or an object prefix.\n   */\n  async setBucketPolicy(bucketName, policy) {\n    // Validate arguments.\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError(`Invalid bucket name: ${bucketName}`);\n    }\n    if (!isString(policy)) {\n      throw new errors.InvalidBucketPolicyError(`Invalid bucket policy: ${policy} - must be \"string\"`);\n    }\n    const query = 'policy';\n    let method = 'DELETE';\n    if (policy) {\n      method = 'PUT';\n    }\n    await this.makeRequestAsyncOmit({\n      method,\n      bucketName,\n      query\n    }, policy, [204], '');\n  }\n\n  /**\n   * Get the policy on a bucket or an object prefix.\n   */\n  async getBucketPolicy(bucketName) {\n    // Validate arguments.\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError(`Invalid bucket name: ${bucketName}`);\n    }\n    const method = 'GET';\n    const query = 'policy';\n    const res = await this.makeRequestAsync({\n      method,\n      bucketName,\n      query\n    });\n    return await readAsString(res);\n  }\n  async putObjectRetention(bucketName, objectName, retentionOpts = {}) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError(`Invalid bucket name: ${bucketName}`);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n    }\n    if (!isObject(retentionOpts)) {\n      throw new errors.InvalidArgumentError('retentionOpts should be of type \"object\"');\n    } else {\n      if (retentionOpts.governanceBypass && !isBoolean(retentionOpts.governanceBypass)) {\n        throw new errors.InvalidArgumentError(`Invalid value for governanceBypass: ${retentionOpts.governanceBypass}`);\n      }\n      if (retentionOpts.mode && ![RETENTION_MODES.COMPLIANCE, RETENTION_MODES.GOVERNANCE].includes(retentionOpts.mode)) {\n        throw new errors.InvalidArgumentError(`Invalid object retention mode: ${retentionOpts.mode}`);\n      }\n      if (retentionOpts.retainUntilDate && !isString(retentionOpts.retainUntilDate)) {\n        throw new errors.InvalidArgumentError(`Invalid value for retainUntilDate: ${retentionOpts.retainUntilDate}`);\n      }\n      if (retentionOpts.versionId && !isString(retentionOpts.versionId)) {\n        throw new errors.InvalidArgumentError(`Invalid value for versionId: ${retentionOpts.versionId}`);\n      }\n    }\n    const method = 'PUT';\n    let query = 'retention';\n    const headers = {};\n    if (retentionOpts.governanceBypass) {\n      headers['X-Amz-Bypass-Governance-Retention'] = true;\n    }\n    const builder = new xml2js.Builder({\n      rootName: 'Retention',\n      renderOpts: {\n        pretty: false\n      },\n      headless: true\n    });\n    const params = {};\n    if (retentionOpts.mode) {\n      params.Mode = retentionOpts.mode;\n    }\n    if (retentionOpts.retainUntilDate) {\n      params.RetainUntilDate = retentionOpts.retainUntilDate;\n    }\n    if (retentionOpts.versionId) {\n      query += `&versionId=${retentionOpts.versionId}`;\n    }\n    const payload = builder.buildObject(params);\n    headers['Content-MD5'] = toMd5(payload);\n    await this.makeRequestAsyncOmit({\n      method,\n      bucketName,\n      objectName,\n      query,\n      headers\n    }, payload, [200, 204]);\n  }\n  async getObjectLockConfig(bucketName) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    const method = 'GET';\n    const query = 'object-lock';\n    const httpRes = await this.makeRequestAsync({\n      method,\n      bucketName,\n      query\n    });\n    const xmlResult = await readAsString(httpRes);\n    return xmlParsers.parseObjectLockConfig(xmlResult);\n  }\n  async setObjectLockConfig(bucketName, lockConfigOpts) {\n    const retentionModes = [RETENTION_MODES.COMPLIANCE, RETENTION_MODES.GOVERNANCE];\n    const validUnits = [RETENTION_VALIDITY_UNITS.DAYS, RETENTION_VALIDITY_UNITS.YEARS];\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (lockConfigOpts.mode && !retentionModes.includes(lockConfigOpts.mode)) {\n      throw new TypeError(`lockConfigOpts.mode should be one of ${retentionModes}`);\n    }\n    if (lockConfigOpts.unit && !validUnits.includes(lockConfigOpts.unit)) {\n      throw new TypeError(`lockConfigOpts.unit should be one of ${validUnits}`);\n    }\n    if (lockConfigOpts.validity && !isNumber(lockConfigOpts.validity)) {\n      throw new TypeError(`lockConfigOpts.validity should be a number`);\n    }\n    const method = 'PUT';\n    const query = 'object-lock';\n    const config = {\n      ObjectLockEnabled: 'Enabled'\n    };\n    const configKeys = Object.keys(lockConfigOpts);\n    const isAllKeysSet = ['unit', 'mode', 'validity'].every(lck => configKeys.includes(lck));\n    // Check if keys are present and all keys are present.\n    if (configKeys.length > 0) {\n      if (!isAllKeysSet) {\n        throw new TypeError(`lockConfigOpts.mode,lockConfigOpts.unit,lockConfigOpts.validity all the properties should be specified.`);\n      } else {\n        config.Rule = {\n          DefaultRetention: {}\n        };\n        if (lockConfigOpts.mode) {\n          config.Rule.DefaultRetention.Mode = lockConfigOpts.mode;\n        }\n        if (lockConfigOpts.unit === RETENTION_VALIDITY_UNITS.DAYS) {\n          config.Rule.DefaultRetention.Days = lockConfigOpts.validity;\n        } else if (lockConfigOpts.unit === RETENTION_VALIDITY_UNITS.YEARS) {\n          config.Rule.DefaultRetention.Years = lockConfigOpts.validity;\n        }\n      }\n    }\n    const builder = new xml2js.Builder({\n      rootName: 'ObjectLockConfiguration',\n      renderOpts: {\n        pretty: false\n      },\n      headless: true\n    });\n    const payload = builder.buildObject(config);\n    const headers = {};\n    headers['Content-MD5'] = toMd5(payload);\n    await this.makeRequestAsyncOmit({\n      method,\n      bucketName,\n      query,\n      headers\n    }, payload);\n  }\n  async getBucketVersioning(bucketName) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    const method = 'GET';\n    const query = 'versioning';\n    const httpRes = await this.makeRequestAsync({\n      method,\n      bucketName,\n      query\n    });\n    const xmlResult = await readAsString(httpRes);\n    return await xmlParsers.parseBucketVersioningConfig(xmlResult);\n  }\n  async setBucketVersioning(bucketName, versionConfig) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!Object.keys(versionConfig).length) {\n      throw new errors.InvalidArgumentError('versionConfig should be of type \"object\"');\n    }\n    const method = 'PUT';\n    const query = 'versioning';\n    const builder = new xml2js.Builder({\n      rootName: 'VersioningConfiguration',\n      renderOpts: {\n        pretty: false\n      },\n      headless: true\n    });\n    const payload = builder.buildObject(versionConfig);\n    await this.makeRequestAsyncOmit({\n      method,\n      bucketName,\n      query\n    }, payload);\n  }\n  async setTagging(taggingParams) {\n    const {\n      bucketName,\n      objectName,\n      tags,\n      putOpts\n    } = taggingParams;\n    const method = 'PUT';\n    let query = 'tagging';\n    if (putOpts && putOpts !== null && putOpts !== void 0 && putOpts.versionId) {\n      query = `${query}&versionId=${putOpts.versionId}`;\n    }\n    const tagsList = [];\n    for (const [key, value] of Object.entries(tags)) {\n      tagsList.push({\n        Key: key,\n        Value: value\n      });\n    }\n    const taggingConfig = {\n      Tagging: {\n        TagSet: {\n          Tag: tagsList\n        }\n      }\n    };\n    const headers = {};\n    const builder = new xml2js.Builder({\n      headless: true,\n      renderOpts: {\n        pretty: false\n      }\n    });\n    const payloadBuf = Buffer.from(builder.buildObject(taggingConfig));\n    const requestOptions = {\n      method,\n      bucketName,\n      query,\n      headers,\n      ...(objectName && {\n        objectName: objectName\n      })\n    };\n    headers['Content-MD5'] = toMd5(payloadBuf);\n    await this.makeRequestAsyncOmit(requestOptions, payloadBuf);\n  }\n  async removeTagging({\n    bucketName,\n    objectName,\n    removeOpts\n  }) {\n    const method = 'DELETE';\n    let query = 'tagging';\n    if (removeOpts && Object.keys(removeOpts).length && removeOpts.versionId) {\n      query = `${query}&versionId=${removeOpts.versionId}`;\n    }\n    const requestOptions = {\n      method,\n      bucketName,\n      objectName,\n      query\n    };\n    if (objectName) {\n      requestOptions['objectName'] = objectName;\n    }\n    await this.makeRequestAsync(requestOptions, '', [200, 204]);\n  }\n  async setBucketTagging(bucketName, tags) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isObject(tags)) {\n      throw new errors.InvalidArgumentError('tags should be of type \"object\"');\n    }\n    if (Object.keys(tags).length > 10) {\n      throw new errors.InvalidArgumentError('maximum tags allowed is 10\"');\n    }\n    await this.setTagging({\n      bucketName,\n      tags\n    });\n  }\n  async removeBucketTagging(bucketName) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    await this.removeTagging({\n      bucketName\n    });\n  }\n  async setObjectTagging(bucketName, objectName, tags, putOpts) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidBucketNameError('Invalid object name: ' + objectName);\n    }\n    if (!isObject(tags)) {\n      throw new errors.InvalidArgumentError('tags should be of type \"object\"');\n    }\n    if (Object.keys(tags).length > 10) {\n      throw new errors.InvalidArgumentError('Maximum tags allowed is 10\"');\n    }\n    await this.setTagging({\n      bucketName,\n      objectName,\n      tags,\n      putOpts\n    });\n  }\n  async removeObjectTagging(bucketName, objectName, removeOpts) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidBucketNameError('Invalid object name: ' + objectName);\n    }\n    if (removeOpts && Object.keys(removeOpts).length && !isObject(removeOpts)) {\n      throw new errors.InvalidArgumentError('removeOpts should be of type \"object\"');\n    }\n    await this.removeTagging({\n      bucketName,\n      objectName,\n      removeOpts\n    });\n  }\n  async selectObjectContent(bucketName, objectName, selectOpts) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError(`Invalid bucket name: ${bucketName}`);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n    }\n    if (!_.isEmpty(selectOpts)) {\n      if (!isString(selectOpts.expression)) {\n        throw new TypeError('sqlExpression should be of type \"string\"');\n      }\n      if (!_.isEmpty(selectOpts.inputSerialization)) {\n        if (!isObject(selectOpts.inputSerialization)) {\n          throw new TypeError('inputSerialization should be of type \"object\"');\n        }\n      } else {\n        throw new TypeError('inputSerialization is required');\n      }\n      if (!_.isEmpty(selectOpts.outputSerialization)) {\n        if (!isObject(selectOpts.outputSerialization)) {\n          throw new TypeError('outputSerialization should be of type \"object\"');\n        }\n      } else {\n        throw new TypeError('outputSerialization is required');\n      }\n    } else {\n      throw new TypeError('valid select configuration is required');\n    }\n    const method = 'POST';\n    const query = `select&select-type=2`;\n    const config = [{\n      Expression: selectOpts.expression\n    }, {\n      ExpressionType: selectOpts.expressionType || 'SQL'\n    }, {\n      InputSerialization: [selectOpts.inputSerialization]\n    }, {\n      OutputSerialization: [selectOpts.outputSerialization]\n    }];\n\n    // Optional\n    if (selectOpts.requestProgress) {\n      config.push({\n        RequestProgress: selectOpts === null || selectOpts === void 0 ? void 0 : selectOpts.requestProgress\n      });\n    }\n    // Optional\n    if (selectOpts.scanRange) {\n      config.push({\n        ScanRange: selectOpts.scanRange\n      });\n    }\n    const builder = new xml2js.Builder({\n      rootName: 'SelectObjectContentRequest',\n      renderOpts: {\n        pretty: false\n      },\n      headless: true\n    });\n    const payload = builder.buildObject(config);\n    const res = await this.makeRequestAsync({\n      method,\n      bucketName,\n      objectName,\n      query\n    }, payload);\n    const body = await readAsBuffer(res);\n    return parseSelectObjectContentResponse(body);\n  }\n  async applyBucketLifecycle(bucketName, policyConfig) {\n    const method = 'PUT';\n    const query = 'lifecycle';\n    const headers = {};\n    const builder = new xml2js.Builder({\n      rootName: 'LifecycleConfiguration',\n      headless: true,\n      renderOpts: {\n        pretty: false\n      }\n    });\n    const payload = builder.buildObject(policyConfig);\n    headers['Content-MD5'] = toMd5(payload);\n    await this.makeRequestAsyncOmit({\n      method,\n      bucketName,\n      query,\n      headers\n    }, payload);\n  }\n  async removeBucketLifecycle(bucketName) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    const method = 'DELETE';\n    const query = 'lifecycle';\n    await this.makeRequestAsyncOmit({\n      method,\n      bucketName,\n      query\n    }, '', [204]);\n  }\n  async setBucketLifecycle(bucketName, lifeCycleConfig) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (_.isEmpty(lifeCycleConfig)) {\n      await this.removeBucketLifecycle(bucketName);\n    } else {\n      await this.applyBucketLifecycle(bucketName, lifeCycleConfig);\n    }\n  }\n  async getBucketLifecycle(bucketName) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    const method = 'GET';\n    const query = 'lifecycle';\n    const res = await this.makeRequestAsync({\n      method,\n      bucketName,\n      query\n    });\n    const body = await readAsString(res);\n    return xmlParsers.parseLifecycleConfig(body);\n  }\n  async setBucketEncryption(bucketName, encryptionConfig) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!_.isEmpty(encryptionConfig) && encryptionConfig.Rule.length > 1) {\n      throw new errors.InvalidArgumentError('Invalid Rule length. Only one rule is allowed.: ' + encryptionConfig.Rule);\n    }\n    let encryptionObj = encryptionConfig;\n    if (_.isEmpty(encryptionConfig)) {\n      encryptionObj = {\n        // Default MinIO Server Supported Rule\n        Rule: [{\n          ApplyServerSideEncryptionByDefault: {\n            SSEAlgorithm: 'AES256'\n          }\n        }]\n      };\n    }\n    const method = 'PUT';\n    const query = 'encryption';\n    const builder = new xml2js.Builder({\n      rootName: 'ServerSideEncryptionConfiguration',\n      renderOpts: {\n        pretty: false\n      },\n      headless: true\n    });\n    const payload = builder.buildObject(encryptionObj);\n    const headers = {};\n    headers['Content-MD5'] = toMd5(payload);\n    await this.makeRequestAsyncOmit({\n      method,\n      bucketName,\n      query,\n      headers\n    }, payload);\n  }\n  async getBucketEncryption(bucketName) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    const method = 'GET';\n    const query = 'encryption';\n    const res = await this.makeRequestAsync({\n      method,\n      bucketName,\n      query\n    });\n    const body = await readAsString(res);\n    return xmlParsers.parseBucketEncryptionConfig(body);\n  }\n  async removeBucketEncryption(bucketName) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    const method = 'DELETE';\n    const query = 'encryption';\n    await this.makeRequestAsyncOmit({\n      method,\n      bucketName,\n      query\n    }, '', [204]);\n  }\n  async getObjectRetention(bucketName, objectName, getOpts) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n    }\n    if (getOpts && !isObject(getOpts)) {\n      throw new errors.InvalidArgumentError('getOpts should be of type \"object\"');\n    } else if (getOpts !== null && getOpts !== void 0 && getOpts.versionId && !isString(getOpts.versionId)) {\n      throw new errors.InvalidArgumentError('versionId should be of type \"string\"');\n    }\n    const method = 'GET';\n    let query = 'retention';\n    if (getOpts !== null && getOpts !== void 0 && getOpts.versionId) {\n      query += `&versionId=${getOpts.versionId}`;\n    }\n    const res = await this.makeRequestAsync({\n      method,\n      bucketName,\n      objectName,\n      query\n    });\n    const body = await readAsString(res);\n    return xmlParsers.parseObjectRetentionConfig(body);\n  }\n  async removeObjects(bucketName, objectsList) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!Array.isArray(objectsList)) {\n      throw new errors.InvalidArgumentError('objectsList should be a list');\n    }\n    const runDeleteObjects = async batch => {\n      const delObjects = batch.map(value => {\n        return isObject(value) ? {\n          Key: value.name,\n          VersionId: value.versionId\n        } : {\n          Key: value\n        };\n      });\n      const remObjects = {\n        Delete: {\n          Quiet: true,\n          Object: delObjects\n        }\n      };\n      const payload = Buffer.from(new xml2js.Builder({\n        headless: true\n      }).buildObject(remObjects));\n      const headers = {\n        'Content-MD5': toMd5(payload)\n      };\n      const res = await this.makeRequestAsync({\n        method: 'POST',\n        bucketName,\n        query: 'delete',\n        headers\n      }, payload);\n      const body = await readAsString(res);\n      return xmlParsers.removeObjectsParser(body);\n    };\n    const maxEntries = 1000; // max entries accepted in server for DeleteMultipleObjects API.\n    // Client side batching\n    const batches = [];\n    for (let i = 0; i < objectsList.length; i += maxEntries) {\n      batches.push(objectsList.slice(i, i + maxEntries));\n    }\n    const batchResults = await Promise.all(batches.map(runDeleteObjects));\n    return batchResults.flat();\n  }\n  async removeIncompleteUpload(bucketName, objectName) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.IsValidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n    }\n    const removeUploadId = await this.findUploadId(bucketName, objectName);\n    const method = 'DELETE';\n    const query = `uploadId=${removeUploadId}`;\n    await this.makeRequestAsyncOmit({\n      method,\n      bucketName,\n      objectName,\n      query\n    }, '', [204]);\n  }\n  async copyObjectV1(targetBucketName, targetObjectName, sourceBucketNameAndObjectName, conditions) {\n    if (typeof conditions == 'function') {\n      conditions = null;\n    }\n    if (!isValidBucketName(targetBucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + targetBucketName);\n    }\n    if (!isValidObjectName(targetObjectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${targetObjectName}`);\n    }\n    if (!isString(sourceBucketNameAndObjectName)) {\n      throw new TypeError('sourceBucketNameAndObjectName should be of type \"string\"');\n    }\n    if (sourceBucketNameAndObjectName === '') {\n      throw new errors.InvalidPrefixError(`Empty source prefix`);\n    }\n    if (conditions != null && !(conditions instanceof CopyConditions)) {\n      throw new TypeError('conditions should be of type \"CopyConditions\"');\n    }\n    const headers = {};\n    headers['x-amz-copy-source'] = uriResourceEscape(sourceBucketNameAndObjectName);\n    if (conditions) {\n      if (conditions.modified !== '') {\n        headers['x-amz-copy-source-if-modified-since'] = conditions.modified;\n      }\n      if (conditions.unmodified !== '') {\n        headers['x-amz-copy-source-if-unmodified-since'] = conditions.unmodified;\n      }\n      if (conditions.matchETag !== '') {\n        headers['x-amz-copy-source-if-match'] = conditions.matchETag;\n      }\n      if (conditions.matchETagExcept !== '') {\n        headers['x-amz-copy-source-if-none-match'] = conditions.matchETagExcept;\n      }\n    }\n    const method = 'PUT';\n    const res = await this.makeRequestAsync({\n      method,\n      bucketName: targetBucketName,\n      objectName: targetObjectName,\n      headers\n    });\n    const body = await readAsString(res);\n    return xmlParsers.parseCopyObject(body);\n  }\n  async copyObjectV2(sourceConfig, destConfig) {\n    if (!(sourceConfig instanceof CopySourceOptions)) {\n      throw new errors.InvalidArgumentError('sourceConfig should of type CopySourceOptions ');\n    }\n    if (!(destConfig instanceof CopyDestinationOptions)) {\n      throw new errors.InvalidArgumentError('destConfig should of type CopyDestinationOptions ');\n    }\n    if (!destConfig.validate()) {\n      return Promise.reject();\n    }\n    if (!destConfig.validate()) {\n      return Promise.reject();\n    }\n    const headers = Object.assign({}, sourceConfig.getHeaders(), destConfig.getHeaders());\n    const bucketName = destConfig.Bucket;\n    const objectName = destConfig.Object;\n    const method = 'PUT';\n    const res = await this.makeRequestAsync({\n      method,\n      bucketName,\n      objectName,\n      headers\n    });\n    const body = await readAsString(res);\n    const copyRes = xmlParsers.parseCopyObject(body);\n    const resHeaders = res.headers;\n    const sizeHeaderValue = resHeaders && resHeaders['content-length'];\n    const size = typeof sizeHeaderValue === 'number' ? sizeHeaderValue : undefined;\n    return {\n      Bucket: destConfig.Bucket,\n      Key: destConfig.Object,\n      LastModified: copyRes.lastModified,\n      MetaData: extractMetadata(resHeaders),\n      VersionId: getVersionId(resHeaders),\n      SourceVersionId: getSourceVersionId(resHeaders),\n      Etag: sanitizeETag(resHeaders.etag),\n      Size: size\n    };\n  }\n  async copyObject(...allArgs) {\n    if (typeof allArgs[0] === 'string') {\n      const [targetBucketName, targetObjectName, sourceBucketNameAndObjectName, conditions] = allArgs;\n      return await this.copyObjectV1(targetBucketName, targetObjectName, sourceBucketNameAndObjectName, conditions);\n    }\n    const [source, dest] = allArgs;\n    return await this.copyObjectV2(source, dest);\n  }\n  async uploadPart(partConfig, payload) {\n    const {\n      bucketName,\n      objectName,\n      uploadID,\n      partNumber,\n      headers\n    } = partConfig;\n    const method = 'PUT';\n    const query = `uploadId=${uploadID}&partNumber=${partNumber}`;\n    const requestOptions = {\n      method,\n      bucketName,\n      objectName: objectName,\n      query,\n      headers\n    };\n    const res = await this.makeRequestAsync(requestOptions, payload);\n    const body = await readAsString(res);\n    const partRes = uploadPartParser(body);\n    return {\n      etag: sanitizeETag(partRes.ETag),\n      key: objectName,\n      part: partNumber\n    };\n  }\n  async composeObject(destObjConfig, sourceObjList) {\n    const sourceFilesLength = sourceObjList.length;\n    if (!Array.isArray(sourceObjList)) {\n      throw new errors.InvalidArgumentError('sourceConfig should an array of CopySourceOptions ');\n    }\n    if (!(destObjConfig instanceof CopyDestinationOptions)) {\n      throw new errors.InvalidArgumentError('destConfig should of type CopyDestinationOptions ');\n    }\n    if (sourceFilesLength < 1 || sourceFilesLength > PART_CONSTRAINTS.MAX_PARTS_COUNT) {\n      throw new errors.InvalidArgumentError(`\"There must be as least one and up to ${PART_CONSTRAINTS.MAX_PARTS_COUNT} source objects.`);\n    }\n    for (let i = 0; i < sourceFilesLength; i++) {\n      const sObj = sourceObjList[i];\n      if (!sObj.validate()) {\n        return false;\n      }\n    }\n    if (!destObjConfig.validate()) {\n      return false;\n    }\n    const getStatOptions = srcConfig => {\n      let statOpts = {};\n      if (!_.isEmpty(srcConfig.VersionID)) {\n        statOpts = {\n          versionId: srcConfig.VersionID\n        };\n      }\n      return statOpts;\n    };\n    const srcObjectSizes = [];\n    let totalSize = 0;\n    let totalParts = 0;\n    const sourceObjStats = sourceObjList.map(srcItem => this.statObject(srcItem.Bucket, srcItem.Object, getStatOptions(srcItem)));\n    const srcObjectInfos = await Promise.all(sourceObjStats);\n    const validatedStats = srcObjectInfos.map((resItemStat, index) => {\n      const srcConfig = sourceObjList[index];\n      let srcCopySize = resItemStat.size;\n      // Check if a segment is specified, and if so, is the\n      // segment within object bounds?\n      if (srcConfig && srcConfig.MatchRange) {\n        // Since range is specified,\n        //    0 <= src.srcStart <= src.srcEnd\n        // so only invalid case to check is:\n        const srcStart = srcConfig.Start;\n        const srcEnd = srcConfig.End;\n        if (srcEnd >= srcCopySize || srcStart < 0) {\n          throw new errors.InvalidArgumentError(`CopySrcOptions ${index} has invalid segment-to-copy [${srcStart}, ${srcEnd}] (size is ${srcCopySize})`);\n        }\n        srcCopySize = srcEnd - srcStart + 1;\n      }\n\n      // Only the last source may be less than `absMinPartSize`\n      if (srcCopySize < PART_CONSTRAINTS.ABS_MIN_PART_SIZE && index < sourceFilesLength - 1) {\n        throw new errors.InvalidArgumentError(`CopySrcOptions ${index} is too small (${srcCopySize}) and it is not the last part.`);\n      }\n\n      // Is data to copy too large?\n      totalSize += srcCopySize;\n      if (totalSize > PART_CONSTRAINTS.MAX_MULTIPART_PUT_OBJECT_SIZE) {\n        throw new errors.InvalidArgumentError(`Cannot compose an object of size ${totalSize} (> 5TiB)`);\n      }\n\n      // record source size\n      srcObjectSizes[index] = srcCopySize;\n\n      // calculate parts needed for current source\n      totalParts += partsRequired(srcCopySize);\n      // Do we need more parts than we are allowed?\n      if (totalParts > PART_CONSTRAINTS.MAX_PARTS_COUNT) {\n        throw new errors.InvalidArgumentError(`Your proposed compose object requires more than ${PART_CONSTRAINTS.MAX_PARTS_COUNT} parts`);\n      }\n      return resItemStat;\n    });\n    if (totalParts === 1 && totalSize <= PART_CONSTRAINTS.MAX_PART_SIZE || totalSize === 0) {\n      return await this.copyObject(sourceObjList[0], destObjConfig); // use copyObjectV2\n    }\n\n    // preserve etag to avoid modification of object while copying.\n    for (let i = 0; i < sourceFilesLength; i++) {\n      ;\n      sourceObjList[i].MatchETag = validatedStats[i].etag;\n    }\n    const splitPartSizeList = validatedStats.map((resItemStat, idx) => {\n      return calculateEvenSplits(srcObjectSizes[idx], sourceObjList[idx]);\n    });\n    const getUploadPartConfigList = uploadId => {\n      const uploadPartConfigList = [];\n      splitPartSizeList.forEach((splitSize, splitIndex) => {\n        if (splitSize) {\n          const {\n            startIndex: startIdx,\n            endIndex: endIdx,\n            objInfo: objConfig\n          } = splitSize;\n          const partIndex = splitIndex + 1; // part index starts from 1.\n          const totalUploads = Array.from(startIdx);\n          const headers = sourceObjList[splitIndex].getHeaders();\n          totalUploads.forEach((splitStart, upldCtrIdx) => {\n            const splitEnd = endIdx[upldCtrIdx];\n            const sourceObj = `${objConfig.Bucket}/${objConfig.Object}`;\n            headers['x-amz-copy-source'] = `${sourceObj}`;\n            headers['x-amz-copy-source-range'] = `bytes=${splitStart}-${splitEnd}`;\n            const uploadPartConfig = {\n              bucketName: destObjConfig.Bucket,\n              objectName: destObjConfig.Object,\n              uploadID: uploadId,\n              partNumber: partIndex,\n              headers: headers,\n              sourceObj: sourceObj\n            };\n            uploadPartConfigList.push(uploadPartConfig);\n          });\n        }\n      });\n      return uploadPartConfigList;\n    };\n    const uploadAllParts = async uploadList => {\n      const partUploads = uploadList.map(async item => {\n        return this.uploadPart(item);\n      });\n      // Process results here if needed\n      return await Promise.all(partUploads);\n    };\n    const performUploadParts = async uploadId => {\n      const uploadList = getUploadPartConfigList(uploadId);\n      const partsRes = await uploadAllParts(uploadList);\n      return partsRes.map(partCopy => ({\n        etag: partCopy.etag,\n        part: partCopy.part\n      }));\n    };\n    const newUploadHeaders = destObjConfig.getHeaders();\n    const uploadId = await this.initiateNewMultipartUpload(destObjConfig.Bucket, destObjConfig.Object, newUploadHeaders);\n    try {\n      const partsDone = await performUploadParts(uploadId);\n      return await this.completeMultipartUpload(destObjConfig.Bucket, destObjConfig.Object, uploadId, partsDone);\n    } catch (err) {\n      return await this.abortMultipartUpload(destObjConfig.Bucket, destObjConfig.Object, uploadId);\n    }\n  }\n  async presignedUrl(method, bucketName, objectName, expires, reqParams, requestDate) {\n    var _requestDate;\n    if (this.anonymous) {\n      throw new errors.AnonymousRequestError(`Presigned ${method} url cannot be generated for anonymous requests`);\n    }\n    if (!expires) {\n      expires = PRESIGN_EXPIRY_DAYS_MAX;\n    }\n    if (!reqParams) {\n      reqParams = {};\n    }\n    if (!requestDate) {\n      requestDate = new Date();\n    }\n\n    // Type assertions\n    if (expires && typeof expires !== 'number') {\n      throw new TypeError('expires should be of type \"number\"');\n    }\n    if (reqParams && typeof reqParams !== 'object') {\n      throw new TypeError('reqParams should be of type \"object\"');\n    }\n    if (requestDate && !(requestDate instanceof Date) || requestDate && isNaN((_requestDate = requestDate) === null || _requestDate === void 0 ? void 0 : _requestDate.getTime())) {\n      throw new TypeError('requestDate should be of type \"Date\" and valid');\n    }\n    const query = reqParams ? qs.stringify(reqParams) : undefined;\n    try {\n      const region = await this.getBucketRegionAsync(bucketName);\n      await this.checkAndRefreshCreds();\n      const reqOptions = this.getRequestOptions({\n        method,\n        region,\n        bucketName,\n        objectName,\n        query\n      });\n      return presignSignatureV4(reqOptions, this.accessKey, this.secretKey, this.sessionToken, region, requestDate, expires);\n    } catch (err) {\n      if (err instanceof errors.InvalidBucketNameError) {\n        throw new errors.InvalidArgumentError(`Unable to get bucket region for ${bucketName}.`);\n      }\n      throw err;\n    }\n  }\n  async presignedGetObject(bucketName, objectName, expires, respHeaders, requestDate) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n    }\n    const validRespHeaders = ['response-content-type', 'response-content-language', 'response-expires', 'response-cache-control', 'response-content-disposition', 'response-content-encoding'];\n    validRespHeaders.forEach(header => {\n      // @ts-ignore\n      if (respHeaders !== undefined && respHeaders[header] !== undefined && !isString(respHeaders[header])) {\n        throw new TypeError(`response header ${header} should be of type \"string\"`);\n      }\n    });\n    return this.presignedUrl('GET', bucketName, objectName, expires, respHeaders, requestDate);\n  }\n  async presignedPutObject(bucketName, objectName, expires) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError(`Invalid bucket name: ${bucketName}`);\n    }\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name: ${objectName}`);\n    }\n    return this.presignedUrl('PUT', bucketName, objectName, expires);\n  }\n  newPostPolicy() {\n    return new PostPolicy();\n  }\n  async presignedPostPolicy(postPolicy) {\n    if (this.anonymous) {\n      throw new errors.AnonymousRequestError('Presigned POST policy cannot be generated for anonymous requests');\n    }\n    if (!isObject(postPolicy)) {\n      throw new TypeError('postPolicy should be of type \"object\"');\n    }\n    const bucketName = postPolicy.formData.bucket;\n    try {\n      const region = await this.getBucketRegionAsync(bucketName);\n      const date = new Date();\n      const dateStr = makeDateLong(date);\n      await this.checkAndRefreshCreds();\n      if (!postPolicy.policy.expiration) {\n        // 'expiration' is mandatory field for S3.\n        // Set default expiration date of 7 days.\n        const expires = new Date();\n        expires.setSeconds(PRESIGN_EXPIRY_DAYS_MAX);\n        postPolicy.setExpires(expires);\n      }\n      postPolicy.policy.conditions.push(['eq', '$x-amz-date', dateStr]);\n      postPolicy.formData['x-amz-date'] = dateStr;\n      postPolicy.policy.conditions.push(['eq', '$x-amz-algorithm', 'AWS4-HMAC-SHA256']);\n      postPolicy.formData['x-amz-algorithm'] = 'AWS4-HMAC-SHA256';\n      postPolicy.policy.conditions.push(['eq', '$x-amz-credential', this.accessKey + '/' + getScope(region, date)]);\n      postPolicy.formData['x-amz-credential'] = this.accessKey + '/' + getScope(region, date);\n      if (this.sessionToken) {\n        postPolicy.policy.conditions.push(['eq', '$x-amz-security-token', this.sessionToken]);\n        postPolicy.formData['x-amz-security-token'] = this.sessionToken;\n      }\n      const policyBase64 = Buffer.from(JSON.stringify(postPolicy.policy)).toString('base64');\n      postPolicy.formData.policy = policyBase64;\n      postPolicy.formData['x-amz-signature'] = postPresignSignatureV4(region, date, this.secretKey, policyBase64);\n      const opts = {\n        region: region,\n        bucketName: bucketName,\n        method: 'POST'\n      };\n      const reqOptions = this.getRequestOptions(opts);\n      const portStr = this.port == 80 || this.port === 443 ? '' : `:${this.port.toString()}`;\n      const urlStr = `${reqOptions.protocol}//${reqOptions.host}${portStr}${reqOptions.path}`;\n      return {\n        postURL: urlStr,\n        formData: postPolicy.formData\n      };\n    } catch (err) {\n      if (err instanceof errors.InvalidBucketNameError) {\n        throw new errors.InvalidArgumentError(`Unable to get bucket region for ${bucketName}.`);\n      }\n      throw err;\n    }\n  }\n  // list a batch of objects\n  async listObjectsQuery(bucketName, prefix, marker, listQueryOpts) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isString(prefix)) {\n      throw new TypeError('prefix should be of type \"string\"');\n    }\n    if (!isString(marker)) {\n      throw new TypeError('marker should be of type \"string\"');\n    }\n    if (listQueryOpts && !isObject(listQueryOpts)) {\n      throw new TypeError('listQueryOpts should be of type \"object\"');\n    }\n    let {\n      Delimiter,\n      MaxKeys,\n      IncludeVersion\n    } = listQueryOpts;\n    if (!isString(Delimiter)) {\n      throw new TypeError('Delimiter should be of type \"string\"');\n    }\n    if (!isNumber(MaxKeys)) {\n      throw new TypeError('MaxKeys should be of type \"number\"');\n    }\n    const queries = [];\n    // escape every value in query string, except maxKeys\n    queries.push(`prefix=${uriEscape(prefix)}`);\n    queries.push(`delimiter=${uriEscape(Delimiter)}`);\n    queries.push(`encoding-type=url`);\n    if (IncludeVersion) {\n      queries.push(`versions`);\n    }\n    if (marker) {\n      marker = uriEscape(marker);\n      if (IncludeVersion) {\n        queries.push(`key-marker=${marker}`);\n      } else {\n        queries.push(`marker=${marker}`);\n      }\n    }\n\n    // no need to escape maxKeys\n    if (MaxKeys) {\n      if (MaxKeys >= 1000) {\n        MaxKeys = 1000;\n      }\n      queries.push(`max-keys=${MaxKeys}`);\n    }\n    queries.sort();\n    let query = '';\n    if (queries.length > 0) {\n      query = `${queries.join('&')}`;\n    }\n    const method = 'GET';\n    const res = await this.makeRequestAsync({\n      method,\n      bucketName,\n      query\n    });\n    const body = await readAsString(res);\n    const listQryList = parseListObjects(body);\n    return listQryList;\n  }\n  listObjects(bucketName, prefix, recursive, listOpts) {\n    if (prefix === undefined) {\n      prefix = '';\n    }\n    if (recursive === undefined) {\n      recursive = false;\n    }\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidPrefix(prefix)) {\n      throw new errors.InvalidPrefixError(`Invalid prefix : ${prefix}`);\n    }\n    if (!isString(prefix)) {\n      throw new TypeError('prefix should be of type \"string\"');\n    }\n    if (!isBoolean(recursive)) {\n      throw new TypeError('recursive should be of type \"boolean\"');\n    }\n    if (listOpts && !isObject(listOpts)) {\n      throw new TypeError('listOpts should be of type \"object\"');\n    }\n    let marker = '';\n    const listQueryOpts = {\n      Delimiter: recursive ? '' : '/',\n      // if recursive is false set delimiter to '/'\n      MaxKeys: 1000,\n      IncludeVersion: listOpts === null || listOpts === void 0 ? void 0 : listOpts.IncludeVersion\n    };\n    let objects = [];\n    let ended = false;\n    const readStream = new stream.Readable({\n      objectMode: true\n    });\n    readStream._read = async () => {\n      // push one object per _read()\n      if (objects.length) {\n        readStream.push(objects.shift());\n        return;\n      }\n      if (ended) {\n        return readStream.push(null);\n      }\n      try {\n        const result = await this.listObjectsQuery(bucketName, prefix, marker, listQueryOpts);\n        if (result.isTruncated) {\n          marker = result.nextMarker || result.versionIdMarker;\n        } else {\n          ended = true;\n        }\n        if (result.objects) {\n          objects = result.objects;\n        }\n        // @ts-ignore\n        readStream._read();\n      } catch (err) {\n        readStream.emit('error', err);\n      }\n    };\n    return readStream;\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcnlwdG8iLCJmcyIsImh0dHAiLCJodHRwcyIsInBhdGgiLCJzdHJlYW0iLCJhc3luYyIsIkJsb2NrU3RyZWFtMiIsImlzQnJvd3NlciIsIl8iLCJxcyIsInhtbDJqcyIsIkNyZWRlbnRpYWxQcm92aWRlciIsImVycm9ycyIsIkNvcHlEZXN0aW5hdGlvbk9wdGlvbnMiLCJDb3B5U291cmNlT3B0aW9ucyIsIkRFRkFVTFRfUkVHSU9OIiwiTEVHQUxfSE9MRF9TVEFUVVMiLCJQUkVTSUdOX0VYUElSWV9EQVlTX01BWCIsIlJFVEVOVElPTl9NT0RFUyIsIlJFVEVOVElPTl9WQUxJRElUWV9VTklUUyIsInBvc3RQcmVzaWduU2lnbmF0dXJlVjQiLCJwcmVzaWduU2lnbmF0dXJlVjQiLCJzaWduVjQiLCJmc3AiLCJzdHJlYW1Qcm9taXNlIiwiQ29weUNvbmRpdGlvbnMiLCJFeHRlbnNpb25zIiwiY2FsY3VsYXRlRXZlblNwbGl0cyIsImV4dHJhY3RNZXRhZGF0YSIsImdldENvbnRlbnRMZW5ndGgiLCJnZXRTY29wZSIsImdldFNvdXJjZVZlcnNpb25JZCIsImdldFZlcnNpb25JZCIsImhhc2hCaW5hcnkiLCJpbnNlcnRDb250ZW50VHlwZSIsImlzQW1hem9uRW5kcG9pbnQiLCJpc0Jvb2xlYW4iLCJpc0RlZmluZWQiLCJpc0VtcHR5IiwiaXNOdW1iZXIiLCJpc09iamVjdCIsImlzUmVhZGFibGVTdHJlYW0iLCJpc1N0cmluZyIsImlzVmFsaWRCdWNrZXROYW1lIiwiaXNWYWxpZEVuZHBvaW50IiwiaXNWYWxpZE9iamVjdE5hbWUiLCJpc1ZhbGlkUG9ydCIsImlzVmFsaWRQcmVmaXgiLCJpc1ZpcnR1YWxIb3N0U3R5bGUiLCJtYWtlRGF0ZUxvbmciLCJQQVJUX0NPTlNUUkFJTlRTIiwicGFydHNSZXF1aXJlZCIsInByZXBlbmRYQU1aTWV0YSIsInJlYWRhYmxlU3RyZWFtIiwic2FuaXRpemVFVGFnIiwidG9NZDUiLCJ0b1NoYTI1NiIsInVyaUVzY2FwZSIsInVyaVJlc291cmNlRXNjYXBlIiwiam9pbkhvc3RQb3J0IiwiUG9zdFBvbGljeSIsInJlcXVlc3RXaXRoUmV0cnkiLCJkcmFpblJlc3BvbnNlIiwicmVhZEFzQnVmZmVyIiwicmVhZEFzU3RyaW5nIiwiZ2V0UzNFbmRwb2ludCIsInBhcnNlQ29tcGxldGVNdWx0aXBhcnQiLCJwYXJzZUluaXRpYXRlTXVsdGlwYXJ0IiwicGFyc2VMaXN0T2JqZWN0cyIsInBhcnNlT2JqZWN0TGVnYWxIb2xkQ29uZmlnIiwicGFyc2VTZWxlY3RPYmplY3RDb250ZW50UmVzcG9uc2UiLCJ1cGxvYWRQYXJ0UGFyc2VyIiwieG1sUGFyc2VycyIsInhtbCIsIkJ1aWxkZXIiLCJyZW5kZXJPcHRzIiwicHJldHR5IiwiaGVhZGxlc3MiLCJQYWNrYWdlIiwidmVyc2lvbiIsInJlcXVlc3RPcHRpb25Qcm9wZXJ0aWVzIiwiVHlwZWRDbGllbnQiLCJwYXJ0U2l6ZSIsIm1heGltdW1QYXJ0U2l6ZSIsIm1heE9iamVjdFNpemUiLCJjb25zdHJ1Y3RvciIsInBhcmFtcyIsInNlY3VyZSIsInVuZGVmaW5lZCIsIkVycm9yIiwidXNlU1NMIiwicG9ydCIsImVuZFBvaW50IiwiSW52YWxpZEVuZHBvaW50RXJyb3IiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsInJlZ2lvbiIsImhvc3QiLCJ0b0xvd2VyQ2FzZSIsInByb3RvY29sIiwidHJhbnNwb3J0IiwidHJhbnNwb3J0QWdlbnQiLCJnbG9iYWxBZ2VudCIsImxpYnJhcnlDb21tZW50cyIsInByb2Nlc3MiLCJwbGF0Zm9ybSIsImFyY2giLCJsaWJyYXJ5QWdlbnQiLCJ1c2VyQWdlbnQiLCJwYXRoU3R5bGUiLCJhY2Nlc3NLZXkiLCJzZWNyZXRLZXkiLCJzZXNzaW9uVG9rZW4iLCJhbm9ueW1vdXMiLCJjcmVkZW50aWFsc1Byb3ZpZGVyIiwicmVnaW9uTWFwIiwib3ZlclJpZGVQYXJ0U2l6ZSIsImVuYWJsZVNIQTI1NiIsInMzQWNjZWxlcmF0ZUVuZHBvaW50IiwicmVxT3B0aW9ucyIsImNsaWVudEV4dGVuc2lvbnMiLCJleHRlbnNpb25zIiwic2V0UzNUcmFuc2ZlckFjY2VsZXJhdGUiLCJzZXRSZXF1ZXN0T3B0aW9ucyIsIm9wdGlvbnMiLCJUeXBlRXJyb3IiLCJwaWNrIiwiZ2V0QWNjZWxlcmF0ZUVuZFBvaW50SWZTZXQiLCJidWNrZXROYW1lIiwib2JqZWN0TmFtZSIsImluY2x1ZGVzIiwic2V0QXBwSW5mbyIsImFwcE5hbWUiLCJhcHBWZXJzaW9uIiwidHJpbSIsImdldFJlcXVlc3RPcHRpb25zIiwib3B0cyIsIm1ldGhvZCIsImhlYWRlcnMiLCJxdWVyeSIsImFnZW50IiwidmlydHVhbEhvc3RTdHlsZSIsImFjY2VsZXJhdGVFbmRQb2ludCIsImsiLCJ2IiwiT2JqZWN0IiwiZW50cmllcyIsImFzc2lnbiIsIm1hcFZhbHVlcyIsInBpY2tCeSIsInRvU3RyaW5nIiwic2V0Q3JlZGVudGlhbHNQcm92aWRlciIsImNoZWNrQW5kUmVmcmVzaENyZWRzIiwiY3JlZGVudGlhbHNDb25mIiwiZ2V0Q3JlZGVudGlhbHMiLCJnZXRBY2Nlc3NLZXkiLCJnZXRTZWNyZXRLZXkiLCJnZXRTZXNzaW9uVG9rZW4iLCJlIiwiY2F1c2UiLCJsb2dIVFRQIiwicmVzcG9uc2UiLCJlcnIiLCJsb2dTdHJlYW0iLCJsb2dIZWFkZXJzIiwiZm9yRWFjaCIsInJlZGFjdG9yIiwiUmVnRXhwIiwicmVwbGFjZSIsIndyaXRlIiwic3RhdHVzQ29kZSIsImVyckpTT04iLCJKU09OIiwic3RyaW5naWZ5IiwidHJhY2VPbiIsInN0ZG91dCIsInRyYWNlT2ZmIiwibWFrZVJlcXVlc3RBc3luYyIsInBheWxvYWQiLCJleHBlY3RlZENvZGVzIiwibGVuZ3RoIiwic2hhMjU2c3VtIiwibWFrZVJlcXVlc3RTdHJlYW1Bc3luYyIsIm1ha2VSZXF1ZXN0QXN5bmNPbWl0Iiwic3RhdHVzQ29kZXMiLCJyZXMiLCJib2R5IiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJnZXRCdWNrZXRSZWdpb25Bc3luYyIsImRhdGUiLCJEYXRlIiwiYXV0aG9yaXphdGlvbiIsInBhcnNlUmVzcG9uc2VFcnJvciIsIkludmFsaWRCdWNrZXROYW1lRXJyb3IiLCJjYWNoZWQiLCJleHRyYWN0UmVnaW9uQXN5bmMiLCJwYXJzZUJ1Y2tldFJlZ2lvbiIsIlMzRXJyb3IiLCJlcnJDb2RlIiwiY29kZSIsImVyclJlZ2lvbiIsIm5hbWUiLCJSZWdpb24iLCJtYWtlUmVxdWVzdCIsInJldHVyblJlc3BvbnNlIiwiY2IiLCJwcm9tIiwidGhlbiIsInJlc3VsdCIsIm1ha2VSZXF1ZXN0U3RyZWFtIiwiZXhlY3V0b3IiLCJnZXRCdWNrZXRSZWdpb24iLCJtYWtlQnVja2V0IiwibWFrZU9wdHMiLCJidWlsZE9iamVjdCIsIkNyZWF0ZUJ1Y2tldENvbmZpZ3VyYXRpb24iLCIkIiwieG1sbnMiLCJMb2NhdGlvbkNvbnN0cmFpbnQiLCJPYmplY3RMb2NraW5nIiwiZmluYWxSZWdpb24iLCJyZXF1ZXN0T3B0IiwiYnVja2V0RXhpc3RzIiwicmVtb3ZlQnVja2V0IiwiZ2V0T2JqZWN0IiwiZ2V0T3B0cyIsIkludmFsaWRPYmplY3ROYW1lRXJyb3IiLCJnZXRQYXJ0aWFsT2JqZWN0Iiwib2Zmc2V0IiwicmFuZ2UiLCJzc2VIZWFkZXJzIiwiU1NFQ3VzdG9tZXJBbGdvcml0aG0iLCJTU0VDdXN0b21lcktleSIsIlNTRUN1c3RvbWVyS2V5TUQ1IiwiZXhwZWN0ZWRTdGF0dXNDb2RlcyIsInB1c2giLCJmR2V0T2JqZWN0IiwiZmlsZVBhdGgiLCJkb3dubG9hZFRvVG1wRmlsZSIsInBhcnRGaWxlU3RyZWFtIiwib2JqU3RhdCIsInN0YXRPYmplY3QiLCJlbmNvZGVkRXRhZyIsImZyb20iLCJldGFnIiwicGFydEZpbGUiLCJta2RpciIsImRpcm5hbWUiLCJyZWN1cnNpdmUiLCJzdGF0cyIsInN0YXQiLCJzaXplIiwiY3JlYXRlV3JpdGVTdHJlYW0iLCJmbGFncyIsImRvd25sb2FkU3RyZWFtIiwicGlwZWxpbmUiLCJyZW5hbWUiLCJzdGF0T3B0cyIsInN0YXRPcHREZWYiLCJwYXJzZUludCIsIm1ldGFEYXRhIiwibGFzdE1vZGlmaWVkIiwidmVyc2lvbklkIiwicmVtb3ZlT2JqZWN0IiwicmVtb3ZlT3B0cyIsImdvdmVybmFuY2VCeXBhc3MiLCJmb3JjZURlbGV0ZSIsInF1ZXJ5UGFyYW1zIiwibGlzdEluY29tcGxldGVVcGxvYWRzIiwiYnVja2V0IiwicHJlZml4IiwiSW52YWxpZFByZWZpeEVycm9yIiwiZGVsaW1pdGVyIiwia2V5TWFya2VyIiwidXBsb2FkSWRNYXJrZXIiLCJ1cGxvYWRzIiwiZW5kZWQiLCJyZWFkU3RyZWFtIiwiUmVhZGFibGUiLCJvYmplY3RNb2RlIiwiX3JlYWQiLCJzaGlmdCIsImxpc3RJbmNvbXBsZXRlVXBsb2Fkc1F1ZXJ5IiwicHJlZml4ZXMiLCJlYWNoU2VyaWVzIiwidXBsb2FkIiwibGlzdFBhcnRzIiwia2V5IiwidXBsb2FkSWQiLCJwYXJ0cyIsInJlZHVjZSIsImFjYyIsIml0ZW0iLCJlbWl0IiwiaXNUcnVuY2F0ZWQiLCJuZXh0S2V5TWFya2VyIiwibmV4dFVwbG9hZElkTWFya2VyIiwicXVlcmllcyIsIm1heFVwbG9hZHMiLCJzb3J0IiwidW5zaGlmdCIsImpvaW4iLCJwYXJzZUxpc3RNdWx0aXBhcnQiLCJpbml0aWF0ZU5ld011bHRpcGFydFVwbG9hZCIsImFib3J0TXVsdGlwYXJ0VXBsb2FkIiwicmVxdWVzdE9wdGlvbnMiLCJmaW5kVXBsb2FkSWQiLCJfbGF0ZXN0VXBsb2FkIiwibGF0ZXN0VXBsb2FkIiwiaW5pdGlhdGVkIiwiZ2V0VGltZSIsImNvbXBsZXRlTXVsdGlwYXJ0VXBsb2FkIiwiZXRhZ3MiLCJidWlsZGVyIiwiQ29tcGxldGVNdWx0aXBhcnRVcGxvYWQiLCJQYXJ0IiwibWFwIiwiUGFydE51bWJlciIsInBhcnQiLCJFVGFnIiwiZXJyTWVzc2FnZSIsIm1hcmtlciIsImxpc3RQYXJ0c1F1ZXJ5IiwicGFyc2VMaXN0UGFydHMiLCJsaXN0QnVja2V0cyIsInJlZ2lvbkNvbmYiLCJodHRwUmVzIiwieG1sUmVzdWx0IiwicGFyc2VMaXN0QnVja2V0IiwiY2FsY3VsYXRlUGFydFNpemUiLCJmUHV0T2JqZWN0IiwibHN0YXQiLCJwdXRPYmplY3QiLCJjcmVhdGVSZWFkU3RyZWFtIiwic3RhdFNpemUiLCJyZWFkYWJsZUxlbmd0aCIsImJ1ZiIsInVwbG9hZEJ1ZmZlciIsInVwbG9hZFN0cmVhbSIsIm1kNXN1bSIsIm9sZFBhcnRzIiwiZVRhZ3MiLCJwcmV2aW91c1VwbG9hZElkIiwib2xkVGFncyIsImNodW5raWVyIiwiemVyb1BhZGRpbmciLCJvIiwiUHJvbWlzZSIsImFsbCIsInJlc29sdmUiLCJyZWplY3QiLCJwaXBlIiwib24iLCJwYXJ0TnVtYmVyIiwiY2h1bmsiLCJtZDUiLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwiZGlnZXN0Iiwib2xkUGFydCIsInJlbW92ZUJ1Y2tldFJlcGxpY2F0aW9uIiwic2V0QnVja2V0UmVwbGljYXRpb24iLCJyZXBsaWNhdGlvbkNvbmZpZyIsInJvbGUiLCJydWxlcyIsInJlcGxpY2F0aW9uUGFyYW1zQ29uZmlnIiwiUmVwbGljYXRpb25Db25maWd1cmF0aW9uIiwiUm9sZSIsIlJ1bGUiLCJnZXRCdWNrZXRSZXBsaWNhdGlvbiIsInBhcnNlUmVwbGljYXRpb25Db25maWciLCJnZXRPYmplY3RMZWdhbEhvbGQiLCJrZXlzIiwic3RyUmVzIiwic2V0T2JqZWN0TGVnYWxIb2xkIiwic2V0T3B0cyIsInN0YXR1cyIsIkVOQUJMRUQiLCJESVNBQkxFRCIsImNvbmZpZyIsIlN0YXR1cyIsInJvb3ROYW1lIiwiZ2V0QnVja2V0VGFnZ2luZyIsInBhcnNlVGFnZ2luZyIsImdldE9iamVjdFRhZ2dpbmciLCJzZXRCdWNrZXRQb2xpY3kiLCJwb2xpY3kiLCJJbnZhbGlkQnVja2V0UG9saWN5RXJyb3IiLCJnZXRCdWNrZXRQb2xpY3kiLCJwdXRPYmplY3RSZXRlbnRpb24iLCJyZXRlbnRpb25PcHRzIiwibW9kZSIsIkNPTVBMSUFOQ0UiLCJHT1ZFUk5BTkNFIiwicmV0YWluVW50aWxEYXRlIiwiTW9kZSIsIlJldGFpblVudGlsRGF0ZSIsImdldE9iamVjdExvY2tDb25maWciLCJwYXJzZU9iamVjdExvY2tDb25maWciLCJzZXRPYmplY3RMb2NrQ29uZmlnIiwibG9ja0NvbmZpZ09wdHMiLCJyZXRlbnRpb25Nb2RlcyIsInZhbGlkVW5pdHMiLCJEQVlTIiwiWUVBUlMiLCJ1bml0IiwidmFsaWRpdHkiLCJPYmplY3RMb2NrRW5hYmxlZCIsImNvbmZpZ0tleXMiLCJpc0FsbEtleXNTZXQiLCJldmVyeSIsImxjayIsIkRlZmF1bHRSZXRlbnRpb24iLCJEYXlzIiwiWWVhcnMiLCJnZXRCdWNrZXRWZXJzaW9uaW5nIiwicGFyc2VCdWNrZXRWZXJzaW9uaW5nQ29uZmlnIiwic2V0QnVja2V0VmVyc2lvbmluZyIsInZlcnNpb25Db25maWciLCJzZXRUYWdnaW5nIiwidGFnZ2luZ1BhcmFtcyIsInRhZ3MiLCJwdXRPcHRzIiwidGFnc0xpc3QiLCJ2YWx1ZSIsIktleSIsIlZhbHVlIiwidGFnZ2luZ0NvbmZpZyIsIlRhZ2dpbmciLCJUYWdTZXQiLCJUYWciLCJwYXlsb2FkQnVmIiwicmVtb3ZlVGFnZ2luZyIsInNldEJ1Y2tldFRhZ2dpbmciLCJyZW1vdmVCdWNrZXRUYWdnaW5nIiwic2V0T2JqZWN0VGFnZ2luZyIsInJlbW92ZU9iamVjdFRhZ2dpbmciLCJzZWxlY3RPYmplY3RDb250ZW50Iiwic2VsZWN0T3B0cyIsImV4cHJlc3Npb24iLCJpbnB1dFNlcmlhbGl6YXRpb24iLCJvdXRwdXRTZXJpYWxpemF0aW9uIiwiRXhwcmVzc2lvbiIsIkV4cHJlc3Npb25UeXBlIiwiZXhwcmVzc2lvblR5cGUiLCJJbnB1dFNlcmlhbGl6YXRpb24iLCJPdXRwdXRTZXJpYWxpemF0aW9uIiwicmVxdWVzdFByb2dyZXNzIiwiUmVxdWVzdFByb2dyZXNzIiwic2NhblJhbmdlIiwiU2NhblJhbmdlIiwiYXBwbHlCdWNrZXRMaWZlY3ljbGUiLCJwb2xpY3lDb25maWciLCJyZW1vdmVCdWNrZXRMaWZlY3ljbGUiLCJzZXRCdWNrZXRMaWZlY3ljbGUiLCJsaWZlQ3ljbGVDb25maWciLCJnZXRCdWNrZXRMaWZlY3ljbGUiLCJwYXJzZUxpZmVjeWNsZUNvbmZpZyIsInNldEJ1Y2tldEVuY3J5cHRpb24iLCJlbmNyeXB0aW9uQ29uZmlnIiwiZW5jcnlwdGlvbk9iaiIsIkFwcGx5U2VydmVyU2lkZUVuY3J5cHRpb25CeURlZmF1bHQiLCJTU0VBbGdvcml0aG0iLCJnZXRCdWNrZXRFbmNyeXB0aW9uIiwicGFyc2VCdWNrZXRFbmNyeXB0aW9uQ29uZmlnIiwicmVtb3ZlQnVja2V0RW5jcnlwdGlvbiIsImdldE9iamVjdFJldGVudGlvbiIsInBhcnNlT2JqZWN0UmV0ZW50aW9uQ29uZmlnIiwicmVtb3ZlT2JqZWN0cyIsIm9iamVjdHNMaXN0IiwiQXJyYXkiLCJpc0FycmF5IiwicnVuRGVsZXRlT2JqZWN0cyIsImJhdGNoIiwiZGVsT2JqZWN0cyIsIlZlcnNpb25JZCIsInJlbU9iamVjdHMiLCJEZWxldGUiLCJRdWlldCIsInJlbW92ZU9iamVjdHNQYXJzZXIiLCJtYXhFbnRyaWVzIiwiYmF0Y2hlcyIsImkiLCJzbGljZSIsImJhdGNoUmVzdWx0cyIsImZsYXQiLCJyZW1vdmVJbmNvbXBsZXRlVXBsb2FkIiwiSXNWYWxpZEJ1Y2tldE5hbWVFcnJvciIsInJlbW92ZVVwbG9hZElkIiwiY29weU9iamVjdFYxIiwidGFyZ2V0QnVja2V0TmFtZSIsInRhcmdldE9iamVjdE5hbWUiLCJzb3VyY2VCdWNrZXROYW1lQW5kT2JqZWN0TmFtZSIsImNvbmRpdGlvbnMiLCJtb2RpZmllZCIsInVubW9kaWZpZWQiLCJtYXRjaEVUYWciLCJtYXRjaEVUYWdFeGNlcHQiLCJwYXJzZUNvcHlPYmplY3QiLCJjb3B5T2JqZWN0VjIiLCJzb3VyY2VDb25maWciLCJkZXN0Q29uZmlnIiwidmFsaWRhdGUiLCJnZXRIZWFkZXJzIiwiQnVja2V0IiwiY29weVJlcyIsInJlc0hlYWRlcnMiLCJzaXplSGVhZGVyVmFsdWUiLCJMYXN0TW9kaWZpZWQiLCJNZXRhRGF0YSIsIlNvdXJjZVZlcnNpb25JZCIsIkV0YWciLCJTaXplIiwiY29weU9iamVjdCIsImFsbEFyZ3MiLCJzb3VyY2UiLCJkZXN0IiwidXBsb2FkUGFydCIsInBhcnRDb25maWciLCJ1cGxvYWRJRCIsInBhcnRSZXMiLCJjb21wb3NlT2JqZWN0IiwiZGVzdE9iakNvbmZpZyIsInNvdXJjZU9iakxpc3QiLCJzb3VyY2VGaWxlc0xlbmd0aCIsIk1BWF9QQVJUU19DT1VOVCIsInNPYmoiLCJnZXRTdGF0T3B0aW9ucyIsInNyY0NvbmZpZyIsIlZlcnNpb25JRCIsInNyY09iamVjdFNpemVzIiwidG90YWxTaXplIiwidG90YWxQYXJ0cyIsInNvdXJjZU9ialN0YXRzIiwic3JjSXRlbSIsInNyY09iamVjdEluZm9zIiwidmFsaWRhdGVkU3RhdHMiLCJyZXNJdGVtU3RhdCIsImluZGV4Iiwic3JjQ29weVNpemUiLCJNYXRjaFJhbmdlIiwic3JjU3RhcnQiLCJTdGFydCIsInNyY0VuZCIsIkVuZCIsIkFCU19NSU5fUEFSVF9TSVpFIiwiTUFYX01VTFRJUEFSVF9QVVRfT0JKRUNUX1NJWkUiLCJNQVhfUEFSVF9TSVpFIiwiTWF0Y2hFVGFnIiwic3BsaXRQYXJ0U2l6ZUxpc3QiLCJpZHgiLCJnZXRVcGxvYWRQYXJ0Q29uZmlnTGlzdCIsInVwbG9hZFBhcnRDb25maWdMaXN0Iiwic3BsaXRTaXplIiwic3BsaXRJbmRleCIsInN0YXJ0SW5kZXgiLCJzdGFydElkeCIsImVuZEluZGV4IiwiZW5kSWR4Iiwib2JqSW5mbyIsIm9iakNvbmZpZyIsInBhcnRJbmRleCIsInRvdGFsVXBsb2FkcyIsInNwbGl0U3RhcnQiLCJ1cGxkQ3RySWR4Iiwic3BsaXRFbmQiLCJzb3VyY2VPYmoiLCJ1cGxvYWRQYXJ0Q29uZmlnIiwidXBsb2FkQWxsUGFydHMiLCJ1cGxvYWRMaXN0IiwicGFydFVwbG9hZHMiLCJwZXJmb3JtVXBsb2FkUGFydHMiLCJwYXJ0c1JlcyIsInBhcnRDb3B5IiwibmV3VXBsb2FkSGVhZGVycyIsInBhcnRzRG9uZSIsInByZXNpZ25lZFVybCIsImV4cGlyZXMiLCJyZXFQYXJhbXMiLCJyZXF1ZXN0RGF0ZSIsIl9yZXF1ZXN0RGF0ZSIsIkFub255bW91c1JlcXVlc3RFcnJvciIsImlzTmFOIiwicHJlc2lnbmVkR2V0T2JqZWN0IiwicmVzcEhlYWRlcnMiLCJ2YWxpZFJlc3BIZWFkZXJzIiwiaGVhZGVyIiwicHJlc2lnbmVkUHV0T2JqZWN0IiwibmV3UG9zdFBvbGljeSIsInByZXNpZ25lZFBvc3RQb2xpY3kiLCJwb3N0UG9saWN5IiwiZm9ybURhdGEiLCJkYXRlU3RyIiwiZXhwaXJhdGlvbiIsInNldFNlY29uZHMiLCJzZXRFeHBpcmVzIiwicG9saWN5QmFzZTY0IiwicG9ydFN0ciIsInVybFN0ciIsInBvc3RVUkwiLCJsaXN0T2JqZWN0c1F1ZXJ5IiwibGlzdFF1ZXJ5T3B0cyIsIkRlbGltaXRlciIsIk1heEtleXMiLCJJbmNsdWRlVmVyc2lvbiIsImxpc3RRcnlMaXN0IiwibGlzdE9iamVjdHMiLCJsaXN0T3B0cyIsIm9iamVjdHMiLCJuZXh0TWFya2VyIiwidmVyc2lvbklkTWFya2VyIl0sInNvdXJjZXMiOlsiY2xpZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNyeXB0byBmcm9tICdub2RlOmNyeXB0bydcbmltcG9ydCAqIGFzIGZzIGZyb20gJ25vZGU6ZnMnXG5pbXBvcnQgdHlwZSB7IEluY29taW5nSHR0cEhlYWRlcnMgfSBmcm9tICdub2RlOmh0dHAnXG5pbXBvcnQgKiBhcyBodHRwIGZyb20gJ25vZGU6aHR0cCdcbmltcG9ydCAqIGFzIGh0dHBzIGZyb20gJ25vZGU6aHR0cHMnXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ25vZGU6cGF0aCdcbmltcG9ydCAqIGFzIHN0cmVhbSBmcm9tICdub2RlOnN0cmVhbSdcblxuaW1wb3J0ICogYXMgYXN5bmMgZnJvbSAnYXN5bmMnXG5pbXBvcnQgQmxvY2tTdHJlYW0yIGZyb20gJ2Jsb2NrLXN0cmVhbTInXG5pbXBvcnQgeyBpc0Jyb3dzZXIgfSBmcm9tICdicm93c2VyLW9yLW5vZGUnXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgKiBhcyBxcyBmcm9tICdxdWVyeS1zdHJpbmcnXG5pbXBvcnQgeG1sMmpzIGZyb20gJ3htbDJqcydcblxuaW1wb3J0IHsgQ3JlZGVudGlhbFByb3ZpZGVyIH0gZnJvbSAnLi4vQ3JlZGVudGlhbFByb3ZpZGVyLnRzJ1xuaW1wb3J0ICogYXMgZXJyb3JzIGZyb20gJy4uL2Vycm9ycy50cydcbmltcG9ydCB0eXBlIHsgU2VsZWN0UmVzdWx0cyB9IGZyb20gJy4uL2hlbHBlcnMudHMnXG5pbXBvcnQge1xuICBDb3B5RGVzdGluYXRpb25PcHRpb25zLFxuICBDb3B5U291cmNlT3B0aW9ucyxcbiAgREVGQVVMVF9SRUdJT04sXG4gIExFR0FMX0hPTERfU1RBVFVTLFxuICBQUkVTSUdOX0VYUElSWV9EQVlTX01BWCxcbiAgUkVURU5USU9OX01PREVTLFxuICBSRVRFTlRJT05fVkFMSURJVFlfVU5JVFMsXG59IGZyb20gJy4uL2hlbHBlcnMudHMnXG5pbXBvcnQgdHlwZSB7IFBvc3RQb2xpY3lSZXN1bHQgfSBmcm9tICcuLi9taW5pby50cydcbmltcG9ydCB7IHBvc3RQcmVzaWduU2lnbmF0dXJlVjQsIHByZXNpZ25TaWduYXR1cmVWNCwgc2lnblY0IH0gZnJvbSAnLi4vc2lnbmluZy50cydcbmltcG9ydCB7IGZzcCwgc3RyZWFtUHJvbWlzZSB9IGZyb20gJy4vYXN5bmMudHMnXG5pbXBvcnQgeyBDb3B5Q29uZGl0aW9ucyB9IGZyb20gJy4vY29weS1jb25kaXRpb25zLnRzJ1xuaW1wb3J0IHsgRXh0ZW5zaW9ucyB9IGZyb20gJy4vZXh0ZW5zaW9ucy50cydcbmltcG9ydCB7XG4gIGNhbGN1bGF0ZUV2ZW5TcGxpdHMsXG4gIGV4dHJhY3RNZXRhZGF0YSxcbiAgZ2V0Q29udGVudExlbmd0aCxcbiAgZ2V0U2NvcGUsXG4gIGdldFNvdXJjZVZlcnNpb25JZCxcbiAgZ2V0VmVyc2lvbklkLFxuICBoYXNoQmluYXJ5LFxuICBpbnNlcnRDb250ZW50VHlwZSxcbiAgaXNBbWF6b25FbmRwb2ludCxcbiAgaXNCb29sZWFuLFxuICBpc0RlZmluZWQsXG4gIGlzRW1wdHksXG4gIGlzTnVtYmVyLFxuICBpc09iamVjdCxcbiAgaXNSZWFkYWJsZVN0cmVhbSxcbiAgaXNTdHJpbmcsXG4gIGlzVmFsaWRCdWNrZXROYW1lLFxuICBpc1ZhbGlkRW5kcG9pbnQsXG4gIGlzVmFsaWRPYmplY3ROYW1lLFxuICBpc1ZhbGlkUG9ydCxcbiAgaXNWYWxpZFByZWZpeCxcbiAgaXNWaXJ0dWFsSG9zdFN0eWxlLFxuICBtYWtlRGF0ZUxvbmcsXG4gIFBBUlRfQ09OU1RSQUlOVFMsXG4gIHBhcnRzUmVxdWlyZWQsXG4gIHByZXBlbmRYQU1aTWV0YSxcbiAgcmVhZGFibGVTdHJlYW0sXG4gIHNhbml0aXplRVRhZyxcbiAgdG9NZDUsXG4gIHRvU2hhMjU2LFxuICB1cmlFc2NhcGUsXG4gIHVyaVJlc291cmNlRXNjYXBlLFxufSBmcm9tICcuL2hlbHBlci50cydcbmltcG9ydCB7IGpvaW5Ib3N0UG9ydCB9IGZyb20gJy4vam9pbi1ob3N0LXBvcnQudHMnXG5pbXBvcnQgeyBQb3N0UG9saWN5IH0gZnJvbSAnLi9wb3N0LXBvbGljeS50cydcbmltcG9ydCB7IHJlcXVlc3RXaXRoUmV0cnkgfSBmcm9tICcuL3JlcXVlc3QudHMnXG5pbXBvcnQgeyBkcmFpblJlc3BvbnNlLCByZWFkQXNCdWZmZXIsIHJlYWRBc1N0cmluZyB9IGZyb20gJy4vcmVzcG9uc2UudHMnXG5pbXBvcnQgdHlwZSB7IFJlZ2lvbiB9IGZyb20gJy4vczMtZW5kcG9pbnRzLnRzJ1xuaW1wb3J0IHsgZ2V0UzNFbmRwb2ludCB9IGZyb20gJy4vczMtZW5kcG9pbnRzLnRzJ1xuaW1wb3J0IHR5cGUge1xuICBCaW5hcnksXG4gIEJ1Y2tldEl0ZW1Gcm9tTGlzdCxcbiAgQnVja2V0SXRlbVN0YXQsXG4gIEJ1Y2tldFN0cmVhbSxcbiAgQnVja2V0VmVyc2lvbmluZ0NvbmZpZ3VyYXRpb24sXG4gIENvcHlPYmplY3RQYXJhbXMsXG4gIENvcHlPYmplY3RSZXN1bHQsXG4gIENvcHlPYmplY3RSZXN1bHRWMixcbiAgRW5jcnlwdGlvbkNvbmZpZyxcbiAgR2V0T2JqZWN0TGVnYWxIb2xkT3B0aW9ucyxcbiAgR2V0T2JqZWN0T3B0cyxcbiAgR2V0T2JqZWN0UmV0ZW50aW9uT3B0cyxcbiAgSW5jb21wbGV0ZVVwbG9hZGVkQnVja2V0SXRlbSxcbiAgSVJlcXVlc3QsXG4gIEl0ZW1CdWNrZXRNZXRhZGF0YSxcbiAgTGlmZWN5Y2xlQ29uZmlnLFxuICBMaWZlQ3ljbGVDb25maWdQYXJhbSxcbiAgTGlzdE9iamVjdFF1ZXJ5T3B0cyxcbiAgTGlzdE9iamVjdFF1ZXJ5UmVzLFxuICBPYmplY3RJbmZvLFxuICBPYmplY3RMb2NrQ29uZmlnUGFyYW0sXG4gIE9iamVjdExvY2tJbmZvLFxuICBPYmplY3RNZXRhRGF0YSxcbiAgT2JqZWN0UmV0ZW50aW9uSW5mbyxcbiAgUHJlU2lnblJlcXVlc3RQYXJhbXMsXG4gIFB1dE9iamVjdExlZ2FsSG9sZE9wdGlvbnMsXG4gIFB1dFRhZ2dpbmdQYXJhbXMsXG4gIFJlbW92ZU9iamVjdHNQYXJhbSxcbiAgUmVtb3ZlT2JqZWN0c1JlcXVlc3RFbnRyeSxcbiAgUmVtb3ZlT2JqZWN0c1Jlc3BvbnNlLFxuICBSZW1vdmVUYWdnaW5nUGFyYW1zLFxuICBSZXBsaWNhdGlvbkNvbmZpZyxcbiAgUmVwbGljYXRpb25Db25maWdPcHRzLFxuICBSZXF1ZXN0SGVhZGVycyxcbiAgUmVzcG9uc2VIZWFkZXIsXG4gIFJlc3VsdENhbGxiYWNrLFxuICBSZXRlbnRpb24sXG4gIFNlbGVjdE9wdGlvbnMsXG4gIFN0YXRPYmplY3RPcHRzLFxuICBUYWcsXG4gIFRhZ2dpbmdPcHRzLFxuICBUYWdzLFxuICBUcmFuc3BvcnQsXG4gIFVwbG9hZGVkT2JqZWN0SW5mbyxcbiAgVXBsb2FkUGFydENvbmZpZyxcbn0gZnJvbSAnLi90eXBlLnRzJ1xuaW1wb3J0IHR5cGUgeyBMaXN0TXVsdGlwYXJ0UmVzdWx0LCBVcGxvYWRlZFBhcnQgfSBmcm9tICcuL3htbC1wYXJzZXIudHMnXG5pbXBvcnQge1xuICBwYXJzZUNvbXBsZXRlTXVsdGlwYXJ0LFxuICBwYXJzZUluaXRpYXRlTXVsdGlwYXJ0LFxuICBwYXJzZUxpc3RPYmplY3RzLFxuICBwYXJzZU9iamVjdExlZ2FsSG9sZENvbmZpZyxcbiAgcGFyc2VTZWxlY3RPYmplY3RDb250ZW50UmVzcG9uc2UsXG4gIHVwbG9hZFBhcnRQYXJzZXIsXG59IGZyb20gJy4veG1sLXBhcnNlci50cydcbmltcG9ydCAqIGFzIHhtbFBhcnNlcnMgZnJvbSAnLi94bWwtcGFyc2VyLnRzJ1xuXG5jb25zdCB4bWwgPSBuZXcgeG1sMmpzLkJ1aWxkZXIoeyByZW5kZXJPcHRzOiB7IHByZXR0eTogZmFsc2UgfSwgaGVhZGxlc3M6IHRydWUgfSlcblxuLy8gd2lsbCBiZSByZXBsYWNlZCBieSBidW5kbGVyLlxuY29uc3QgUGFja2FnZSA9IHsgdmVyc2lvbjogcHJvY2Vzcy5lbnYuTUlOSU9fSlNfUEFDS0FHRV9WRVJTSU9OIHx8ICdkZXZlbG9wbWVudCcgfVxuXG5jb25zdCByZXF1ZXN0T3B0aW9uUHJvcGVydGllcyA9IFtcbiAgJ2FnZW50JyxcbiAgJ2NhJyxcbiAgJ2NlcnQnLFxuICAnY2lwaGVycycsXG4gICdjbGllbnRDZXJ0RW5naW5lJyxcbiAgJ2NybCcsXG4gICdkaHBhcmFtJyxcbiAgJ2VjZGhDdXJ2ZScsXG4gICdmYW1pbHknLFxuICAnaG9ub3JDaXBoZXJPcmRlcicsXG4gICdrZXknLFxuICAncGFzc3BocmFzZScsXG4gICdwZngnLFxuICAncmVqZWN0VW5hdXRob3JpemVkJyxcbiAgJ3NlY3VyZU9wdGlvbnMnLFxuICAnc2VjdXJlUHJvdG9jb2wnLFxuICAnc2VydmVybmFtZScsXG4gICdzZXNzaW9uSWRDb250ZXh0Jyxcbl0gYXMgY29uc3RcblxuZXhwb3J0IGludGVyZmFjZSBDbGllbnRPcHRpb25zIHtcbiAgZW5kUG9pbnQ6IHN0cmluZ1xuICBhY2Nlc3NLZXk/OiBzdHJpbmdcbiAgc2VjcmV0S2V5Pzogc3RyaW5nXG4gIHVzZVNTTD86IGJvb2xlYW5cbiAgcG9ydD86IG51bWJlclxuICByZWdpb24/OiBSZWdpb25cbiAgdHJhbnNwb3J0PzogVHJhbnNwb3J0XG4gIHNlc3Npb25Ub2tlbj86IHN0cmluZ1xuICBwYXJ0U2l6ZT86IG51bWJlclxuICBwYXRoU3R5bGU/OiBib29sZWFuXG4gIGNyZWRlbnRpYWxzUHJvdmlkZXI/OiBDcmVkZW50aWFsUHJvdmlkZXJcbiAgczNBY2NlbGVyYXRlRW5kcG9pbnQ/OiBzdHJpbmdcbiAgdHJhbnNwb3J0QWdlbnQ/OiBodHRwLkFnZW50XG59XG5cbmV4cG9ydCB0eXBlIFJlcXVlc3RPcHRpb24gPSBQYXJ0aWFsPElSZXF1ZXN0PiAmIHtcbiAgbWV0aG9kOiBzdHJpbmdcbiAgYnVja2V0TmFtZT86IHN0cmluZ1xuICBvYmplY3ROYW1lPzogc3RyaW5nXG4gIHF1ZXJ5Pzogc3RyaW5nXG4gIHBhdGhTdHlsZT86IGJvb2xlYW5cbn1cblxuZXhwb3J0IHR5cGUgTm9SZXN1bHRDYWxsYmFjayA9IChlcnJvcjogdW5rbm93bikgPT4gdm9pZFxuXG5leHBvcnQgaW50ZXJmYWNlIE1ha2VCdWNrZXRPcHQge1xuICBPYmplY3RMb2NraW5nPzogYm9vbGVhblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlbW92ZU9wdGlvbnMge1xuICB2ZXJzaW9uSWQ/OiBzdHJpbmdcbiAgZ292ZXJuYW5jZUJ5cGFzcz86IGJvb2xlYW5cbiAgZm9yY2VEZWxldGU/OiBib29sZWFuXG59XG5cbnR5cGUgUGFydCA9IHtcbiAgcGFydDogbnVtYmVyXG4gIGV0YWc6IHN0cmluZ1xufVxuXG5leHBvcnQgY2xhc3MgVHlwZWRDbGllbnQge1xuICBwcm90ZWN0ZWQgdHJhbnNwb3J0OiBUcmFuc3BvcnRcbiAgcHJvdGVjdGVkIGhvc3Q6IHN0cmluZ1xuICBwcm90ZWN0ZWQgcG9ydDogbnVtYmVyXG4gIHByb3RlY3RlZCBwcm90b2NvbDogc3RyaW5nXG4gIHByb3RlY3RlZCBhY2Nlc3NLZXk6IHN0cmluZ1xuICBwcm90ZWN0ZWQgc2VjcmV0S2V5OiBzdHJpbmdcbiAgcHJvdGVjdGVkIHNlc3Npb25Ub2tlbj86IHN0cmluZ1xuICBwcm90ZWN0ZWQgdXNlckFnZW50OiBzdHJpbmdcbiAgcHJvdGVjdGVkIGFub255bW91czogYm9vbGVhblxuICBwcm90ZWN0ZWQgcGF0aFN0eWxlOiBib29sZWFuXG4gIHByb3RlY3RlZCByZWdpb25NYXA6IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cbiAgcHVibGljIHJlZ2lvbj86IHN0cmluZ1xuICBwcm90ZWN0ZWQgY3JlZGVudGlhbHNQcm92aWRlcj86IENyZWRlbnRpYWxQcm92aWRlclxuICBwYXJ0U2l6ZTogbnVtYmVyID0gNjQgKiAxMDI0ICogMTAyNFxuICBwcm90ZWN0ZWQgb3ZlclJpZGVQYXJ0U2l6ZT86IGJvb2xlYW5cblxuICBwcm90ZWN0ZWQgbWF4aW11bVBhcnRTaXplID0gNSAqIDEwMjQgKiAxMDI0ICogMTAyNFxuICBwcm90ZWN0ZWQgbWF4T2JqZWN0U2l6ZSA9IDUgKiAxMDI0ICogMTAyNCAqIDEwMjQgKiAxMDI0XG4gIHB1YmxpYyBlbmFibGVTSEEyNTY6IGJvb2xlYW5cbiAgcHJvdGVjdGVkIHMzQWNjZWxlcmF0ZUVuZHBvaW50Pzogc3RyaW5nXG4gIHByb3RlY3RlZCByZXFPcHRpb25zOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuXG4gIHByb3RlY3RlZCB0cmFuc3BvcnRBZ2VudDogaHR0cC5BZ2VudFxuICBwcml2YXRlIHJlYWRvbmx5IGNsaWVudEV4dGVuc2lvbnM6IEV4dGVuc2lvbnNcblxuICBjb25zdHJ1Y3RvcihwYXJhbXM6IENsaWVudE9wdGlvbnMpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGRlcHJlY2F0ZWQgcHJvcGVydHlcbiAgICBpZiAocGFyYW1zLnNlY3VyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wic2VjdXJlXCIgb3B0aW9uIGRlcHJlY2F0ZWQsIFwidXNlU1NMXCIgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZCcpXG4gICAgfVxuICAgIC8vIERlZmF1bHQgdmFsdWVzIGlmIG5vdCBzcGVjaWZpZWQuXG4gICAgaWYgKHBhcmFtcy51c2VTU0wgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLnVzZVNTTCA9IHRydWVcbiAgICB9XG4gICAgaWYgKCFwYXJhbXMucG9ydCkge1xuICAgICAgcGFyYW1zLnBvcnQgPSAwXG4gICAgfVxuICAgIC8vIFZhbGlkYXRlIGlucHV0IHBhcmFtcy5cbiAgICBpZiAoIWlzVmFsaWRFbmRwb2ludChwYXJhbXMuZW5kUG9pbnQpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRFbmRwb2ludEVycm9yKGBJbnZhbGlkIGVuZFBvaW50IDogJHtwYXJhbXMuZW5kUG9pbnR9YClcbiAgICB9XG4gICAgaWYgKCFpc1ZhbGlkUG9ydChwYXJhbXMucG9ydCkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoYEludmFsaWQgcG9ydCA6ICR7cGFyYW1zLnBvcnR9YClcbiAgICB9XG4gICAgaWYgKCFpc0Jvb2xlYW4ocGFyYW1zLnVzZVNTTCkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgIGBJbnZhbGlkIHVzZVNTTCBmbGFnIHR5cGUgOiAke3BhcmFtcy51c2VTU0x9LCBleHBlY3RlZCB0byBiZSBvZiB0eXBlIFwiYm9vbGVhblwiYCxcbiAgICAgIClcbiAgICB9XG5cbiAgICAvLyBWYWxpZGF0ZSByZWdpb24gb25seSBpZiBpdHMgc2V0LlxuICAgIGlmIChwYXJhbXMucmVnaW9uKSB7XG4gICAgICBpZiAoIWlzU3RyaW5nKHBhcmFtcy5yZWdpb24pKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoYEludmFsaWQgcmVnaW9uIDogJHtwYXJhbXMucmVnaW9ufWApXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgaG9zdCA9IHBhcmFtcy5lbmRQb2ludC50b0xvd2VyQ2FzZSgpXG4gICAgbGV0IHBvcnQgPSBwYXJhbXMucG9ydFxuICAgIGxldCBwcm90b2NvbDogc3RyaW5nXG4gICAgbGV0IHRyYW5zcG9ydFxuICAgIGxldCB0cmFuc3BvcnRBZ2VudDogaHR0cC5BZ2VudFxuICAgIC8vIFZhbGlkYXRlIGlmIGNvbmZpZ3VyYXRpb24gaXMgbm90IHVzaW5nIFNTTFxuICAgIC8vIGZvciBjb25zdHJ1Y3RpbmcgcmVsZXZhbnQgZW5kcG9pbnRzLlxuICAgIGlmIChwYXJhbXMudXNlU1NMKSB7XG4gICAgICAvLyBEZWZhdWx0cyB0byBzZWN1cmUuXG4gICAgICB0cmFuc3BvcnQgPSBodHRwc1xuICAgICAgcHJvdG9jb2wgPSAnaHR0cHM6J1xuICAgICAgcG9ydCA9IHBvcnQgfHwgNDQzXG4gICAgICB0cmFuc3BvcnRBZ2VudCA9IGh0dHBzLmdsb2JhbEFnZW50XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zcG9ydCA9IGh0dHBcbiAgICAgIHByb3RvY29sID0gJ2h0dHA6J1xuICAgICAgcG9ydCA9IHBvcnQgfHwgODBcbiAgICAgIHRyYW5zcG9ydEFnZW50ID0gaHR0cC5nbG9iYWxBZ2VudFxuICAgIH1cblxuICAgIC8vIGlmIGN1c3RvbSB0cmFuc3BvcnQgaXMgc2V0LCB1c2UgaXQuXG4gICAgaWYgKHBhcmFtcy50cmFuc3BvcnQpIHtcbiAgICAgIGlmICghaXNPYmplY3QocGFyYW1zLnRyYW5zcG9ydCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICBgSW52YWxpZCB0cmFuc3BvcnQgdHlwZSA6ICR7cGFyYW1zLnRyYW5zcG9ydH0sIGV4cGVjdGVkIHRvIGJlIHR5cGUgXCJvYmplY3RcImAsXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIHRyYW5zcG9ydCA9IHBhcmFtcy50cmFuc3BvcnRcbiAgICB9XG5cbiAgICAvLyBpZiBjdXN0b20gdHJhbnNwb3J0IGFnZW50IGlzIHNldCwgdXNlIGl0LlxuICAgIGlmIChwYXJhbXMudHJhbnNwb3J0QWdlbnQpIHtcbiAgICAgIGlmICghaXNPYmplY3QocGFyYW1zLnRyYW5zcG9ydEFnZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgIGBJbnZhbGlkIHRyYW5zcG9ydEFnZW50IHR5cGU6ICR7cGFyYW1zLnRyYW5zcG9ydEFnZW50fSwgZXhwZWN0ZWQgdG8gYmUgdHlwZSBcIm9iamVjdFwiYCxcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICB0cmFuc3BvcnRBZ2VudCA9IHBhcmFtcy50cmFuc3BvcnRBZ2VudFxuICAgIH1cblxuICAgIC8vIFVzZXIgQWdlbnQgc2hvdWxkIGFsd2F5cyBmb2xsb3dpbmcgdGhlIGJlbG93IHN0eWxlLlxuICAgIC8vIFBsZWFzZSBvcGVuIGFuIGlzc3VlIHRvIGRpc2N1c3MgYW55IG5ldyBjaGFuZ2VzIGhlcmUuXG4gICAgLy9cbiAgICAvLyAgICAgICBNaW5JTyAoT1M7IEFSQ0gpIExJQi9WRVIgQVBQL1ZFUlxuICAgIC8vXG4gICAgY29uc3QgbGlicmFyeUNvbW1lbnRzID0gYCgke3Byb2Nlc3MucGxhdGZvcm19OyAke3Byb2Nlc3MuYXJjaH0pYFxuICAgIGNvbnN0IGxpYnJhcnlBZ2VudCA9IGBNaW5JTyAke2xpYnJhcnlDb21tZW50c30gbWluaW8tanMvJHtQYWNrYWdlLnZlcnNpb259YFxuICAgIC8vIFVzZXIgYWdlbnQgYmxvY2sgZW5kcy5cblxuICAgIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0XG4gICAgdGhpcy50cmFuc3BvcnRBZ2VudCA9IHRyYW5zcG9ydEFnZW50XG4gICAgdGhpcy5ob3N0ID0gaG9zdFxuICAgIHRoaXMucG9ydCA9IHBvcnRcbiAgICB0aGlzLnByb3RvY29sID0gcHJvdG9jb2xcbiAgICB0aGlzLnVzZXJBZ2VudCA9IGAke2xpYnJhcnlBZ2VudH1gXG5cbiAgICAvLyBEZWZhdWx0IHBhdGggc3R5bGUgaXMgdHJ1ZVxuICAgIGlmIChwYXJhbXMucGF0aFN0eWxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMucGF0aFN0eWxlID0gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhdGhTdHlsZSA9IHBhcmFtcy5wYXRoU3R5bGVcbiAgICB9XG5cbiAgICB0aGlzLmFjY2Vzc0tleSA9IHBhcmFtcy5hY2Nlc3NLZXkgPz8gJydcbiAgICB0aGlzLnNlY3JldEtleSA9IHBhcmFtcy5zZWNyZXRLZXkgPz8gJydcbiAgICB0aGlzLnNlc3Npb25Ub2tlbiA9IHBhcmFtcy5zZXNzaW9uVG9rZW5cbiAgICB0aGlzLmFub255bW91cyA9ICF0aGlzLmFjY2Vzc0tleSB8fCAhdGhpcy5zZWNyZXRLZXlcblxuICAgIGlmIChwYXJhbXMuY3JlZGVudGlhbHNQcm92aWRlcikge1xuICAgICAgdGhpcy5hbm9ueW1vdXMgPSBmYWxzZVxuICAgICAgdGhpcy5jcmVkZW50aWFsc1Byb3ZpZGVyID0gcGFyYW1zLmNyZWRlbnRpYWxzUHJvdmlkZXJcbiAgICB9XG5cbiAgICB0aGlzLnJlZ2lvbk1hcCA9IHt9XG4gICAgaWYgKHBhcmFtcy5yZWdpb24pIHtcbiAgICAgIHRoaXMucmVnaW9uID0gcGFyYW1zLnJlZ2lvblxuICAgIH1cblxuICAgIGlmIChwYXJhbXMucGFydFNpemUpIHtcbiAgICAgIHRoaXMucGFydFNpemUgPSBwYXJhbXMucGFydFNpemVcbiAgICAgIHRoaXMub3ZlclJpZGVQYXJ0U2l6ZSA9IHRydWVcbiAgICB9XG4gICAgaWYgKHRoaXMucGFydFNpemUgPCA1ICogMTAyNCAqIDEwMjQpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoYFBhcnQgc2l6ZSBzaG91bGQgYmUgZ3JlYXRlciB0aGFuIDVNQmApXG4gICAgfVxuICAgIGlmICh0aGlzLnBhcnRTaXplID4gNSAqIDEwMjQgKiAxMDI0ICogMTAyNCkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcihgUGFydCBzaXplIHNob3VsZCBiZSBsZXNzIHRoYW4gNUdCYClcbiAgICB9XG5cbiAgICAvLyBTSEEyNTYgaXMgZW5hYmxlZCBvbmx5IGZvciBhdXRoZW50aWNhdGVkIGh0dHAgcmVxdWVzdHMuIElmIHRoZSByZXF1ZXN0IGlzIGF1dGhlbnRpY2F0ZWRcbiAgICAvLyBhbmQgdGhlIGNvbm5lY3Rpb24gaXMgaHR0cHMgd2UgdXNlIHgtYW16LWNvbnRlbnQtc2hhMjU2PVVOU0lHTkVELVBBWUxPQURcbiAgICAvLyBoZWFkZXIgZm9yIHNpZ25hdHVyZSBjYWxjdWxhdGlvbi5cbiAgICB0aGlzLmVuYWJsZVNIQTI1NiA9ICF0aGlzLmFub255bW91cyAmJiAhcGFyYW1zLnVzZVNTTFxuXG4gICAgdGhpcy5zM0FjY2VsZXJhdGVFbmRwb2ludCA9IHBhcmFtcy5zM0FjY2VsZXJhdGVFbmRwb2ludCB8fCB1bmRlZmluZWRcbiAgICB0aGlzLnJlcU9wdGlvbnMgPSB7fVxuICAgIHRoaXMuY2xpZW50RXh0ZW5zaW9ucyA9IG5ldyBFeHRlbnNpb25zKHRoaXMpXG4gIH1cbiAgLyoqXG4gICAqIE1pbmlvIGV4dGVuc2lvbnMgdGhhdCBhcmVuJ3QgbmVjZXNzYXJ5IHByZXNlbnQgZm9yIEFtYXpvbiBTMyBjb21wYXRpYmxlIHN0b3JhZ2Ugc2VydmVyc1xuICAgKi9cbiAgZ2V0IGV4dGVuc2lvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50RXh0ZW5zaW9uc1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBlbmRQb2ludCAtIHZhbGlkIFMzIGFjY2VsZXJhdGlvbiBlbmQgcG9pbnRcbiAgICovXG4gIHNldFMzVHJhbnNmZXJBY2NlbGVyYXRlKGVuZFBvaW50OiBzdHJpbmcpIHtcbiAgICB0aGlzLnMzQWNjZWxlcmF0ZUVuZHBvaW50ID0gZW5kUG9pbnRcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzdXBwb3J0ZWQgcmVxdWVzdCBvcHRpb25zLlxuICAgKi9cbiAgcHVibGljIHNldFJlcXVlc3RPcHRpb25zKG9wdGlvbnM6IFBpY2s8aHR0cHMuUmVxdWVzdE9wdGlvbnMsICh0eXBlb2YgcmVxdWVzdE9wdGlvblByb3BlcnRpZXMpW251bWJlcl0+KSB7XG4gICAgaWYgKCFpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVxdWVzdCBvcHRpb25zIHNob3VsZCBiZSBvZiB0eXBlIFwib2JqZWN0XCInKVxuICAgIH1cbiAgICB0aGlzLnJlcU9wdGlvbnMgPSBfLnBpY2sob3B0aW9ucywgcmVxdWVzdE9wdGlvblByb3BlcnRpZXMpXG4gIH1cblxuICAvKipcbiAgICogIFRoaXMgaXMgczMgU3BlY2lmaWMgYW5kIGRvZXMgbm90IGhvbGQgdmFsaWRpdHkgaW4gYW55IG90aGVyIE9iamVjdCBzdG9yYWdlLlxuICAgKi9cbiAgcHJpdmF0ZSBnZXRBY2NlbGVyYXRlRW5kUG9pbnRJZlNldChidWNrZXROYW1lPzogc3RyaW5nLCBvYmplY3ROYW1lPzogc3RyaW5nKSB7XG4gICAgaWYgKCFpc0VtcHR5KHRoaXMuczNBY2NlbGVyYXRlRW5kcG9pbnQpICYmICFpc0VtcHR5KGJ1Y2tldE5hbWUpICYmICFpc0VtcHR5KG9iamVjdE5hbWUpKSB7XG4gICAgICAvLyBodHRwOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9BbWF6b25TMy9sYXRlc3QvZGV2L3RyYW5zZmVyLWFjY2VsZXJhdGlvbi5odG1sXG4gICAgICAvLyBEaXNhYmxlIHRyYW5zZmVyIGFjY2VsZXJhdGlvbiBmb3Igbm9uLWNvbXBsaWFudCBidWNrZXQgbmFtZXMuXG4gICAgICBpZiAoYnVja2V0TmFtZS5pbmNsdWRlcygnLicpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVHJhbnNmZXIgQWNjZWxlcmF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIG5vbiBjb21wbGlhbnQgYnVja2V0OiR7YnVja2V0TmFtZX1gKVxuICAgICAgfVxuICAgICAgLy8gSWYgdHJhbnNmZXIgYWNjZWxlcmF0aW9uIGlzIHJlcXVlc3RlZCBzZXQgbmV3IGhvc3QuXG4gICAgICAvLyBGb3IgbW9yZSBkZXRhaWxzIGFib3V0IGVuYWJsaW5nIHRyYW5zZmVyIGFjY2VsZXJhdGlvbiByZWFkIGhlcmUuXG4gICAgICAvLyBodHRwOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9BbWF6b25TMy9sYXRlc3QvZGV2L3RyYW5zZmVyLWFjY2VsZXJhdGlvbi5odG1sXG4gICAgICByZXR1cm4gdGhpcy5zM0FjY2VsZXJhdGVFbmRwb2ludFxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiAgIFNldCBhcHBsaWNhdGlvbiBzcGVjaWZpYyBpbmZvcm1hdGlvbi5cbiAgICogICBHZW5lcmF0ZXMgVXNlci1BZ2VudCBpbiB0aGUgZm9sbG93aW5nIHN0eWxlLlxuICAgKiAgIE1pbklPIChPUzsgQVJDSCkgTElCL1ZFUiBBUFAvVkVSXG4gICAqL1xuICBzZXRBcHBJbmZvKGFwcE5hbWU6IHN0cmluZywgYXBwVmVyc2lvbjogc3RyaW5nKSB7XG4gICAgaWYgKCFpc1N0cmluZyhhcHBOYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBhcHBOYW1lOiAke2FwcE5hbWV9YClcbiAgICB9XG4gICAgaWYgKGFwcE5hbWUudHJpbSgpID09PSAnJykge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcignSW5wdXQgYXBwTmFtZSBjYW5ub3QgYmUgZW1wdHkuJylcbiAgICB9XG4gICAgaWYgKCFpc1N0cmluZyhhcHBWZXJzaW9uKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBhcHBWZXJzaW9uOiAke2FwcFZlcnNpb259YClcbiAgICB9XG4gICAgaWYgKGFwcFZlcnNpb24udHJpbSgpID09PSAnJykge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcignSW5wdXQgYXBwVmVyc2lvbiBjYW5ub3QgYmUgZW1wdHkuJylcbiAgICB9XG4gICAgdGhpcy51c2VyQWdlbnQgPSBgJHt0aGlzLnVzZXJBZ2VudH0gJHthcHBOYW1lfS8ke2FwcFZlcnNpb259YFxuICB9XG5cbiAgLyoqXG4gICAqIHJldHVybnMgb3B0aW9ucyBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB3aXRoIGh0dHAucmVxdWVzdCgpXG4gICAqIFRha2VzIGNhcmUgb2YgY29uc3RydWN0aW5nIHZpcnR1YWwtaG9zdC1zdHlsZSBvciBwYXRoLXN0eWxlIGhvc3RuYW1lXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0UmVxdWVzdE9wdGlvbnMoXG4gICAgb3B0czogUmVxdWVzdE9wdGlvbiAmIHtcbiAgICAgIHJlZ2lvbjogc3RyaW5nXG4gICAgfSxcbiAgKTogSVJlcXVlc3QgJiB7XG4gICAgaG9zdDogc3RyaW5nXG4gICAgaGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPlxuICB9IHtcbiAgICBjb25zdCBtZXRob2QgPSBvcHRzLm1ldGhvZFxuICAgIGNvbnN0IHJlZ2lvbiA9IG9wdHMucmVnaW9uXG4gICAgY29uc3QgYnVja2V0TmFtZSA9IG9wdHMuYnVja2V0TmFtZVxuICAgIGxldCBvYmplY3ROYW1lID0gb3B0cy5vYmplY3ROYW1lXG4gICAgY29uc3QgaGVhZGVycyA9IG9wdHMuaGVhZGVyc1xuICAgIGNvbnN0IHF1ZXJ5ID0gb3B0cy5xdWVyeVxuXG4gICAgbGV0IHJlcU9wdGlvbnMgPSB7XG4gICAgICBtZXRob2QsXG4gICAgICBoZWFkZXJzOiB7fSBhcyBSZXF1ZXN0SGVhZGVycyxcbiAgICAgIHByb3RvY29sOiB0aGlzLnByb3RvY29sLFxuICAgICAgLy8gSWYgY3VzdG9tIHRyYW5zcG9ydEFnZW50IHdhcyBzdXBwbGllZCBlYXJsaWVyLCB3ZSdsbCBpbmplY3QgaXQgaGVyZVxuICAgICAgYWdlbnQ6IHRoaXMudHJhbnNwb3J0QWdlbnQsXG4gICAgfVxuXG4gICAgLy8gVmVyaWZ5IGlmIHZpcnR1YWwgaG9zdCBzdXBwb3J0ZWQuXG4gICAgbGV0IHZpcnR1YWxIb3N0U3R5bGVcbiAgICBpZiAoYnVja2V0TmFtZSkge1xuICAgICAgdmlydHVhbEhvc3RTdHlsZSA9IGlzVmlydHVhbEhvc3RTdHlsZSh0aGlzLmhvc3QsIHRoaXMucHJvdG9jb2wsIGJ1Y2tldE5hbWUsIHRoaXMucGF0aFN0eWxlKVxuICAgIH1cblxuICAgIGxldCBwYXRoID0gJy8nXG4gICAgbGV0IGhvc3QgPSB0aGlzLmhvc3RcblxuICAgIGxldCBwb3J0OiB1bmRlZmluZWQgfCBudW1iZXJcbiAgICBpZiAodGhpcy5wb3J0KSB7XG4gICAgICBwb3J0ID0gdGhpcy5wb3J0XG4gICAgfVxuXG4gICAgaWYgKG9iamVjdE5hbWUpIHtcbiAgICAgIG9iamVjdE5hbWUgPSB1cmlSZXNvdXJjZUVzY2FwZShvYmplY3ROYW1lKVxuICAgIH1cblxuICAgIC8vIEZvciBBbWF6b24gUzMgZW5kcG9pbnQsIGdldCBlbmRwb2ludCBiYXNlZCBvbiByZWdpb24uXG4gICAgaWYgKGlzQW1hem9uRW5kcG9pbnQoaG9zdCkpIHtcbiAgICAgIGNvbnN0IGFjY2VsZXJhdGVFbmRQb2ludCA9IHRoaXMuZ2V0QWNjZWxlcmF0ZUVuZFBvaW50SWZTZXQoYnVja2V0TmFtZSwgb2JqZWN0TmFtZSlcbiAgICAgIGlmIChhY2NlbGVyYXRlRW5kUG9pbnQpIHtcbiAgICAgICAgaG9zdCA9IGAke2FjY2VsZXJhdGVFbmRQb2ludH1gXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBob3N0ID0gZ2V0UzNFbmRwb2ludChyZWdpb24pXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHZpcnR1YWxIb3N0U3R5bGUgJiYgIW9wdHMucGF0aFN0eWxlKSB7XG4gICAgICAvLyBGb3IgYWxsIGhvc3RzIHdoaWNoIHN1cHBvcnQgdmlydHVhbCBob3N0IHN0eWxlLCBgYnVja2V0TmFtZWBcbiAgICAgIC8vIGlzIHBhcnQgb2YgdGhlIGhvc3RuYW1lIGluIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxuICAgICAgLy9cbiAgICAgIC8vICB2YXIgaG9zdCA9ICdidWNrZXROYW1lLmV4YW1wbGUuY29tJ1xuICAgICAgLy9cbiAgICAgIGlmIChidWNrZXROYW1lKSB7XG4gICAgICAgIGhvc3QgPSBgJHtidWNrZXROYW1lfS4ke2hvc3R9YFxuICAgICAgfVxuICAgICAgaWYgKG9iamVjdE5hbWUpIHtcbiAgICAgICAgcGF0aCA9IGAvJHtvYmplY3ROYW1lfWBcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRm9yIGFsbCBTMyBjb21wYXRpYmxlIHN0b3JhZ2Ugc2VydmljZXMgd2Ugd2lsbCBmYWxsYmFjayB0b1xuICAgICAgLy8gcGF0aCBzdHlsZSByZXF1ZXN0cywgd2hlcmUgYGJ1Y2tldE5hbWVgIGlzIHBhcnQgb2YgdGhlIFVSSVxuICAgICAgLy8gcGF0aC5cbiAgICAgIGlmIChidWNrZXROYW1lKSB7XG4gICAgICAgIHBhdGggPSBgLyR7YnVja2V0TmFtZX1gXG4gICAgICB9XG4gICAgICBpZiAob2JqZWN0TmFtZSkge1xuICAgICAgICBwYXRoID0gYC8ke2J1Y2tldE5hbWV9LyR7b2JqZWN0TmFtZX1gXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHF1ZXJ5KSB7XG4gICAgICBwYXRoICs9IGA/JHtxdWVyeX1gXG4gICAgfVxuICAgIHJlcU9wdGlvbnMuaGVhZGVycy5ob3N0ID0gaG9zdFxuICAgIGlmICgocmVxT3B0aW9ucy5wcm90b2NvbCA9PT0gJ2h0dHA6JyAmJiBwb3J0ICE9PSA4MCkgfHwgKHJlcU9wdGlvbnMucHJvdG9jb2wgPT09ICdodHRwczonICYmIHBvcnQgIT09IDQ0MykpIHtcbiAgICAgIHJlcU9wdGlvbnMuaGVhZGVycy5ob3N0ID0gam9pbkhvc3RQb3J0KGhvc3QsIHBvcnQpXG4gICAgfVxuXG4gICAgcmVxT3B0aW9ucy5oZWFkZXJzWyd1c2VyLWFnZW50J10gPSB0aGlzLnVzZXJBZ2VudFxuICAgIGlmIChoZWFkZXJzKSB7XG4gICAgICAvLyBoYXZlIGFsbCBoZWFkZXIga2V5cyBpbiBsb3dlciBjYXNlIC0gdG8gbWFrZSBzaWduaW5nIGVhc3lcbiAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGhlYWRlcnMpKSB7XG4gICAgICAgIHJlcU9wdGlvbnMuaGVhZGVyc1trLnRvTG93ZXJDYXNlKCldID0gdlxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFVzZSBhbnkgcmVxdWVzdCBvcHRpb24gc3BlY2lmaWVkIGluIG1pbmlvQ2xpZW50LnNldFJlcXVlc3RPcHRpb25zKClcbiAgICByZXFPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5yZXFPcHRpb25zLCByZXFPcHRpb25zKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnJlcU9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiBfLm1hcFZhbHVlcyhfLnBpY2tCeShyZXFPcHRpb25zLmhlYWRlcnMsIGlzRGVmaW5lZCksICh2KSA9PiB2LnRvU3RyaW5nKCkpLFxuICAgICAgaG9zdCxcbiAgICAgIHBvcnQsXG4gICAgICBwYXRoLFxuICAgIH0gc2F0aXNmaWVzIGh0dHBzLlJlcXVlc3RPcHRpb25zXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc2V0Q3JlZGVudGlhbHNQcm92aWRlcihjcmVkZW50aWFsc1Byb3ZpZGVyOiBDcmVkZW50aWFsUHJvdmlkZXIpIHtcbiAgICBpZiAoIShjcmVkZW50aWFsc1Byb3ZpZGVyIGluc3RhbmNlb2YgQ3JlZGVudGlhbFByb3ZpZGVyKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZ2V0IGNyZWRlbnRpYWxzLiBFeHBlY3RlZCBpbnN0YW5jZSBvZiBDcmVkZW50aWFsUHJvdmlkZXInKVxuICAgIH1cbiAgICB0aGlzLmNyZWRlbnRpYWxzUHJvdmlkZXIgPSBjcmVkZW50aWFsc1Byb3ZpZGVyXG4gICAgYXdhaXQgdGhpcy5jaGVja0FuZFJlZnJlc2hDcmVkcygpXG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGNoZWNrQW5kUmVmcmVzaENyZWRzKCkge1xuICAgIGlmICh0aGlzLmNyZWRlbnRpYWxzUHJvdmlkZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWxzQ29uZiA9IGF3YWl0IHRoaXMuY3JlZGVudGlhbHNQcm92aWRlci5nZXRDcmVkZW50aWFscygpXG4gICAgICAgIHRoaXMuYWNjZXNzS2V5ID0gY3JlZGVudGlhbHNDb25mLmdldEFjY2Vzc0tleSgpXG4gICAgICAgIHRoaXMuc2VjcmV0S2V5ID0gY3JlZGVudGlhbHNDb25mLmdldFNlY3JldEtleSgpXG4gICAgICAgIHRoaXMuc2Vzc2lvblRva2VuID0gY3JlZGVudGlhbHNDb25mLmdldFNlc3Npb25Ub2tlbigpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGdldCBjcmVkZW50aWFsczogJHtlfWAsIHsgY2F1c2U6IGUgfSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGxvZ1N0cmVhbT86IHN0cmVhbS5Xcml0YWJsZVxuXG4gIC8qKlxuICAgKiBsb2cgdGhlIHJlcXVlc3QsIHJlc3BvbnNlLCBlcnJvclxuICAgKi9cbiAgcHJpdmF0ZSBsb2dIVFRQKHJlcU9wdGlvbnM6IElSZXF1ZXN0LCByZXNwb25zZTogaHR0cC5JbmNvbWluZ01lc3NhZ2UgfCBudWxsLCBlcnI/OiB1bmtub3duKSB7XG4gICAgLy8gaWYgbm8gbG9nU3RyZWFtIGF2YWlsYWJsZSByZXR1cm4uXG4gICAgaWYgKCF0aGlzLmxvZ1N0cmVhbSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmICghaXNPYmplY3QocmVxT3B0aW9ucykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlcU9wdGlvbnMgc2hvdWxkIGJlIG9mIHR5cGUgXCJvYmplY3RcIicpXG4gICAgfVxuICAgIGlmIChyZXNwb25zZSAmJiAhaXNSZWFkYWJsZVN0cmVhbShyZXNwb25zZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Jlc3BvbnNlIHNob3VsZCBiZSBvZiB0eXBlIFwiU3RyZWFtXCInKVxuICAgIH1cbiAgICBpZiAoZXJyICYmICEoZXJyIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlcnIgc2hvdWxkIGJlIG9mIHR5cGUgXCJFcnJvclwiJylcbiAgICB9XG4gICAgY29uc3QgbG9nU3RyZWFtID0gdGhpcy5sb2dTdHJlYW1cbiAgICBjb25zdCBsb2dIZWFkZXJzID0gKGhlYWRlcnM6IFJlcXVlc3RIZWFkZXJzKSA9PiB7XG4gICAgICBPYmplY3QuZW50cmllcyhoZWFkZXJzKS5mb3JFYWNoKChbaywgdl0pID0+IHtcbiAgICAgICAgaWYgKGsgPT0gJ2F1dGhvcml6YXRpb24nKSB7XG4gICAgICAgICAgaWYgKGlzU3RyaW5nKHYpKSB7XG4gICAgICAgICAgICBjb25zdCByZWRhY3RvciA9IG5ldyBSZWdFeHAoJ1NpZ25hdHVyZT0oWzAtOWEtZl0rKScpXG4gICAgICAgICAgICB2ID0gdi5yZXBsYWNlKHJlZGFjdG9yLCAnU2lnbmF0dXJlPSoqUkVEQUNURUQqKicpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxvZ1N0cmVhbS53cml0ZShgJHtrfTogJHt2fVxcbmApXG4gICAgICB9KVxuICAgICAgbG9nU3RyZWFtLndyaXRlKCdcXG4nKVxuICAgIH1cbiAgICBsb2dTdHJlYW0ud3JpdGUoYFJFUVVFU1Q6ICR7cmVxT3B0aW9ucy5tZXRob2R9ICR7cmVxT3B0aW9ucy5wYXRofVxcbmApXG4gICAgbG9nSGVhZGVycyhyZXFPcHRpb25zLmhlYWRlcnMpXG4gICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICB0aGlzLmxvZ1N0cmVhbS53cml0ZShgUkVTUE9OU0U6ICR7cmVzcG9uc2Uuc3RhdHVzQ29kZX1cXG5gKVxuICAgICAgbG9nSGVhZGVycyhyZXNwb25zZS5oZWFkZXJzIGFzIFJlcXVlc3RIZWFkZXJzKVxuICAgIH1cbiAgICBpZiAoZXJyKSB7XG4gICAgICBsb2dTdHJlYW0ud3JpdGUoJ0VSUk9SIEJPRFk6XFxuJylcbiAgICAgIGNvbnN0IGVyckpTT04gPSBKU09OLnN0cmluZ2lmeShlcnIsIG51bGwsICdcXHQnKVxuICAgICAgbG9nU3RyZWFtLndyaXRlKGAke2VyckpTT059XFxuYClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRW5hYmxlIHRyYWNpbmdcbiAgICovXG4gIHB1YmxpYyB0cmFjZU9uKHN0cmVhbT86IHN0cmVhbS5Xcml0YWJsZSkge1xuICAgIGlmICghc3RyZWFtKSB7XG4gICAgICBzdHJlYW0gPSBwcm9jZXNzLnN0ZG91dFxuICAgIH1cbiAgICB0aGlzLmxvZ1N0cmVhbSA9IHN0cmVhbVxuICB9XG5cbiAgLyoqXG4gICAqIERpc2FibGUgdHJhY2luZ1xuICAgKi9cbiAgcHVibGljIHRyYWNlT2ZmKCkge1xuICAgIHRoaXMubG9nU3RyZWFtID0gdW5kZWZpbmVkXG4gIH1cblxuICAvKipcbiAgICogbWFrZVJlcXVlc3QgaXMgdGhlIHByaW1pdGl2ZSB1c2VkIGJ5IHRoZSBhcGlzIGZvciBtYWtpbmcgUzMgcmVxdWVzdHMuXG4gICAqIHBheWxvYWQgY2FuIGJlIGVtcHR5IHN0cmluZyBpbiBjYXNlIG9mIG5vIHBheWxvYWQuXG4gICAqIHN0YXR1c0NvZGUgaXMgdGhlIGV4cGVjdGVkIHN0YXR1c0NvZGUuIElmIHJlc3BvbnNlLnN0YXR1c0NvZGUgZG9lcyBub3QgbWF0Y2hcbiAgICogd2UgcGFyc2UgdGhlIFhNTCBlcnJvciBhbmQgY2FsbCB0aGUgY2FsbGJhY2sgd2l0aCB0aGUgZXJyb3IgbWVzc2FnZS5cbiAgICpcbiAgICogQSB2YWxpZCByZWdpb24gaXMgcGFzc2VkIGJ5IHRoZSBjYWxscyAtIGxpc3RCdWNrZXRzLCBtYWtlQnVja2V0IGFuZCBnZXRCdWNrZXRSZWdpb24uXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgYXN5bmMgbWFrZVJlcXVlc3RBc3luYyhcbiAgICBvcHRpb25zOiBSZXF1ZXN0T3B0aW9uLFxuICAgIHBheWxvYWQ6IEJpbmFyeSA9ICcnLFxuICAgIGV4cGVjdGVkQ29kZXM6IG51bWJlcltdID0gWzIwMF0sXG4gICAgcmVnaW9uID0gJycsXG4gICk6IFByb21pc2U8aHR0cC5JbmNvbWluZ01lc3NhZ2U+IHtcbiAgICBpZiAoIWlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIHNob3VsZCBiZSBvZiB0eXBlIFwib2JqZWN0XCInKVxuICAgIH1cbiAgICBpZiAoIWlzU3RyaW5nKHBheWxvYWQpICYmICFpc09iamVjdChwYXlsb2FkKSkge1xuICAgICAgLy8gQnVmZmVyIGlzIG9mIHR5cGUgJ29iamVjdCdcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BheWxvYWQgc2hvdWxkIGJlIG9mIHR5cGUgXCJzdHJpbmdcIiBvciBcIkJ1ZmZlclwiJylcbiAgICB9XG4gICAgZXhwZWN0ZWRDb2Rlcy5mb3JFYWNoKChzdGF0dXNDb2RlKSA9PiB7XG4gICAgICBpZiAoIWlzTnVtYmVyKHN0YXR1c0NvZGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3N0YXR1c0NvZGUgc2hvdWxkIGJlIG9mIHR5cGUgXCJudW1iZXJcIicpXG4gICAgICB9XG4gICAgfSlcbiAgICBpZiAoIWlzU3RyaW5nKHJlZ2lvbikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlZ2lvbiBzaG91bGQgYmUgb2YgdHlwZSBcInN0cmluZ1wiJylcbiAgICB9XG4gICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgIG9wdGlvbnMuaGVhZGVycyA9IHt9XG4gICAgfVxuICAgIGlmIChvcHRpb25zLm1ldGhvZCA9PT0gJ1BPU1QnIHx8IG9wdGlvbnMubWV0aG9kID09PSAnUFVUJyB8fCBvcHRpb25zLm1ldGhvZCA9PT0gJ0RFTEVURScpIHtcbiAgICAgIG9wdGlvbnMuaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSA9IHBheWxvYWQubGVuZ3RoLnRvU3RyaW5nKClcbiAgICB9XG4gICAgY29uc3Qgc2hhMjU2c3VtID0gdGhpcy5lbmFibGVTSEEyNTYgPyB0b1NoYTI1NihwYXlsb2FkKSA6ICcnXG4gICAgcmV0dXJuIHRoaXMubWFrZVJlcXVlc3RTdHJlYW1Bc3luYyhvcHRpb25zLCBwYXlsb2FkLCBzaGEyNTZzdW0sIGV4cGVjdGVkQ29kZXMsIHJlZ2lvbilcbiAgfVxuXG4gIC8qKlxuICAgKiBuZXcgcmVxdWVzdCB3aXRoIHByb21pc2VcbiAgICpcbiAgICogTm8gbmVlZCB0byBkcmFpbiByZXNwb25zZSwgcmVzcG9uc2UgYm9keSBpcyBub3QgdmFsaWRcbiAgICovXG4gIGFzeW5jIG1ha2VSZXF1ZXN0QXN5bmNPbWl0KFxuICAgIG9wdGlvbnM6IFJlcXVlc3RPcHRpb24sXG4gICAgcGF5bG9hZDogQmluYXJ5ID0gJycsXG4gICAgc3RhdHVzQ29kZXM6IG51bWJlcltdID0gWzIwMF0sXG4gICAgcmVnaW9uID0gJycsXG4gICk6IFByb21pc2U8T21pdDxodHRwLkluY29taW5nTWVzc2FnZSwgJ29uJz4+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmMob3B0aW9ucywgcGF5bG9hZCwgc3RhdHVzQ29kZXMsIHJlZ2lvbilcbiAgICBhd2FpdCBkcmFpblJlc3BvbnNlKHJlcylcbiAgICByZXR1cm4gcmVzXG4gIH1cblxuICAvKipcbiAgICogbWFrZVJlcXVlc3RTdHJlYW0gd2lsbCBiZSB1c2VkIGRpcmVjdGx5IGluc3RlYWQgb2YgbWFrZVJlcXVlc3QgaW4gY2FzZSB0aGUgcGF5bG9hZFxuICAgKiBpcyBhdmFpbGFibGUgYXMgYSBzdHJlYW0uIGZvciBleC4gcHV0T2JqZWN0XG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgYXN5bmMgbWFrZVJlcXVlc3RTdHJlYW1Bc3luYyhcbiAgICBvcHRpb25zOiBSZXF1ZXN0T3B0aW9uLFxuICAgIGJvZHk6IHN0cmVhbS5SZWFkYWJsZSB8IEJpbmFyeSxcbiAgICBzaGEyNTZzdW06IHN0cmluZyxcbiAgICBzdGF0dXNDb2RlczogbnVtYmVyW10sXG4gICAgcmVnaW9uOiBzdHJpbmcsXG4gICk6IFByb21pc2U8aHR0cC5JbmNvbWluZ01lc3NhZ2U+IHtcbiAgICBpZiAoIWlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIHNob3VsZCBiZSBvZiB0eXBlIFwib2JqZWN0XCInKVxuICAgIH1cbiAgICBpZiAoIShCdWZmZXIuaXNCdWZmZXIoYm9keSkgfHwgdHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnIHx8IGlzUmVhZGFibGVTdHJlYW0oYm9keSkpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICBgc3RyZWFtIHNob3VsZCBiZSBhIEJ1ZmZlciwgc3RyaW5nIG9yIHJlYWRhYmxlIFN0cmVhbSwgZ290ICR7dHlwZW9mIGJvZHl9IGluc3RlYWRgLFxuICAgICAgKVxuICAgIH1cbiAgICBpZiAoIWlzU3RyaW5nKHNoYTI1NnN1bSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NoYTI1NnN1bSBzaG91bGQgYmUgb2YgdHlwZSBcInN0cmluZ1wiJylcbiAgICB9XG4gICAgc3RhdHVzQ29kZXMuZm9yRWFjaCgoc3RhdHVzQ29kZSkgPT4ge1xuICAgICAgaWYgKCFpc051bWJlcihzdGF0dXNDb2RlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzdGF0dXNDb2RlIHNob3VsZCBiZSBvZiB0eXBlIFwibnVtYmVyXCInKVxuICAgICAgfVxuICAgIH0pXG4gICAgaWYgKCFpc1N0cmluZyhyZWdpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWdpb24gc2hvdWxkIGJlIG9mIHR5cGUgXCJzdHJpbmdcIicpXG4gICAgfVxuICAgIC8vIHNoYTI1NnN1bSB3aWxsIGJlIGVtcHR5IGZvciBhbm9ueW1vdXMgb3IgaHR0cHMgcmVxdWVzdHNcbiAgICBpZiAoIXRoaXMuZW5hYmxlU0hBMjU2ICYmIHNoYTI1NnN1bS5sZW5ndGggIT09IDApIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoYHNoYTI1NnN1bSBleHBlY3RlZCB0byBiZSBlbXB0eSBmb3IgYW5vbnltb3VzIG9yIGh0dHBzIHJlcXVlc3RzYClcbiAgICB9XG4gICAgLy8gc2hhMjU2c3VtIHNob3VsZCBiZSB2YWxpZCBmb3Igbm9uLWFub255bW91cyBodHRwIHJlcXVlc3RzLlxuICAgIGlmICh0aGlzLmVuYWJsZVNIQTI1NiAmJiBzaGEyNTZzdW0ubGVuZ3RoICE9PSA2NCkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcihgSW52YWxpZCBzaGEyNTZzdW0gOiAke3NoYTI1NnN1bX1gKVxuICAgIH1cblxuICAgIGF3YWl0IHRoaXMuY2hlY2tBbmRSZWZyZXNoQ3JlZHMoKVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICByZWdpb24gPSByZWdpb24gfHwgKGF3YWl0IHRoaXMuZ2V0QnVja2V0UmVnaW9uQXN5bmMob3B0aW9ucy5idWNrZXROYW1lISkpXG5cbiAgICBjb25zdCByZXFPcHRpb25zID0gdGhpcy5nZXRSZXF1ZXN0T3B0aW9ucyh7IC4uLm9wdGlvbnMsIHJlZ2lvbiB9KVxuICAgIGlmICghdGhpcy5hbm9ueW1vdXMpIHtcbiAgICAgIC8vIEZvciBub24tYW5vbnltb3VzIGh0dHBzIHJlcXVlc3RzIHNoYTI1NnN1bSBpcyAnVU5TSUdORUQtUEFZTE9BRCcgZm9yIHNpZ25hdHVyZSBjYWxjdWxhdGlvbi5cbiAgICAgIGlmICghdGhpcy5lbmFibGVTSEEyNTYpIHtcbiAgICAgICAgc2hhMjU2c3VtID0gJ1VOU0lHTkVELVBBWUxPQUQnXG4gICAgICB9XG4gICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKVxuICAgICAgcmVxT3B0aW9ucy5oZWFkZXJzWyd4LWFtei1kYXRlJ10gPSBtYWtlRGF0ZUxvbmcoZGF0ZSlcbiAgICAgIHJlcU9wdGlvbnMuaGVhZGVyc1sneC1hbXotY29udGVudC1zaGEyNTYnXSA9IHNoYTI1NnN1bVxuICAgICAgaWYgKHRoaXMuc2Vzc2lvblRva2VuKSB7XG4gICAgICAgIHJlcU9wdGlvbnMuaGVhZGVyc1sneC1hbXotc2VjdXJpdHktdG9rZW4nXSA9IHRoaXMuc2Vzc2lvblRva2VuXG4gICAgICB9XG4gICAgICByZXFPcHRpb25zLmhlYWRlcnMuYXV0aG9yaXphdGlvbiA9IHNpZ25WNChyZXFPcHRpb25zLCB0aGlzLmFjY2Vzc0tleSwgdGhpcy5zZWNyZXRLZXksIHJlZ2lvbiwgZGF0ZSwgc2hhMjU2c3VtKVxuICAgIH1cblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdFdpdGhSZXRyeSh0aGlzLnRyYW5zcG9ydCwgcmVxT3B0aW9ucywgYm9keSlcbiAgICBpZiAoIXJlc3BvbnNlLnN0YXR1c0NvZGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkJVRzogcmVzcG9uc2UgZG9lc24ndCBoYXZlIGEgc3RhdHVzQ29kZVwiKVxuICAgIH1cblxuICAgIGlmICghc3RhdHVzQ29kZXMuaW5jbHVkZXMocmVzcG9uc2Uuc3RhdHVzQ29kZSkpIHtcbiAgICAgIC8vIEZvciBhbiBpbmNvcnJlY3QgcmVnaW9uLCBTMyBzZXJ2ZXIgYWx3YXlzIHNlbmRzIGJhY2sgNDAwLlxuICAgICAgLy8gQnV0IHdlIHdpbGwgZG8gY2FjaGUgaW52YWxpZGF0aW9uIGZvciBhbGwgZXJyb3JzIHNvIHRoYXQsXG4gICAgICAvLyBpbiBmdXR1cmUsIGlmIEFXUyBTMyBkZWNpZGVzIHRvIHNlbmQgYSBkaWZmZXJlbnQgc3RhdHVzIGNvZGUgb3JcbiAgICAgIC8vIFhNTCBlcnJvciBjb2RlIHdlIHdpbGwgc3RpbGwgd29yayBmaW5lLlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgIGRlbGV0ZSB0aGlzLnJlZ2lvbk1hcFtvcHRpb25zLmJ1Y2tldE5hbWUhXVxuXG4gICAgICBjb25zdCBlcnIgPSBhd2FpdCB4bWxQYXJzZXJzLnBhcnNlUmVzcG9uc2VFcnJvcihyZXNwb25zZSlcbiAgICAgIHRoaXMubG9nSFRUUChyZXFPcHRpb25zLCByZXNwb25zZSwgZXJyKVxuICAgICAgdGhyb3cgZXJyXG4gICAgfVxuXG4gICAgdGhpcy5sb2dIVFRQKHJlcU9wdGlvbnMsIHJlc3BvbnNlKVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH1cblxuICAvKipcbiAgICogZ2V0cyB0aGUgcmVnaW9uIG9mIHRoZSBidWNrZXRcbiAgICpcbiAgICogQHBhcmFtIGJ1Y2tldE5hbWVcbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwcm90ZWN0ZWQgYXN5bmMgZ2V0QnVja2V0UmVnaW9uQXN5bmMoYnVja2V0TmFtZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBpZiAoIWlzVmFsaWRCdWNrZXROYW1lKGJ1Y2tldE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRCdWNrZXROYW1lRXJyb3IoYEludmFsaWQgYnVja2V0IG5hbWUgOiAke2J1Y2tldE5hbWV9YClcbiAgICB9XG5cbiAgICAvLyBSZWdpb24gaXMgc2V0IHdpdGggY29uc3RydWN0b3IsIHJldHVybiB0aGUgcmVnaW9uIHJpZ2h0IGhlcmUuXG4gICAgaWYgKHRoaXMucmVnaW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWdpb25cbiAgICB9XG5cbiAgICBjb25zdCBjYWNoZWQgPSB0aGlzLnJlZ2lvbk1hcFtidWNrZXROYW1lXVxuICAgIGlmIChjYWNoZWQpIHtcbiAgICAgIHJldHVybiBjYWNoZWRcbiAgICB9XG5cbiAgICBjb25zdCBleHRyYWN0UmVnaW9uQXN5bmMgPSBhc3luYyAocmVzcG9uc2U6IGh0dHAuSW5jb21pbmdNZXNzYWdlKSA9PiB7XG4gICAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVhZEFzU3RyaW5nKHJlc3BvbnNlKVxuICAgICAgY29uc3QgcmVnaW9uID0geG1sUGFyc2Vycy5wYXJzZUJ1Y2tldFJlZ2lvbihib2R5KSB8fCBERUZBVUxUX1JFR0lPTlxuICAgICAgdGhpcy5yZWdpb25NYXBbYnVja2V0TmFtZV0gPSByZWdpb25cbiAgICAgIHJldHVybiByZWdpb25cbiAgICB9XG5cbiAgICBjb25zdCBtZXRob2QgPSAnR0VUJ1xuICAgIGNvbnN0IHF1ZXJ5ID0gJ2xvY2F0aW9uJ1xuICAgIC8vIGBnZXRCdWNrZXRMb2NhdGlvbmAgYmVoYXZlcyBkaWZmZXJlbnRseSBpbiBmb2xsb3dpbmcgd2F5cyBmb3JcbiAgICAvLyBkaWZmZXJlbnQgZW52aXJvbm1lbnRzLlxuICAgIC8vXG4gICAgLy8gLSBGb3Igbm9kZWpzIGVudiB3ZSBkZWZhdWx0IHRvIHBhdGggc3R5bGUgcmVxdWVzdHMuXG4gICAgLy8gLSBGb3IgYnJvd3NlciBlbnYgcGF0aCBzdHlsZSByZXF1ZXN0cyBvbiBidWNrZXRzIHlpZWxkcyBDT1JTXG4gICAgLy8gICBlcnJvci4gVG8gY2lyY3VtdmVudCB0aGlzIHByb2JsZW0gd2UgbWFrZSBhIHZpcnR1YWwgaG9zdFxuICAgIC8vICAgc3R5bGUgcmVxdWVzdCBzaWduZWQgd2l0aCAndXMtZWFzdC0xJy4gVGhpcyByZXF1ZXN0IGZhaWxzXG4gICAgLy8gICB3aXRoIGFuIGVycm9yICdBdXRob3JpemF0aW9uSGVhZGVyTWFsZm9ybWVkJywgYWRkaXRpb25hbGx5XG4gICAgLy8gICB0aGUgZXJyb3IgWE1MIGFsc28gcHJvdmlkZXMgUmVnaW9uIG9mIHRoZSBidWNrZXQuIFRvIHZhbGlkYXRlXG4gICAgLy8gICB0aGlzIHJlZ2lvbiBpcyBwcm9wZXIgd2UgcmV0cnkgdGhlIHNhbWUgcmVxdWVzdCB3aXRoIHRoZSBuZXdseVxuICAgIC8vICAgb2J0YWluZWQgcmVnaW9uLlxuICAgIGNvbnN0IHBhdGhTdHlsZSA9IHRoaXMucGF0aFN0eWxlICYmICFpc0Jyb3dzZXJcbiAgICBsZXQgcmVnaW9uOiBzdHJpbmdcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdEFzeW5jKHsgbWV0aG9kLCBidWNrZXROYW1lLCBxdWVyeSwgcGF0aFN0eWxlIH0sICcnLCBbMjAwXSwgREVGQVVMVF9SRUdJT04pXG4gICAgICByZXR1cm4gZXh0cmFjdFJlZ2lvbkFzeW5jKHJlcylcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBtYWtlIGFsaWdubWVudCB3aXRoIG1jIGNsaVxuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBlcnJvcnMuUzNFcnJvcikge1xuICAgICAgICBjb25zdCBlcnJDb2RlID0gZS5jb2RlXG4gICAgICAgIGNvbnN0IGVyclJlZ2lvbiA9IGUucmVnaW9uXG4gICAgICAgIGlmIChlcnJDb2RlID09PSAnQWNjZXNzRGVuaWVkJyAmJiAhZXJyUmVnaW9uKSB7XG4gICAgICAgICAgcmV0dXJuIERFRkFVTFRfUkVHSU9OXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGlmICghKGUubmFtZSA9PT0gJ0F1dGhvcml6YXRpb25IZWFkZXJNYWxmb3JtZWQnKSkge1xuICAgICAgICB0aHJvdyBlXG4gICAgICB9XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHdlIHNldCBleHRyYSBwcm9wZXJ0aWVzIG9uIGVycm9yIG9iamVjdFxuICAgICAgcmVnaW9uID0gZS5SZWdpb24gYXMgc3RyaW5nXG4gICAgICBpZiAoIXJlZ2lvbikge1xuICAgICAgICB0aHJvdyBlXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdEFzeW5jKHsgbWV0aG9kLCBidWNrZXROYW1lLCBxdWVyeSwgcGF0aFN0eWxlIH0sICcnLCBbMjAwXSwgcmVnaW9uKVxuICAgIHJldHVybiBhd2FpdCBleHRyYWN0UmVnaW9uQXN5bmMocmVzKVxuICB9XG5cbiAgLyoqXG4gICAqIG1ha2VSZXF1ZXN0IGlzIHRoZSBwcmltaXRpdmUgdXNlZCBieSB0aGUgYXBpcyBmb3IgbWFraW5nIFMzIHJlcXVlc3RzLlxuICAgKiBwYXlsb2FkIGNhbiBiZSBlbXB0eSBzdHJpbmcgaW4gY2FzZSBvZiBubyBwYXlsb2FkLlxuICAgKiBzdGF0dXNDb2RlIGlzIHRoZSBleHBlY3RlZCBzdGF0dXNDb2RlLiBJZiByZXNwb25zZS5zdGF0dXNDb2RlIGRvZXMgbm90IG1hdGNoXG4gICAqIHdlIHBhcnNlIHRoZSBYTUwgZXJyb3IgYW5kIGNhbGwgdGhlIGNhbGxiYWNrIHdpdGggdGhlIGVycm9yIG1lc3NhZ2UuXG4gICAqIEEgdmFsaWQgcmVnaW9uIGlzIHBhc3NlZCBieSB0aGUgY2FsbHMgLSBsaXN0QnVja2V0cywgbWFrZUJ1Y2tldCBhbmRcbiAgICogZ2V0QnVja2V0UmVnaW9uLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgYG1ha2VSZXF1ZXN0QXN5bmNgIGluc3RlYWRcbiAgICovXG4gIG1ha2VSZXF1ZXN0KFxuICAgIG9wdGlvbnM6IFJlcXVlc3RPcHRpb24sXG4gICAgcGF5bG9hZDogQmluYXJ5ID0gJycsXG4gICAgZXhwZWN0ZWRDb2RlczogbnVtYmVyW10gPSBbMjAwXSxcbiAgICByZWdpb24gPSAnJyxcbiAgICByZXR1cm5SZXNwb25zZTogYm9vbGVhbixcbiAgICBjYjogKGNiOiB1bmtub3duLCByZXN1bHQ6IGh0dHAuSW5jb21pbmdNZXNzYWdlKSA9PiB2b2lkLFxuICApIHtcbiAgICBsZXQgcHJvbTogUHJvbWlzZTxodHRwLkluY29taW5nTWVzc2FnZT5cbiAgICBpZiAocmV0dXJuUmVzcG9uc2UpIHtcbiAgICAgIHByb20gPSB0aGlzLm1ha2VSZXF1ZXN0QXN5bmMob3B0aW9ucywgcGF5bG9hZCwgZXhwZWN0ZWRDb2RlcywgcmVnaW9uKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGNvbXBhdGlibGUgZm9yIG9sZCBiZWhhdmlvdXJcbiAgICAgIHByb20gPSB0aGlzLm1ha2VSZXF1ZXN0QXN5bmNPbWl0KG9wdGlvbnMsIHBheWxvYWQsIGV4cGVjdGVkQ29kZXMsIHJlZ2lvbilcbiAgICB9XG5cbiAgICBwcm9tLnRoZW4oXG4gICAgICAocmVzdWx0KSA9PiBjYihudWxsLCByZXN1bHQpLFxuICAgICAgKGVycikgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY2IoZXJyKVxuICAgICAgfSxcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogbWFrZVJlcXVlc3RTdHJlYW0gd2lsbCBiZSB1c2VkIGRpcmVjdGx5IGluc3RlYWQgb2YgbWFrZVJlcXVlc3QgaW4gY2FzZSB0aGUgcGF5bG9hZFxuICAgKiBpcyBhdmFpbGFibGUgYXMgYSBzdHJlYW0uIGZvciBleC4gcHV0T2JqZWN0XG4gICAqXG4gICAqIEBkZXByZWNhdGVkIHVzZSBgbWFrZVJlcXVlc3RTdHJlYW1Bc3luY2AgaW5zdGVhZFxuICAgKi9cbiAgbWFrZVJlcXVlc3RTdHJlYW0oXG4gICAgb3B0aW9uczogUmVxdWVzdE9wdGlvbixcbiAgICBzdHJlYW06IHN0cmVhbS5SZWFkYWJsZSB8IEJ1ZmZlcixcbiAgICBzaGEyNTZzdW06IHN0cmluZyxcbiAgICBzdGF0dXNDb2RlczogbnVtYmVyW10sXG4gICAgcmVnaW9uOiBzdHJpbmcsXG4gICAgcmV0dXJuUmVzcG9uc2U6IGJvb2xlYW4sXG4gICAgY2I6IChjYjogdW5rbm93biwgcmVzdWx0OiBodHRwLkluY29taW5nTWVzc2FnZSkgPT4gdm9pZCxcbiAgKSB7XG4gICAgY29uc3QgZXhlY3V0b3IgPSBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0U3RyZWFtQXN5bmMob3B0aW9ucywgc3RyZWFtLCBzaGEyNTZzdW0sIHN0YXR1c0NvZGVzLCByZWdpb24pXG4gICAgICBpZiAoIXJldHVyblJlc3BvbnNlKSB7XG4gICAgICAgIGF3YWl0IGRyYWluUmVzcG9uc2UocmVzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzXG4gICAgfVxuXG4gICAgZXhlY3V0b3IoKS50aGVuKFxuICAgICAgKHJlc3VsdCkgPT4gY2IobnVsbCwgcmVzdWx0KSxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIChlcnIpID0+IGNiKGVyciksXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHVzZSBgZ2V0QnVja2V0UmVnaW9uQXN5bmNgIGluc3RlYWRcbiAgICovXG4gIGdldEJ1Y2tldFJlZ2lvbihidWNrZXROYW1lOiBzdHJpbmcsIGNiOiAoZXJyOiB1bmtub3duLCByZWdpb246IHN0cmluZykgPT4gdm9pZCkge1xuICAgIHJldHVybiB0aGlzLmdldEJ1Y2tldFJlZ2lvbkFzeW5jKGJ1Y2tldE5hbWUpLnRoZW4oXG4gICAgICAocmVzdWx0KSA9PiBjYihudWxsLCByZXN1bHQpLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgKGVycikgPT4gY2IoZXJyKSxcbiAgICApXG4gIH1cblxuICAvLyBCdWNrZXQgb3BlcmF0aW9uc1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSBidWNrZXQgYGJ1Y2tldE5hbWVgLlxuICAgKlxuICAgKi9cbiAgYXN5bmMgbWFrZUJ1Y2tldChidWNrZXROYW1lOiBzdHJpbmcsIHJlZ2lvbjogUmVnaW9uID0gJycsIG1ha2VPcHRzPzogTWFrZUJ1Y2tldE9wdCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICghaXNWYWxpZEJ1Y2tldE5hbWUoYnVja2V0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEJ1Y2tldE5hbWVFcnJvcignSW52YWxpZCBidWNrZXQgbmFtZTogJyArIGJ1Y2tldE5hbWUpXG4gICAgfVxuICAgIC8vIEJhY2t3YXJkIENvbXBhdGliaWxpdHlcbiAgICBpZiAoaXNPYmplY3QocmVnaW9uKSkge1xuICAgICAgbWFrZU9wdHMgPSByZWdpb25cbiAgICAgIHJlZ2lvbiA9ICcnXG4gICAgfVxuXG4gICAgaWYgKCFpc1N0cmluZyhyZWdpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWdpb24gc2hvdWxkIGJlIG9mIHR5cGUgXCJzdHJpbmdcIicpXG4gICAgfVxuICAgIGlmIChtYWtlT3B0cyAmJiAhaXNPYmplY3QobWFrZU9wdHMpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtYWtlT3B0cyBzaG91bGQgYmUgb2YgdHlwZSBcIm9iamVjdFwiJylcbiAgICB9XG5cbiAgICBsZXQgcGF5bG9hZCA9ICcnXG5cbiAgICAvLyBSZWdpb24gYWxyZWFkeSBzZXQgaW4gY29uc3RydWN0b3IsIHZhbGlkYXRlIGlmXG4gICAgLy8gY2FsbGVyIHJlcXVlc3RlZCBidWNrZXQgbG9jYXRpb24gaXMgc2FtZS5cbiAgICBpZiAocmVnaW9uICYmIHRoaXMucmVnaW9uKSB7XG4gICAgICBpZiAocmVnaW9uICE9PSB0aGlzLnJlZ2lvbikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKGBDb25maWd1cmVkIHJlZ2lvbiAke3RoaXMucmVnaW9ufSwgcmVxdWVzdGVkICR7cmVnaW9ufWApXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHNlbmRpbmcgbWFrZUJ1Y2tldCByZXF1ZXN0IHdpdGggWE1MIGNvbnRhaW5pbmcgJ3VzLWVhc3QtMScgZmFpbHMuIEZvclxuICAgIC8vIGRlZmF1bHQgcmVnaW9uIHNlcnZlciBleHBlY3RzIHRoZSByZXF1ZXN0IHdpdGhvdXQgYm9keVxuICAgIGlmIChyZWdpb24gJiYgcmVnaW9uICE9PSBERUZBVUxUX1JFR0lPTikge1xuICAgICAgcGF5bG9hZCA9IHhtbC5idWlsZE9iamVjdCh7XG4gICAgICAgIENyZWF0ZUJ1Y2tldENvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICAkOiB7IHhtbG5zOiAnaHR0cDovL3MzLmFtYXpvbmF3cy5jb20vZG9jLzIwMDYtMDMtMDEvJyB9LFxuICAgICAgICAgIExvY2F0aW9uQ29uc3RyYWludDogcmVnaW9uLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gJ1BVVCdcbiAgICBjb25zdCBoZWFkZXJzOiBSZXF1ZXN0SGVhZGVycyA9IHt9XG5cbiAgICBpZiAobWFrZU9wdHMgJiYgbWFrZU9wdHMuT2JqZWN0TG9ja2luZykge1xuICAgICAgaGVhZGVyc1sneC1hbXotYnVja2V0LW9iamVjdC1sb2NrLWVuYWJsZWQnXSA9IHRydWVcbiAgICB9XG5cbiAgICAvLyBGb3IgY3VzdG9tIHJlZ2lvbiBjbGllbnRzICBkZWZhdWx0IHRvIGN1c3RvbSByZWdpb24gc3BlY2lmaWVkIGluIGNsaWVudCBjb25zdHJ1Y3RvclxuICAgIGNvbnN0IGZpbmFsUmVnaW9uID0gdGhpcy5yZWdpb24gfHwgcmVnaW9uIHx8IERFRkFVTFRfUkVHSU9OXG5cbiAgICBjb25zdCByZXF1ZXN0T3B0OiBSZXF1ZXN0T3B0aW9uID0geyBtZXRob2QsIGJ1Y2tldE5hbWUsIGhlYWRlcnMgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMubWFrZVJlcXVlc3RBc3luY09taXQocmVxdWVzdE9wdCwgcGF5bG9hZCwgWzIwMF0sIGZpbmFsUmVnaW9uKVxuICAgIH0gY2F0Y2ggKGVycjogdW5rbm93bikge1xuICAgICAgaWYgKHJlZ2lvbiA9PT0gJycgfHwgcmVnaW9uID09PSBERUZBVUxUX1JFR0lPTikge1xuICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgZXJyb3JzLlMzRXJyb3IpIHtcbiAgICAgICAgICBjb25zdCBlcnJDb2RlID0gZXJyLmNvZGVcbiAgICAgICAgICBjb25zdCBlcnJSZWdpb24gPSBlcnIucmVnaW9uXG4gICAgICAgICAgaWYgKGVyckNvZGUgPT09ICdBdXRob3JpemF0aW9uSGVhZGVyTWFsZm9ybWVkJyAmJiBlcnJSZWdpb24gIT09ICcnKSB7XG4gICAgICAgICAgICAvLyBSZXRyeSB3aXRoIHJlZ2lvbiByZXR1cm5lZCBhcyBwYXJ0IG9mIGVycm9yXG4gICAgICAgICAgICBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmNPbWl0KHJlcXVlc3RPcHQsIHBheWxvYWQsIFsyMDBdLCBlcnJDb2RlKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhyb3cgZXJyXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRvIGNoZWNrIGlmIGEgYnVja2V0IGFscmVhZHkgZXhpc3RzLlxuICAgKi9cbiAgYXN5bmMgYnVja2V0RXhpc3RzKGJ1Y2tldE5hbWU6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGlmICghaXNWYWxpZEJ1Y2tldE5hbWUoYnVja2V0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEJ1Y2tldE5hbWVFcnJvcignSW52YWxpZCBidWNrZXQgbmFtZTogJyArIGJ1Y2tldE5hbWUpXG4gICAgfVxuICAgIGNvbnN0IG1ldGhvZCA9ICdIRUFEJ1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmNPbWl0KHsgbWV0aG9kLCBidWNrZXROYW1lIH0pXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBpZiAoZXJyLmNvZGUgPT09ICdOb1N1Y2hCdWNrZXQnIHx8IGVyci5jb2RlID09PSAnTm90Rm91bmQnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgdGhyb3cgZXJyXG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGFzeW5jIHJlbW92ZUJ1Y2tldChidWNrZXROYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHVzZSBwcm9taXNlIHN0eWxlIEFQSVxuICAgKi9cbiAgcmVtb3ZlQnVja2V0KGJ1Y2tldE5hbWU6IHN0cmluZywgY2FsbGJhY2s6IE5vUmVzdWx0Q2FsbGJhY2spOiB2b2lkXG5cbiAgYXN5bmMgcmVtb3ZlQnVja2V0KGJ1Y2tldE5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICghaXNWYWxpZEJ1Y2tldE5hbWUoYnVja2V0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEJ1Y2tldE5hbWVFcnJvcignSW52YWxpZCBidWNrZXQgbmFtZTogJyArIGJ1Y2tldE5hbWUpXG4gICAgfVxuICAgIGNvbnN0IG1ldGhvZCA9ICdERUxFVEUnXG4gICAgYXdhaXQgdGhpcy5tYWtlUmVxdWVzdEFzeW5jT21pdCh7IG1ldGhvZCwgYnVja2V0TmFtZSB9LCAnJywgWzIwNF0pXG4gICAgZGVsZXRlIHRoaXMucmVnaW9uTWFwW2J1Y2tldE5hbWVdXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGJhY2sgaXMgY2FsbGVkIHdpdGggcmVhZGFibGUgc3RyZWFtIG9mIHRoZSBvYmplY3QgY29udGVudC5cbiAgICovXG4gIGFzeW5jIGdldE9iamVjdChidWNrZXROYW1lOiBzdHJpbmcsIG9iamVjdE5hbWU6IHN0cmluZywgZ2V0T3B0cz86IEdldE9iamVjdE9wdHMpOiBQcm9taXNlPHN0cmVhbS5SZWFkYWJsZT4ge1xuICAgIGlmICghaXNWYWxpZEJ1Y2tldE5hbWUoYnVja2V0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEJ1Y2tldE5hbWVFcnJvcignSW52YWxpZCBidWNrZXQgbmFtZTogJyArIGJ1Y2tldE5hbWUpXG4gICAgfVxuICAgIGlmICghaXNWYWxpZE9iamVjdE5hbWUob2JqZWN0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZE9iamVjdE5hbWVFcnJvcihgSW52YWxpZCBvYmplY3QgbmFtZTogJHtvYmplY3ROYW1lfWApXG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldFBhcnRpYWxPYmplY3QoYnVja2V0TmFtZSwgb2JqZWN0TmFtZSwgMCwgMCwgZ2V0T3B0cylcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBpcyBjYWxsZWQgd2l0aCByZWFkYWJsZSBzdHJlYW0gb2YgdGhlIHBhcnRpYWwgb2JqZWN0IGNvbnRlbnQuXG4gICAqIEBwYXJhbSBidWNrZXROYW1lXG4gICAqIEBwYXJhbSBvYmplY3ROYW1lXG4gICAqIEBwYXJhbSBvZmZzZXRcbiAgICogQHBhcmFtIGxlbmd0aCAtIGxlbmd0aCBvZiB0aGUgb2JqZWN0IHRoYXQgd2lsbCBiZSByZWFkIGluIHRoZSBzdHJlYW0gKG9wdGlvbmFsLCBpZiBub3Qgc3BlY2lmaWVkIHdlIHJlYWQgdGhlIHJlc3Qgb2YgdGhlIGZpbGUgZnJvbSB0aGUgb2Zmc2V0KVxuICAgKiBAcGFyYW0gZ2V0T3B0c1xuICAgKi9cbiAgYXN5bmMgZ2V0UGFydGlhbE9iamVjdChcbiAgICBidWNrZXROYW1lOiBzdHJpbmcsXG4gICAgb2JqZWN0TmFtZTogc3RyaW5nLFxuICAgIG9mZnNldDogbnVtYmVyLFxuICAgIGxlbmd0aCA9IDAsXG4gICAgZ2V0T3B0cz86IEdldE9iamVjdE9wdHMsXG4gICk6IFByb21pc2U8c3RyZWFtLlJlYWRhYmxlPiB7XG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZShidWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKCdJbnZhbGlkIGJ1Y2tldCBuYW1lOiAnICsgYnVja2V0TmFtZSlcbiAgICB9XG4gICAgaWYgKCFpc1ZhbGlkT2JqZWN0TmFtZShvYmplY3ROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkT2JqZWN0TmFtZUVycm9yKGBJbnZhbGlkIG9iamVjdCBuYW1lOiAke29iamVjdE5hbWV9YClcbiAgICB9XG4gICAgaWYgKCFpc051bWJlcihvZmZzZXQpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvZmZzZXQgc2hvdWxkIGJlIG9mIHR5cGUgXCJudW1iZXJcIicpXG4gICAgfVxuICAgIGlmICghaXNOdW1iZXIobGVuZ3RoKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbGVuZ3RoIHNob3VsZCBiZSBvZiB0eXBlIFwibnVtYmVyXCInKVxuICAgIH1cblxuICAgIGxldCByYW5nZSA9ICcnXG4gICAgaWYgKG9mZnNldCB8fCBsZW5ndGgpIHtcbiAgICAgIGlmIChvZmZzZXQpIHtcbiAgICAgICAgcmFuZ2UgPSBgYnl0ZXM9JHsrb2Zmc2V0fS1gXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByYW5nZSA9ICdieXRlcz0wLSdcbiAgICAgICAgb2Zmc2V0ID0gMFxuICAgICAgfVxuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICByYW5nZSArPSBgJHsrbGVuZ3RoICsgb2Zmc2V0IC0gMX1gXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHF1ZXJ5ID0gJydcbiAgICBsZXQgaGVhZGVyczogUmVxdWVzdEhlYWRlcnMgPSB7XG4gICAgICAuLi4ocmFuZ2UgIT09ICcnICYmIHsgcmFuZ2UgfSksXG4gICAgfVxuXG4gICAgaWYgKGdldE9wdHMpIHtcbiAgICAgIGNvbnN0IHNzZUhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgICAgIC4uLihnZXRPcHRzLlNTRUN1c3RvbWVyQWxnb3JpdGhtICYmIHtcbiAgICAgICAgICAnWC1BbXotU2VydmVyLVNpZGUtRW5jcnlwdGlvbi1DdXN0b21lci1BbGdvcml0aG0nOiBnZXRPcHRzLlNTRUN1c3RvbWVyQWxnb3JpdGhtLFxuICAgICAgICB9KSxcbiAgICAgICAgLi4uKGdldE9wdHMuU1NFQ3VzdG9tZXJLZXkgJiYgeyAnWC1BbXotU2VydmVyLVNpZGUtRW5jcnlwdGlvbi1DdXN0b21lci1LZXknOiBnZXRPcHRzLlNTRUN1c3RvbWVyS2V5IH0pLFxuICAgICAgICAuLi4oZ2V0T3B0cy5TU0VDdXN0b21lcktleU1ENSAmJiB7XG4gICAgICAgICAgJ1gtQW16LVNlcnZlci1TaWRlLUVuY3J5cHRpb24tQ3VzdG9tZXItS2V5LU1ENSc6IGdldE9wdHMuU1NFQ3VzdG9tZXJLZXlNRDUsXG4gICAgICAgIH0pLFxuICAgICAgfVxuICAgICAgcXVlcnkgPSBxcy5zdHJpbmdpZnkoZ2V0T3B0cylcbiAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgIC4uLnByZXBlbmRYQU1aTWV0YShzc2VIZWFkZXJzKSxcbiAgICAgICAgLi4uaGVhZGVycyxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBleHBlY3RlZFN0YXR1c0NvZGVzID0gWzIwMF1cbiAgICBpZiAocmFuZ2UpIHtcbiAgICAgIGV4cGVjdGVkU3RhdHVzQ29kZXMucHVzaCgyMDYpXG4gICAgfVxuICAgIGNvbnN0IG1ldGhvZCA9ICdHRVQnXG5cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdEFzeW5jKHsgbWV0aG9kLCBidWNrZXROYW1lLCBvYmplY3ROYW1lLCBoZWFkZXJzLCBxdWVyeSB9LCAnJywgZXhwZWN0ZWRTdGF0dXNDb2RlcylcbiAgfVxuXG4gIC8qKlxuICAgKiBkb3dubG9hZCBvYmplY3QgY29udGVudCB0byBhIGZpbGUuXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgY3JlYXRlIGEgdGVtcCBmaWxlIG5hbWVkIGAke2ZpbGVuYW1lfS4ke2Jhc2U2NChldGFnKX0ucGFydC5taW5pb2Agd2hlbiBkb3dubG9hZGluZy5cbiAgICpcbiAgICogQHBhcmFtIGJ1Y2tldE5hbWUgLSBuYW1lIG9mIHRoZSBidWNrZXRcbiAgICogQHBhcmFtIG9iamVjdE5hbWUgLSBuYW1lIG9mIHRoZSBvYmplY3RcbiAgICogQHBhcmFtIGZpbGVQYXRoIC0gcGF0aCB0byB3aGljaCB0aGUgb2JqZWN0IGRhdGEgd2lsbCBiZSB3cml0dGVuIHRvXG4gICAqIEBwYXJhbSBnZXRPcHRzIC0gT3B0aW9uYWwgb2JqZWN0IGdldCBvcHRpb25cbiAgICovXG4gIGFzeW5jIGZHZXRPYmplY3QoYnVja2V0TmFtZTogc3RyaW5nLCBvYmplY3ROYW1lOiBzdHJpbmcsIGZpbGVQYXRoOiBzdHJpbmcsIGdldE9wdHM/OiBHZXRPYmplY3RPcHRzKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gSW5wdXQgdmFsaWRhdGlvbi5cbiAgICBpZiAoIWlzVmFsaWRCdWNrZXROYW1lKGJ1Y2tldE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRCdWNrZXROYW1lRXJyb3IoJ0ludmFsaWQgYnVja2V0IG5hbWU6ICcgKyBidWNrZXROYW1lKVxuICAgIH1cbiAgICBpZiAoIWlzVmFsaWRPYmplY3ROYW1lKG9iamVjdE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRPYmplY3ROYW1lRXJyb3IoYEludmFsaWQgb2JqZWN0IG5hbWU6ICR7b2JqZWN0TmFtZX1gKVxuICAgIH1cbiAgICBpZiAoIWlzU3RyaW5nKGZpbGVQYXRoKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZmlsZVBhdGggc2hvdWxkIGJlIG9mIHR5cGUgXCJzdHJpbmdcIicpXG4gICAgfVxuXG4gICAgY29uc3QgZG93bmxvYWRUb1RtcEZpbGUgPSBhc3luYyAoKTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcbiAgICAgIGxldCBwYXJ0RmlsZVN0cmVhbTogc3RyZWFtLldyaXRhYmxlXG4gICAgICBjb25zdCBvYmpTdGF0ID0gYXdhaXQgdGhpcy5zdGF0T2JqZWN0KGJ1Y2tldE5hbWUsIG9iamVjdE5hbWUsIGdldE9wdHMpXG4gICAgICBjb25zdCBlbmNvZGVkRXRhZyA9IEJ1ZmZlci5mcm9tKG9ialN0YXQuZXRhZykudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gICAgICBjb25zdCBwYXJ0RmlsZSA9IGAke2ZpbGVQYXRofS4ke2VuY29kZWRFdGFnfS5wYXJ0Lm1pbmlvYFxuXG4gICAgICBhd2FpdCBmc3AubWtkaXIocGF0aC5kaXJuYW1lKGZpbGVQYXRoKSwgeyByZWN1cnNpdmU6IHRydWUgfSlcblxuICAgICAgbGV0IG9mZnNldCA9IDBcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHN0YXRzID0gYXdhaXQgZnNwLnN0YXQocGFydEZpbGUpXG4gICAgICAgIGlmIChvYmpTdGF0LnNpemUgPT09IHN0YXRzLnNpemUpIHtcbiAgICAgICAgICByZXR1cm4gcGFydEZpbGVcbiAgICAgICAgfVxuICAgICAgICBvZmZzZXQgPSBzdGF0cy5zaXplXG4gICAgICAgIHBhcnRGaWxlU3RyZWFtID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0ocGFydEZpbGUsIHsgZmxhZ3M6ICdhJyB9KVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yICYmIChlIGFzIHVua25vd24gYXMgeyBjb2RlOiBzdHJpbmcgfSkuY29kZSA9PT0gJ0VOT0VOVCcpIHtcbiAgICAgICAgICAvLyBmaWxlIG5vdCBleGlzdFxuICAgICAgICAgIHBhcnRGaWxlU3RyZWFtID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0ocGFydEZpbGUsIHsgZmxhZ3M6ICd3JyB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG90aGVyIGVycm9yLCBtYXliZSBhY2Nlc3MgZGVueVxuICAgICAgICAgIHRocm93IGVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBkb3dubG9hZFN0cmVhbSA9IGF3YWl0IHRoaXMuZ2V0UGFydGlhbE9iamVjdChidWNrZXROYW1lLCBvYmplY3ROYW1lLCBvZmZzZXQsIDAsIGdldE9wdHMpXG5cbiAgICAgIGF3YWl0IHN0cmVhbVByb21pc2UucGlwZWxpbmUoZG93bmxvYWRTdHJlYW0sIHBhcnRGaWxlU3RyZWFtKVxuICAgICAgY29uc3Qgc3RhdHMgPSBhd2FpdCBmc3Auc3RhdChwYXJ0RmlsZSlcbiAgICAgIGlmIChzdGF0cy5zaXplID09PSBvYmpTdGF0LnNpemUpIHtcbiAgICAgICAgcmV0dXJuIHBhcnRGaWxlXG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcignU2l6ZSBtaXNtYXRjaCBiZXR3ZWVuIGRvd25sb2FkZWQgZmlsZSBhbmQgdGhlIG9iamVjdCcpXG4gICAgfVxuXG4gICAgY29uc3QgcGFydEZpbGUgPSBhd2FpdCBkb3dubG9hZFRvVG1wRmlsZSgpXG4gICAgYXdhaXQgZnNwLnJlbmFtZShwYXJ0RmlsZSwgZmlsZVBhdGgpXG4gIH1cblxuICAvKipcbiAgICogU3RhdCBpbmZvcm1hdGlvbiBvZiB0aGUgb2JqZWN0LlxuICAgKi9cbiAgYXN5bmMgc3RhdE9iamVjdChidWNrZXROYW1lOiBzdHJpbmcsIG9iamVjdE5hbWU6IHN0cmluZywgc3RhdE9wdHM/OiBTdGF0T2JqZWN0T3B0cyk6IFByb21pc2U8QnVja2V0SXRlbVN0YXQ+IHtcbiAgICBjb25zdCBzdGF0T3B0RGVmID0gc3RhdE9wdHMgfHwge31cbiAgICBpZiAoIWlzVmFsaWRCdWNrZXROYW1lKGJ1Y2tldE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRCdWNrZXROYW1lRXJyb3IoJ0ludmFsaWQgYnVja2V0IG5hbWU6ICcgKyBidWNrZXROYW1lKVxuICAgIH1cbiAgICBpZiAoIWlzVmFsaWRPYmplY3ROYW1lKG9iamVjdE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRPYmplY3ROYW1lRXJyb3IoYEludmFsaWQgb2JqZWN0IG5hbWU6ICR7b2JqZWN0TmFtZX1gKVxuICAgIH1cblxuICAgIGlmICghaXNPYmplY3Qoc3RhdE9wdERlZikpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoJ3N0YXRPcHRzIHNob3VsZCBiZSBvZiB0eXBlIFwib2JqZWN0XCInKVxuICAgIH1cblxuICAgIGNvbnN0IHF1ZXJ5ID0gcXMuc3RyaW5naWZ5KHN0YXRPcHREZWYpXG4gICAgY29uc3QgbWV0aG9kID0gJ0hFQUQnXG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdEFzeW5jT21pdCh7IG1ldGhvZCwgYnVja2V0TmFtZSwgb2JqZWN0TmFtZSwgcXVlcnkgfSlcblxuICAgIHJldHVybiB7XG4gICAgICBzaXplOiBwYXJzZUludChyZXMuaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSBhcyBzdHJpbmcpLFxuICAgICAgbWV0YURhdGE6IGV4dHJhY3RNZXRhZGF0YShyZXMuaGVhZGVycyBhcyBSZXNwb25zZUhlYWRlciksXG4gICAgICBsYXN0TW9kaWZpZWQ6IG5ldyBEYXRlKHJlcy5oZWFkZXJzWydsYXN0LW1vZGlmaWVkJ10gYXMgc3RyaW5nKSxcbiAgICAgIHZlcnNpb25JZDogZ2V0VmVyc2lvbklkKHJlcy5oZWFkZXJzIGFzIFJlc3BvbnNlSGVhZGVyKSxcbiAgICAgIGV0YWc6IHNhbml0aXplRVRhZyhyZXMuaGVhZGVycy5ldGFnKSxcbiAgICB9XG4gIH1cblxuICBhc3luYyByZW1vdmVPYmplY3QoYnVja2V0TmFtZTogc3RyaW5nLCBvYmplY3ROYW1lOiBzdHJpbmcsIHJlbW92ZU9wdHM/OiBSZW1vdmVPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZShidWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKGBJbnZhbGlkIGJ1Y2tldCBuYW1lOiAke2J1Y2tldE5hbWV9YClcbiAgICB9XG4gICAgaWYgKCFpc1ZhbGlkT2JqZWN0TmFtZShvYmplY3ROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkT2JqZWN0TmFtZUVycm9yKGBJbnZhbGlkIG9iamVjdCBuYW1lOiAke29iamVjdE5hbWV9YClcbiAgICB9XG5cbiAgICBpZiAocmVtb3ZlT3B0cyAmJiAhaXNPYmplY3QocmVtb3ZlT3B0cykpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoJ3JlbW92ZU9wdHMgc2hvdWxkIGJlIG9mIHR5cGUgXCJvYmplY3RcIicpXG4gICAgfVxuXG4gICAgY29uc3QgbWV0aG9kID0gJ0RFTEVURSdcblxuICAgIGNvbnN0IGhlYWRlcnM6IFJlcXVlc3RIZWFkZXJzID0ge31cbiAgICBpZiAocmVtb3ZlT3B0cz8uZ292ZXJuYW5jZUJ5cGFzcykge1xuICAgICAgaGVhZGVyc1snWC1BbXotQnlwYXNzLUdvdmVybmFuY2UtUmV0ZW50aW9uJ10gPSB0cnVlXG4gICAgfVxuICAgIGlmIChyZW1vdmVPcHRzPy5mb3JjZURlbGV0ZSkge1xuICAgICAgaGVhZGVyc1sneC1taW5pby1mb3JjZS1kZWxldGUnXSA9IHRydWVcbiAgICB9XG5cbiAgICBjb25zdCBxdWVyeVBhcmFtczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9XG4gICAgaWYgKHJlbW92ZU9wdHM/LnZlcnNpb25JZCkge1xuICAgICAgcXVlcnlQYXJhbXMudmVyc2lvbklkID0gYCR7cmVtb3ZlT3B0cy52ZXJzaW9uSWR9YFxuICAgIH1cbiAgICBjb25zdCBxdWVyeSA9IHFzLnN0cmluZ2lmeShxdWVyeVBhcmFtcylcblxuICAgIGF3YWl0IHRoaXMubWFrZVJlcXVlc3RBc3luY09taXQoeyBtZXRob2QsIGJ1Y2tldE5hbWUsIG9iamVjdE5hbWUsIGhlYWRlcnMsIHF1ZXJ5IH0sICcnLCBbMjAwLCAyMDRdKVxuICB9XG5cbiAgLy8gQ2FsbHMgaW1wbGVtZW50ZWQgYmVsb3cgYXJlIHJlbGF0ZWQgdG8gbXVsdGlwYXJ0LlxuXG4gIGxpc3RJbmNvbXBsZXRlVXBsb2FkcyhcbiAgICBidWNrZXQ6IHN0cmluZyxcbiAgICBwcmVmaXg6IHN0cmluZyxcbiAgICByZWN1cnNpdmU6IGJvb2xlYW4sXG4gICk6IEJ1Y2tldFN0cmVhbTxJbmNvbXBsZXRlVXBsb2FkZWRCdWNrZXRJdGVtPiB7XG4gICAgaWYgKHByZWZpeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcmVmaXggPSAnJ1xuICAgIH1cbiAgICBpZiAocmVjdXJzaXZlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlY3Vyc2l2ZSA9IGZhbHNlXG4gICAgfVxuICAgIGlmICghaXNWYWxpZEJ1Y2tldE5hbWUoYnVja2V0KSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKCdJbnZhbGlkIGJ1Y2tldCBuYW1lOiAnICsgYnVja2V0KVxuICAgIH1cbiAgICBpZiAoIWlzVmFsaWRQcmVmaXgocHJlZml4KSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkUHJlZml4RXJyb3IoYEludmFsaWQgcHJlZml4IDogJHtwcmVmaXh9YClcbiAgICB9XG4gICAgaWYgKCFpc0Jvb2xlYW4ocmVjdXJzaXZlKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVjdXJzaXZlIHNob3VsZCBiZSBvZiB0eXBlIFwiYm9vbGVhblwiJylcbiAgICB9XG4gICAgY29uc3QgZGVsaW1pdGVyID0gcmVjdXJzaXZlID8gJycgOiAnLydcbiAgICBsZXQga2V5TWFya2VyID0gJydcbiAgICBsZXQgdXBsb2FkSWRNYXJrZXIgPSAnJ1xuICAgIGNvbnN0IHVwbG9hZHM6IHVua25vd25bXSA9IFtdXG4gICAgbGV0IGVuZGVkID0gZmFsc2VcblxuICAgIC8vIFRPRE86IHJlZmFjdG9yIHRoaXMgd2l0aCBhc3luYy9hd2FpdCBhbmQgYHN0cmVhbS5SZWFkYWJsZS5mcm9tYFxuICAgIGNvbnN0IHJlYWRTdHJlYW0gPSBuZXcgc3RyZWFtLlJlYWRhYmxlKHsgb2JqZWN0TW9kZTogdHJ1ZSB9KVxuICAgIHJlYWRTdHJlYW0uX3JlYWQgPSAoKSA9PiB7XG4gICAgICAvLyBwdXNoIG9uZSB1cGxvYWQgaW5mbyBwZXIgX3JlYWQoKVxuICAgICAgaWYgKHVwbG9hZHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZWFkU3RyZWFtLnB1c2godXBsb2Fkcy5zaGlmdCgpKVxuICAgICAgfVxuICAgICAgaWYgKGVuZGVkKSB7XG4gICAgICAgIHJldHVybiByZWFkU3RyZWFtLnB1c2gobnVsbClcbiAgICAgIH1cbiAgICAgIHRoaXMubGlzdEluY29tcGxldGVVcGxvYWRzUXVlcnkoYnVja2V0LCBwcmVmaXgsIGtleU1hcmtlciwgdXBsb2FkSWRNYXJrZXIsIGRlbGltaXRlcikudGhlbihcbiAgICAgICAgKHJlc3VsdCkgPT4ge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgcmVzdWx0LnByZWZpeGVzLmZvckVhY2goKHByZWZpeCkgPT4gdXBsb2Fkcy5wdXNoKHByZWZpeCkpXG4gICAgICAgICAgYXN5bmMuZWFjaFNlcmllcyhcbiAgICAgICAgICAgIHJlc3VsdC51cGxvYWRzLFxuICAgICAgICAgICAgKHVwbG9hZCwgY2IpID0+IHtcbiAgICAgICAgICAgICAgLy8gZm9yIGVhY2ggaW5jb21wbGV0ZSB1cGxvYWQgYWRkIHRoZSBzaXplcyBvZiBpdHMgdXBsb2FkZWQgcGFydHNcbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgIHRoaXMubGlzdFBhcnRzKGJ1Y2tldCwgdXBsb2FkLmtleSwgdXBsb2FkLnVwbG9hZElkKS50aGVuKFxuICAgICAgICAgICAgICAgIChwYXJ0czogUGFydFtdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICB1cGxvYWQuc2l6ZSA9IHBhcnRzLnJlZHVjZSgoYWNjLCBpdGVtKSA9PiBhY2MgKyBpdGVtLnNpemUsIDApXG4gICAgICAgICAgICAgICAgICB1cGxvYWRzLnB1c2godXBsb2FkKVxuICAgICAgICAgICAgICAgICAgY2IoKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKGVycjogRXJyb3IpID0+IGNiKGVyciksXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZWFkU3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChyZXN1bHQuaXNUcnVuY2F0ZWQpIHtcbiAgICAgICAgICAgICAgICBrZXlNYXJrZXIgPSByZXN1bHQubmV4dEtleU1hcmtlclxuICAgICAgICAgICAgICAgIHVwbG9hZElkTWFya2VyID0gcmVzdWx0Lm5leHRVcGxvYWRJZE1hcmtlclxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVuZGVkID0gdHJ1ZVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgIHJlYWRTdHJlYW0uX3JlYWQoKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApXG4gICAgICAgIH0sXG4gICAgICAgIChlKSA9PiB7XG4gICAgICAgICAgcmVhZFN0cmVhbS5lbWl0KCdlcnJvcicsIGUpXG4gICAgICAgIH0sXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiByZWFkU3RyZWFtXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIGJ5IGxpc3RJbmNvbXBsZXRlVXBsb2FkcyB0byBmZXRjaCBhIGJhdGNoIG9mIGluY29tcGxldGUgdXBsb2Fkcy5cbiAgICovXG4gIGFzeW5jIGxpc3RJbmNvbXBsZXRlVXBsb2Fkc1F1ZXJ5KFxuICAgIGJ1Y2tldE5hbWU6IHN0cmluZyxcbiAgICBwcmVmaXg6IHN0cmluZyxcbiAgICBrZXlNYXJrZXI6IHN0cmluZyxcbiAgICB1cGxvYWRJZE1hcmtlcjogc3RyaW5nLFxuICAgIGRlbGltaXRlcjogc3RyaW5nLFxuICApOiBQcm9taXNlPExpc3RNdWx0aXBhcnRSZXN1bHQ+IHtcbiAgICBpZiAoIWlzVmFsaWRCdWNrZXROYW1lKGJ1Y2tldE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRCdWNrZXROYW1lRXJyb3IoJ0ludmFsaWQgYnVja2V0IG5hbWU6ICcgKyBidWNrZXROYW1lKVxuICAgIH1cbiAgICBpZiAoIWlzU3RyaW5nKHByZWZpeCkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ByZWZpeCBzaG91bGQgYmUgb2YgdHlwZSBcInN0cmluZ1wiJylcbiAgICB9XG4gICAgaWYgKCFpc1N0cmluZyhrZXlNYXJrZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdrZXlNYXJrZXIgc2hvdWxkIGJlIG9mIHR5cGUgXCJzdHJpbmdcIicpXG4gICAgfVxuICAgIGlmICghaXNTdHJpbmcodXBsb2FkSWRNYXJrZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1cGxvYWRJZE1hcmtlciBzaG91bGQgYmUgb2YgdHlwZSBcInN0cmluZ1wiJylcbiAgICB9XG4gICAgaWYgKCFpc1N0cmluZyhkZWxpbWl0ZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkZWxpbWl0ZXIgc2hvdWxkIGJlIG9mIHR5cGUgXCJzdHJpbmdcIicpXG4gICAgfVxuICAgIGNvbnN0IHF1ZXJpZXMgPSBbXVxuICAgIHF1ZXJpZXMucHVzaChgcHJlZml4PSR7dXJpRXNjYXBlKHByZWZpeCl9YClcbiAgICBxdWVyaWVzLnB1c2goYGRlbGltaXRlcj0ke3VyaUVzY2FwZShkZWxpbWl0ZXIpfWApXG5cbiAgICBpZiAoa2V5TWFya2VyKSB7XG4gICAgICBxdWVyaWVzLnB1c2goYGtleS1tYXJrZXI9JHt1cmlFc2NhcGUoa2V5TWFya2VyKX1gKVxuICAgIH1cbiAgICBpZiAodXBsb2FkSWRNYXJrZXIpIHtcbiAgICAgIHF1ZXJpZXMucHVzaChgdXBsb2FkLWlkLW1hcmtlcj0ke3VwbG9hZElkTWFya2VyfWApXG4gICAgfVxuXG4gICAgY29uc3QgbWF4VXBsb2FkcyA9IDEwMDBcbiAgICBxdWVyaWVzLnB1c2goYG1heC11cGxvYWRzPSR7bWF4VXBsb2Fkc31gKVxuICAgIHF1ZXJpZXMuc29ydCgpXG4gICAgcXVlcmllcy51bnNoaWZ0KCd1cGxvYWRzJylcbiAgICBsZXQgcXVlcnkgPSAnJ1xuICAgIGlmIChxdWVyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHF1ZXJ5ID0gYCR7cXVlcmllcy5qb2luKCcmJyl9YFxuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSAnR0VUJ1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3RBc3luYyh7IG1ldGhvZCwgYnVja2V0TmFtZSwgcXVlcnkgfSlcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVhZEFzU3RyaW5nKHJlcylcbiAgICByZXR1cm4geG1sUGFyc2Vycy5wYXJzZUxpc3RNdWx0aXBhcnQoYm9keSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWF0ZSBhIG5ldyBtdWx0aXBhcnQgdXBsb2FkLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGFzeW5jIGluaXRpYXRlTmV3TXVsdGlwYXJ0VXBsb2FkKGJ1Y2tldE5hbWU6IHN0cmluZywgb2JqZWN0TmFtZTogc3RyaW5nLCBoZWFkZXJzOiBSZXF1ZXN0SGVhZGVycyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZShidWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKCdJbnZhbGlkIGJ1Y2tldCBuYW1lOiAnICsgYnVja2V0TmFtZSlcbiAgICB9XG4gICAgaWYgKCFpc1ZhbGlkT2JqZWN0TmFtZShvYmplY3ROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkT2JqZWN0TmFtZUVycm9yKGBJbnZhbGlkIG9iamVjdCBuYW1lOiAke29iamVjdE5hbWV9YClcbiAgICB9XG4gICAgaWYgKCFpc09iamVjdChoZWFkZXJzKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkT2JqZWN0TmFtZUVycm9yKCdjb250ZW50VHlwZSBzaG91bGQgYmUgb2YgdHlwZSBcIm9iamVjdFwiJylcbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gJ1BPU1QnXG4gICAgY29uc3QgcXVlcnkgPSAndXBsb2FkcydcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmMoeyBtZXRob2QsIGJ1Y2tldE5hbWUsIG9iamVjdE5hbWUsIHF1ZXJ5LCBoZWFkZXJzIH0pXG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlYWRBc0J1ZmZlcihyZXMpXG4gICAgcmV0dXJuIHBhcnNlSW5pdGlhdGVNdWx0aXBhcnQoYm9keS50b1N0cmluZygpKVxuICB9XG5cbiAgLyoqXG4gICAqIEludGVybmFsIE1ldGhvZCB0byBhYm9ydCBhIG11bHRpcGFydCB1cGxvYWQgcmVxdWVzdCBpbiBjYXNlIG9mIGFueSBlcnJvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBidWNrZXROYW1lIC0gQnVja2V0IE5hbWVcbiAgICogQHBhcmFtIG9iamVjdE5hbWUgLSBPYmplY3QgTmFtZVxuICAgKiBAcGFyYW0gdXBsb2FkSWQgLSBpZCBvZiBhIG11bHRpcGFydCB1cGxvYWQgdG8gY2FuY2VsIGR1cmluZyBjb21wb3NlIG9iamVjdCBzZXF1ZW5jZS5cbiAgICovXG4gIGFzeW5jIGFib3J0TXVsdGlwYXJ0VXBsb2FkKGJ1Y2tldE5hbWU6IHN0cmluZywgb2JqZWN0TmFtZTogc3RyaW5nLCB1cGxvYWRJZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgbWV0aG9kID0gJ0RFTEVURSdcbiAgICBjb25zdCBxdWVyeSA9IGB1cGxvYWRJZD0ke3VwbG9hZElkfWBcblxuICAgIGNvbnN0IHJlcXVlc3RPcHRpb25zID0geyBtZXRob2QsIGJ1Y2tldE5hbWUsIG9iamVjdE5hbWU6IG9iamVjdE5hbWUsIHF1ZXJ5IH1cbiAgICBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmNPbWl0KHJlcXVlc3RPcHRpb25zLCAnJywgWzIwNF0pXG4gIH1cblxuICBhc3luYyBmaW5kVXBsb2FkSWQoYnVja2V0TmFtZTogc3RyaW5nLCBvYmplY3ROYW1lOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgIGlmICghaXNWYWxpZEJ1Y2tldE5hbWUoYnVja2V0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEJ1Y2tldE5hbWVFcnJvcignSW52YWxpZCBidWNrZXQgbmFtZTogJyArIGJ1Y2tldE5hbWUpXG4gICAgfVxuICAgIGlmICghaXNWYWxpZE9iamVjdE5hbWUob2JqZWN0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZE9iamVjdE5hbWVFcnJvcihgSW52YWxpZCBvYmplY3QgbmFtZTogJHtvYmplY3ROYW1lfWApXG4gICAgfVxuXG4gICAgbGV0IGxhdGVzdFVwbG9hZDogTGlzdE11bHRpcGFydFJlc3VsdFsndXBsb2FkcyddW251bWJlcl0gfCB1bmRlZmluZWRcbiAgICBsZXQga2V5TWFya2VyID0gJydcbiAgICBsZXQgdXBsb2FkSWRNYXJrZXIgPSAnJ1xuICAgIGZvciAoOzspIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubGlzdEluY29tcGxldGVVcGxvYWRzUXVlcnkoYnVja2V0TmFtZSwgb2JqZWN0TmFtZSwga2V5TWFya2VyLCB1cGxvYWRJZE1hcmtlciwgJycpXG4gICAgICBmb3IgKGNvbnN0IHVwbG9hZCBvZiByZXN1bHQudXBsb2Fkcykge1xuICAgICAgICBpZiAodXBsb2FkLmtleSA9PT0gb2JqZWN0TmFtZSkge1xuICAgICAgICAgIGlmICghbGF0ZXN0VXBsb2FkIHx8IHVwbG9hZC5pbml0aWF0ZWQuZ2V0VGltZSgpID4gbGF0ZXN0VXBsb2FkLmluaXRpYXRlZC5nZXRUaW1lKCkpIHtcbiAgICAgICAgICAgIGxhdGVzdFVwbG9hZCA9IHVwbG9hZFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdC5pc1RydW5jYXRlZCkge1xuICAgICAgICBrZXlNYXJrZXIgPSByZXN1bHQubmV4dEtleU1hcmtlclxuICAgICAgICB1cGxvYWRJZE1hcmtlciA9IHJlc3VsdC5uZXh0VXBsb2FkSWRNYXJrZXJcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgYnJlYWtcbiAgICB9XG4gICAgcmV0dXJuIGxhdGVzdFVwbG9hZD8udXBsb2FkSWRcbiAgfVxuXG4gIC8qKlxuICAgKiB0aGlzIGNhbGwgd2lsbCBhZ2dyZWdhdGUgdGhlIHBhcnRzIG9uIHRoZSBzZXJ2ZXIgaW50byBhIHNpbmdsZSBvYmplY3QuXG4gICAqL1xuICBhc3luYyBjb21wbGV0ZU11bHRpcGFydFVwbG9hZChcbiAgICBidWNrZXROYW1lOiBzdHJpbmcsXG4gICAgb2JqZWN0TmFtZTogc3RyaW5nLFxuICAgIHVwbG9hZElkOiBzdHJpbmcsXG4gICAgZXRhZ3M6IHtcbiAgICAgIHBhcnQ6IG51bWJlclxuICAgICAgZXRhZz86IHN0cmluZ1xuICAgIH1bXSxcbiAgKTogUHJvbWlzZTx7IGV0YWc6IHN0cmluZzsgdmVyc2lvbklkOiBzdHJpbmcgfCBudWxsIH0+IHtcbiAgICBpZiAoIWlzVmFsaWRCdWNrZXROYW1lKGJ1Y2tldE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRCdWNrZXROYW1lRXJyb3IoJ0ludmFsaWQgYnVja2V0IG5hbWU6ICcgKyBidWNrZXROYW1lKVxuICAgIH1cbiAgICBpZiAoIWlzVmFsaWRPYmplY3ROYW1lKG9iamVjdE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRPYmplY3ROYW1lRXJyb3IoYEludmFsaWQgb2JqZWN0IG5hbWU6ICR7b2JqZWN0TmFtZX1gKVxuICAgIH1cbiAgICBpZiAoIWlzU3RyaW5nKHVwbG9hZElkKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndXBsb2FkSWQgc2hvdWxkIGJlIG9mIHR5cGUgXCJzdHJpbmdcIicpXG4gICAgfVxuICAgIGlmICghaXNPYmplY3QoZXRhZ3MpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdldGFncyBzaG91bGQgYmUgb2YgdHlwZSBcIkFycmF5XCInKVxuICAgIH1cblxuICAgIGlmICghdXBsb2FkSWQpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoJ3VwbG9hZElkIGNhbm5vdCBiZSBlbXB0eScpXG4gICAgfVxuXG4gICAgY29uc3QgbWV0aG9kID0gJ1BPU1QnXG4gICAgY29uc3QgcXVlcnkgPSBgdXBsb2FkSWQ9JHt1cmlFc2NhcGUodXBsb2FkSWQpfWBcblxuICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgeG1sMmpzLkJ1aWxkZXIoKVxuICAgIGNvbnN0IHBheWxvYWQgPSBidWlsZGVyLmJ1aWxkT2JqZWN0KHtcbiAgICAgIENvbXBsZXRlTXVsdGlwYXJ0VXBsb2FkOiB7XG4gICAgICAgICQ6IHtcbiAgICAgICAgICB4bWxuczogJ2h0dHA6Ly9zMy5hbWF6b25hd3MuY29tL2RvYy8yMDA2LTAzLTAxLycsXG4gICAgICAgIH0sXG4gICAgICAgIFBhcnQ6IGV0YWdzLm1hcCgoZXRhZykgPT4ge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBQYXJ0TnVtYmVyOiBldGFnLnBhcnQsXG4gICAgICAgICAgICBFVGFnOiBldGFnLmV0YWcsXG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgIH0sXG4gICAgfSlcblxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3RBc3luYyh7IG1ldGhvZCwgYnVja2V0TmFtZSwgb2JqZWN0TmFtZSwgcXVlcnkgfSwgcGF5bG9hZClcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVhZEFzQnVmZmVyKHJlcylcbiAgICBjb25zdCByZXN1bHQgPSBwYXJzZUNvbXBsZXRlTXVsdGlwYXJ0KGJvZHkudG9TdHJpbmcoKSlcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdCVUc6IGZhaWxlZCB0byBwYXJzZSBzZXJ2ZXIgcmVzcG9uc2UnKVxuICAgIH1cblxuICAgIGlmIChyZXN1bHQuZXJyQ29kZSkge1xuICAgICAgLy8gTXVsdGlwYXJ0IENvbXBsZXRlIEFQSSByZXR1cm5zIGFuIGVycm9yIFhNTCBhZnRlciBhIDIwMCBodHRwIHN0YXR1c1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5TM0Vycm9yKHJlc3VsdC5lcnJNZXNzYWdlKVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBldGFnOiByZXN1bHQuZXRhZyBhcyBzdHJpbmcsXG4gICAgICB2ZXJzaW9uSWQ6IGdldFZlcnNpb25JZChyZXMuaGVhZGVycyBhcyBSZXNwb25zZUhlYWRlciksXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBwYXJ0LWluZm8gb2YgYWxsIHBhcnRzIG9mIGFuIGluY29tcGxldGUgdXBsb2FkIHNwZWNpZmllZCBieSB1cGxvYWRJZC5cbiAgICovXG4gIHByb3RlY3RlZCBhc3luYyBsaXN0UGFydHMoYnVja2V0TmFtZTogc3RyaW5nLCBvYmplY3ROYW1lOiBzdHJpbmcsIHVwbG9hZElkOiBzdHJpbmcpOiBQcm9taXNlPFVwbG9hZGVkUGFydFtdPiB7XG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZShidWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKCdJbnZhbGlkIGJ1Y2tldCBuYW1lOiAnICsgYnVja2V0TmFtZSlcbiAgICB9XG4gICAgaWYgKCFpc1ZhbGlkT2JqZWN0TmFtZShvYmplY3ROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkT2JqZWN0TmFtZUVycm9yKGBJbnZhbGlkIG9iamVjdCBuYW1lOiAke29iamVjdE5hbWV9YClcbiAgICB9XG4gICAgaWYgKCFpc1N0cmluZyh1cGxvYWRJZCkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3VwbG9hZElkIHNob3VsZCBiZSBvZiB0eXBlIFwic3RyaW5nXCInKVxuICAgIH1cbiAgICBpZiAoIXVwbG9hZElkKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKCd1cGxvYWRJZCBjYW5ub3QgYmUgZW1wdHknKVxuICAgIH1cblxuICAgIGNvbnN0IHBhcnRzOiBVcGxvYWRlZFBhcnRbXSA9IFtdXG4gICAgbGV0IG1hcmtlciA9IDBcbiAgICBsZXQgcmVzdWx0XG4gICAgZG8ge1xuICAgICAgcmVzdWx0ID0gYXdhaXQgdGhpcy5saXN0UGFydHNRdWVyeShidWNrZXROYW1lLCBvYmplY3ROYW1lLCB1cGxvYWRJZCwgbWFya2VyKVxuICAgICAgbWFya2VyID0gcmVzdWx0Lm1hcmtlclxuICAgICAgcGFydHMucHVzaCguLi5yZXN1bHQucGFydHMpXG4gICAgfSB3aGlsZSAocmVzdWx0LmlzVHJ1bmNhdGVkKVxuXG4gICAgcmV0dXJuIHBhcnRzXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIGJ5IGxpc3RQYXJ0cyB0byBmZXRjaCBhIGJhdGNoIG9mIHBhcnQtaW5mb1xuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBsaXN0UGFydHNRdWVyeShidWNrZXROYW1lOiBzdHJpbmcsIG9iamVjdE5hbWU6IHN0cmluZywgdXBsb2FkSWQ6IHN0cmluZywgbWFya2VyOiBudW1iZXIpIHtcbiAgICBpZiAoIWlzVmFsaWRCdWNrZXROYW1lKGJ1Y2tldE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRCdWNrZXROYW1lRXJyb3IoJ0ludmFsaWQgYnVja2V0IG5hbWU6ICcgKyBidWNrZXROYW1lKVxuICAgIH1cbiAgICBpZiAoIWlzVmFsaWRPYmplY3ROYW1lKG9iamVjdE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRPYmplY3ROYW1lRXJyb3IoYEludmFsaWQgb2JqZWN0IG5hbWU6ICR7b2JqZWN0TmFtZX1gKVxuICAgIH1cbiAgICBpZiAoIWlzU3RyaW5nKHVwbG9hZElkKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndXBsb2FkSWQgc2hvdWxkIGJlIG9mIHR5cGUgXCJzdHJpbmdcIicpXG4gICAgfVxuICAgIGlmICghaXNOdW1iZXIobWFya2VyKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWFya2VyIHNob3VsZCBiZSBvZiB0eXBlIFwibnVtYmVyXCInKVxuICAgIH1cbiAgICBpZiAoIXVwbG9hZElkKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKCd1cGxvYWRJZCBjYW5ub3QgYmUgZW1wdHknKVxuICAgIH1cblxuICAgIGxldCBxdWVyeSA9IGB1cGxvYWRJZD0ke3VyaUVzY2FwZSh1cGxvYWRJZCl9YFxuICAgIGlmIChtYXJrZXIpIHtcbiAgICAgIHF1ZXJ5ICs9IGAmcGFydC1udW1iZXItbWFya2VyPSR7bWFya2VyfWBcbiAgICB9XG5cbiAgICBjb25zdCBtZXRob2QgPSAnR0VUJ1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3RBc3luYyh7IG1ldGhvZCwgYnVja2V0TmFtZSwgb2JqZWN0TmFtZSwgcXVlcnkgfSlcbiAgICByZXR1cm4geG1sUGFyc2Vycy5wYXJzZUxpc3RQYXJ0cyhhd2FpdCByZWFkQXNTdHJpbmcocmVzKSlcbiAgfVxuXG4gIGFzeW5jIGxpc3RCdWNrZXRzKCk6IFByb21pc2U8QnVja2V0SXRlbUZyb21MaXN0W10+IHtcbiAgICBjb25zdCBtZXRob2QgPSAnR0VUJ1xuICAgIGNvbnN0IHJlZ2lvbkNvbmYgPSB0aGlzLnJlZ2lvbiB8fCBERUZBVUxUX1JFR0lPTlxuICAgIGNvbnN0IGh0dHBSZXMgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmMoeyBtZXRob2QgfSwgJycsIFsyMDBdLCByZWdpb25Db25mKVxuICAgIGNvbnN0IHhtbFJlc3VsdCA9IGF3YWl0IHJlYWRBc1N0cmluZyhodHRwUmVzKVxuICAgIHJldHVybiB4bWxQYXJzZXJzLnBhcnNlTGlzdEJ1Y2tldCh4bWxSZXN1bHQpXG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHBhcnQgc2l6ZSBnaXZlbiB0aGUgb2JqZWN0IHNpemUuIFBhcnQgc2l6ZSB3aWxsIGJlIGF0bGVhc3QgdGhpcy5wYXJ0U2l6ZVxuICAgKi9cbiAgY2FsY3VsYXRlUGFydFNpemUoc2l6ZTogbnVtYmVyKSB7XG4gICAgaWYgKCFpc051bWJlcihzaXplKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2l6ZSBzaG91bGQgYmUgb2YgdHlwZSBcIm51bWJlclwiJylcbiAgICB9XG4gICAgaWYgKHNpemUgPiB0aGlzLm1heE9iamVjdFNpemUpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYHNpemUgc2hvdWxkIG5vdCBiZSBtb3JlIHRoYW4gJHt0aGlzLm1heE9iamVjdFNpemV9YClcbiAgICB9XG4gICAgaWYgKHRoaXMub3ZlclJpZGVQYXJ0U2l6ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucGFydFNpemVcbiAgICB9XG4gICAgbGV0IHBhcnRTaXplID0gdGhpcy5wYXJ0U2l6ZVxuICAgIGZvciAoOzspIHtcbiAgICAgIC8vIHdoaWxlKHRydWUpIHsuLi59IHRocm93cyBsaW50aW5nIGVycm9yLlxuICAgICAgLy8gSWYgcGFydFNpemUgaXMgYmlnIGVub3VnaCB0byBhY2NvbW9kYXRlIHRoZSBvYmplY3Qgc2l6ZSwgdGhlbiB1c2UgaXQuXG4gICAgICBpZiAocGFydFNpemUgKiAxMDAwMCA+IHNpemUpIHtcbiAgICAgICAgcmV0dXJuIHBhcnRTaXplXG4gICAgICB9XG4gICAgICAvLyBUcnkgcGFydCBzaXplcyBhcyA2NE1CLCA4ME1CLCA5Nk1CIGV0Yy5cbiAgICAgIHBhcnRTaXplICs9IDE2ICogMTAyNCAqIDEwMjRcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBsb2FkcyB0aGUgb2JqZWN0IHVzaW5nIGNvbnRlbnRzIGZyb20gYSBmaWxlXG4gICAqL1xuICBhc3luYyBmUHV0T2JqZWN0KGJ1Y2tldE5hbWU6IHN0cmluZywgb2JqZWN0TmFtZTogc3RyaW5nLCBmaWxlUGF0aDogc3RyaW5nLCBtZXRhRGF0YT86IE9iamVjdE1ldGFEYXRhKSB7XG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZShidWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKCdJbnZhbGlkIGJ1Y2tldCBuYW1lOiAnICsgYnVja2V0TmFtZSlcbiAgICB9XG4gICAgaWYgKCFpc1ZhbGlkT2JqZWN0TmFtZShvYmplY3ROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkT2JqZWN0TmFtZUVycm9yKGBJbnZhbGlkIG9iamVjdCBuYW1lOiAke29iamVjdE5hbWV9YClcbiAgICB9XG5cbiAgICBpZiAoIWlzU3RyaW5nKGZpbGVQYXRoKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZmlsZVBhdGggc2hvdWxkIGJlIG9mIHR5cGUgXCJzdHJpbmdcIicpXG4gICAgfVxuICAgIGlmIChtZXRhRGF0YSAmJiAhaXNPYmplY3QobWV0YURhdGEpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtZXRhRGF0YSBzaG91bGQgYmUgb2YgdHlwZSBcIm9iamVjdFwiJylcbiAgICB9XG5cbiAgICAvLyBJbnNlcnRzIGNvcnJlY3QgYGNvbnRlbnQtdHlwZWAgYXR0cmlidXRlIGJhc2VkIG9uIG1ldGFEYXRhIGFuZCBmaWxlUGF0aFxuICAgIG1ldGFEYXRhID0gaW5zZXJ0Q29udGVudFR5cGUobWV0YURhdGEgfHwge30sIGZpbGVQYXRoKVxuICAgIGNvbnN0IHN0YXQgPSBhd2FpdCBmc3AubHN0YXQoZmlsZVBhdGgpXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucHV0T2JqZWN0KGJ1Y2tldE5hbWUsIG9iamVjdE5hbWUsIGZzLmNyZWF0ZVJlYWRTdHJlYW0oZmlsZVBhdGgpLCBzdGF0LnNpemUsIG1ldGFEYXRhKVxuICB9XG5cbiAgLyoqXG4gICAqICBVcGxvYWRpbmcgYSBzdHJlYW0sIFwiQnVmZmVyXCIgb3IgXCJzdHJpbmdcIi5cbiAgICogIEl0J3MgcmVjb21tZW5kZWQgdG8gcGFzcyBgc2l6ZWAgYXJndW1lbnQgd2l0aCBzdHJlYW0uXG4gICAqL1xuICBhc3luYyBwdXRPYmplY3QoXG4gICAgYnVja2V0TmFtZTogc3RyaW5nLFxuICAgIG9iamVjdE5hbWU6IHN0cmluZyxcbiAgICBzdHJlYW06IHN0cmVhbS5SZWFkYWJsZSB8IEJ1ZmZlciB8IHN0cmluZyxcbiAgICBzaXplPzogbnVtYmVyLFxuICAgIG1ldGFEYXRhPzogSXRlbUJ1Y2tldE1ldGFkYXRhLFxuICApOiBQcm9taXNlPFVwbG9hZGVkT2JqZWN0SW5mbz4ge1xuICAgIGlmICghaXNWYWxpZEJ1Y2tldE5hbWUoYnVja2V0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEJ1Y2tldE5hbWVFcnJvcihgSW52YWxpZCBidWNrZXQgbmFtZTogJHtidWNrZXROYW1lfWApXG4gICAgfVxuICAgIGlmICghaXNWYWxpZE9iamVjdE5hbWUob2JqZWN0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZE9iamVjdE5hbWVFcnJvcihgSW52YWxpZCBvYmplY3QgbmFtZTogJHtvYmplY3ROYW1lfWApXG4gICAgfVxuXG4gICAgLy8gV2UnbGwgbmVlZCB0byBzaGlmdCBhcmd1bWVudHMgdG8gdGhlIGxlZnQgYmVjYXVzZSBvZiBtZXRhRGF0YVxuICAgIC8vIGFuZCBzaXplIGJlaW5nIG9wdGlvbmFsLlxuICAgIGlmIChpc09iamVjdChzaXplKSkge1xuICAgICAgbWV0YURhdGEgPSBzaXplXG4gICAgfVxuICAgIC8vIEVuc3VyZXMgTWV0YWRhdGEgaGFzIGFwcHJvcHJpYXRlIHByZWZpeCBmb3IgQTMgQVBJXG4gICAgY29uc3QgaGVhZGVycyA9IHByZXBlbmRYQU1aTWV0YShtZXRhRGF0YSlcbiAgICBpZiAodHlwZW9mIHN0cmVhbSA9PT0gJ3N0cmluZycgfHwgc3RyZWFtIGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgICAvLyBBZGFwdHMgdGhlIG5vbi1zdHJlYW0gaW50ZXJmYWNlIGludG8gYSBzdHJlYW0uXG4gICAgICBzaXplID0gc3RyZWFtLmxlbmd0aFxuICAgICAgc3RyZWFtID0gcmVhZGFibGVTdHJlYW0oc3RyZWFtKVxuICAgIH0gZWxzZSBpZiAoIWlzUmVhZGFibGVTdHJlYW0oc3RyZWFtKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGhpcmQgYXJndW1lbnQgc2hvdWxkIGJlIG9mIHR5cGUgXCJzdHJlYW0uUmVhZGFibGVcIiBvciBcIkJ1ZmZlclwiIG9yIFwic3RyaW5nXCInKVxuICAgIH1cblxuICAgIGlmIChpc051bWJlcihzaXplKSAmJiBzaXplIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcihgc2l6ZSBjYW5ub3QgYmUgbmVnYXRpdmUsIGdpdmVuIHNpemU6ICR7c2l6ZX1gKVxuICAgIH1cblxuICAgIC8vIEdldCB0aGUgcGFydCBzaXplIGFuZCBmb3J3YXJkIHRoYXQgdG8gdGhlIEJsb2NrU3RyZWFtLiBEZWZhdWx0IHRvIHRoZVxuICAgIC8vIGxhcmdlc3QgYmxvY2sgc2l6ZSBwb3NzaWJsZSBpZiBuZWNlc3NhcnkuXG4gICAgaWYgKCFpc051bWJlcihzaXplKSkge1xuICAgICAgc2l6ZSA9IHRoaXMubWF4T2JqZWN0U2l6ZVxuICAgIH1cblxuICAgIC8vIEdldCB0aGUgcGFydCBzaXplIGFuZCBmb3J3YXJkIHRoYXQgdG8gdGhlIEJsb2NrU3RyZWFtLiBEZWZhdWx0IHRvIHRoZVxuICAgIC8vIGxhcmdlc3QgYmxvY2sgc2l6ZSBwb3NzaWJsZSBpZiBuZWNlc3NhcnkuXG4gICAgaWYgKHNpemUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3Qgc3RhdFNpemUgPSBhd2FpdCBnZXRDb250ZW50TGVuZ3RoKHN0cmVhbSlcbiAgICAgIGlmIChzdGF0U2l6ZSAhPT0gbnVsbCkge1xuICAgICAgICBzaXplID0gc3RhdFNpemVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWlzTnVtYmVyKHNpemUpKSB7XG4gICAgICAvLyBCYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgICBzaXplID0gdGhpcy5tYXhPYmplY3RTaXplXG4gICAgfVxuXG4gICAgY29uc3QgcGFydFNpemUgPSB0aGlzLmNhbGN1bGF0ZVBhcnRTaXplKHNpemUpXG4gICAgaWYgKHR5cGVvZiBzdHJlYW0gPT09ICdzdHJpbmcnIHx8IHN0cmVhbS5yZWFkYWJsZUxlbmd0aCA9PT0gMCB8fCBCdWZmZXIuaXNCdWZmZXIoc3RyZWFtKSB8fCBzaXplIDw9IHBhcnRTaXplKSB7XG4gICAgICBjb25zdCBidWYgPSBpc1JlYWRhYmxlU3RyZWFtKHN0cmVhbSkgPyBhd2FpdCByZWFkQXNCdWZmZXIoc3RyZWFtKSA6IEJ1ZmZlci5mcm9tKHN0cmVhbSlcbiAgICAgIHJldHVybiB0aGlzLnVwbG9hZEJ1ZmZlcihidWNrZXROYW1lLCBvYmplY3ROYW1lLCBoZWFkZXJzLCBidWYpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudXBsb2FkU3RyZWFtKGJ1Y2tldE5hbWUsIG9iamVjdE5hbWUsIGhlYWRlcnMsIHN0cmVhbSwgcGFydFNpemUpXG4gIH1cblxuICAvKipcbiAgICogbWV0aG9kIHRvIHVwbG9hZCBidWZmZXIgaW4gb25lIGNhbGxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgdXBsb2FkQnVmZmVyKFxuICAgIGJ1Y2tldE5hbWU6IHN0cmluZyxcbiAgICBvYmplY3ROYW1lOiBzdHJpbmcsXG4gICAgaGVhZGVyczogUmVxdWVzdEhlYWRlcnMsXG4gICAgYnVmOiBCdWZmZXIsXG4gICk6IFByb21pc2U8VXBsb2FkZWRPYmplY3RJbmZvPiB7XG4gICAgY29uc3QgeyBtZDVzdW0sIHNoYTI1NnN1bSB9ID0gaGFzaEJpbmFyeShidWYsIHRoaXMuZW5hYmxlU0hBMjU2KVxuICAgIGhlYWRlcnNbJ0NvbnRlbnQtTGVuZ3RoJ10gPSBidWYubGVuZ3RoXG4gICAgaWYgKCF0aGlzLmVuYWJsZVNIQTI1Nikge1xuICAgICAgaGVhZGVyc1snQ29udGVudC1NRDUnXSA9IG1kNXN1bVxuICAgIH1cbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0U3RyZWFtQXN5bmMoXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICAgIGJ1Y2tldE5hbWUsXG4gICAgICAgIG9iamVjdE5hbWUsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICB9LFxuICAgICAgYnVmLFxuICAgICAgc2hhMjU2c3VtLFxuICAgICAgWzIwMF0sXG4gICAgICAnJyxcbiAgICApXG4gICAgYXdhaXQgZHJhaW5SZXNwb25zZShyZXMpXG4gICAgcmV0dXJuIHtcbiAgICAgIGV0YWc6IHNhbml0aXplRVRhZyhyZXMuaGVhZGVycy5ldGFnKSxcbiAgICAgIHZlcnNpb25JZDogZ2V0VmVyc2lvbklkKHJlcy5oZWFkZXJzIGFzIFJlc3BvbnNlSGVhZGVyKSxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogdXBsb2FkIHN0cmVhbSB3aXRoIE11bHRpcGFydFVwbG9hZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyB1cGxvYWRTdHJlYW0oXG4gICAgYnVja2V0TmFtZTogc3RyaW5nLFxuICAgIG9iamVjdE5hbWU6IHN0cmluZyxcbiAgICBoZWFkZXJzOiBSZXF1ZXN0SGVhZGVycyxcbiAgICBib2R5OiBzdHJlYW0uUmVhZGFibGUsXG4gICAgcGFydFNpemU6IG51bWJlcixcbiAgKTogUHJvbWlzZTxVcGxvYWRlZE9iamVjdEluZm8+IHtcbiAgICAvLyBBIG1hcCBvZiB0aGUgcHJldmlvdXNseSB1cGxvYWRlZCBjaHVua3MsIGZvciByZXN1bWluZyBhIGZpbGUgdXBsb2FkLiBUaGlzXG4gICAgLy8gd2lsbCBiZSBudWxsIGlmIHdlIGFyZW4ndCByZXN1bWluZyBhbiB1cGxvYWQuXG4gICAgY29uc3Qgb2xkUGFydHM6IFJlY29yZDxudW1iZXIsIFBhcnQ+ID0ge31cblxuICAgIC8vIEtlZXAgdHJhY2sgb2YgdGhlIGV0YWdzIGZvciBhZ2dyZWdhdGluZyB0aGUgY2h1bmtzIHRvZ2V0aGVyIGxhdGVyLiBFYWNoXG4gICAgLy8gZXRhZyByZXByZXNlbnRzIGEgc2luZ2xlIGNodW5rIG9mIHRoZSBmaWxlLlxuICAgIGNvbnN0IGVUYWdzOiBQYXJ0W10gPSBbXVxuXG4gICAgY29uc3QgcHJldmlvdXNVcGxvYWRJZCA9IGF3YWl0IHRoaXMuZmluZFVwbG9hZElkKGJ1Y2tldE5hbWUsIG9iamVjdE5hbWUpXG4gICAgbGV0IHVwbG9hZElkOiBzdHJpbmdcbiAgICBpZiAoIXByZXZpb3VzVXBsb2FkSWQpIHtcbiAgICAgIHVwbG9hZElkID0gYXdhaXQgdGhpcy5pbml0aWF0ZU5ld011bHRpcGFydFVwbG9hZChidWNrZXROYW1lLCBvYmplY3ROYW1lLCBoZWFkZXJzKVxuICAgIH0gZWxzZSB7XG4gICAgICB1cGxvYWRJZCA9IHByZXZpb3VzVXBsb2FkSWRcbiAgICAgIGNvbnN0IG9sZFRhZ3MgPSBhd2FpdCB0aGlzLmxpc3RQYXJ0cyhidWNrZXROYW1lLCBvYmplY3ROYW1lLCBwcmV2aW91c1VwbG9hZElkKVxuICAgICAgb2xkVGFncy5mb3JFYWNoKChlKSA9PiB7XG4gICAgICAgIG9sZFBhcnRzW2UucGFydF0gPSBlXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGNodW5raWVyID0gbmV3IEJsb2NrU3RyZWFtMih7IHNpemU6IHBhcnRTaXplLCB6ZXJvUGFkZGluZzogZmFsc2UgfSlcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBjb25zdCBbXywgb10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGJvZHkucGlwZShjaHVua2llcikub24oJ2Vycm9yJywgcmVqZWN0KVxuICAgICAgICBjaHVua2llci5vbignZW5kJywgcmVzb2x2ZSkub24oJ2Vycm9yJywgcmVqZWN0KVxuICAgICAgfSksXG4gICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICBsZXQgcGFydE51bWJlciA9IDFcblxuICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIGNodW5raWVyKSB7XG4gICAgICAgICAgY29uc3QgbWQ1ID0gY3J5cHRvLmNyZWF0ZUhhc2goJ21kNScpLnVwZGF0ZShjaHVuaykuZGlnZXN0KClcblxuICAgICAgICAgIGNvbnN0IG9sZFBhcnQgPSBvbGRQYXJ0c1twYXJ0TnVtYmVyXVxuICAgICAgICAgIGlmIChvbGRQYXJ0KSB7XG4gICAgICAgICAgICBpZiAob2xkUGFydC5ldGFnID09PSBtZDUudG9TdHJpbmcoJ2hleCcpKSB7XG4gICAgICAgICAgICAgIGVUYWdzLnB1c2goeyBwYXJ0OiBwYXJ0TnVtYmVyLCBldGFnOiBvbGRQYXJ0LmV0YWcgfSlcbiAgICAgICAgICAgICAgcGFydE51bWJlcisrXG4gICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGFydE51bWJlcisrXG5cbiAgICAgICAgICAvLyBub3cgc3RhcnQgdG8gdXBsb2FkIG1pc3NpbmcgcGFydFxuICAgICAgICAgIGNvbnN0IG9wdGlvbnM6IFJlcXVlc3RPcHRpb24gPSB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICAgICAgcXVlcnk6IHFzLnN0cmluZ2lmeSh7IHBhcnROdW1iZXIsIHVwbG9hZElkIH0pLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAnQ29udGVudC1MZW5ndGgnOiBjaHVuay5sZW5ndGgsXG4gICAgICAgICAgICAgICdDb250ZW50LU1ENSc6IG1kNS50b1N0cmluZygnYmFzZTY0JyksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYnVja2V0TmFtZSxcbiAgICAgICAgICAgIG9iamVjdE5hbWUsXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmNPbWl0KG9wdGlvbnMsIGNodW5rKVxuXG4gICAgICAgICAgbGV0IGV0YWcgPSByZXNwb25zZS5oZWFkZXJzLmV0YWdcbiAgICAgICAgICBpZiAoZXRhZykge1xuICAgICAgICAgICAgZXRhZyA9IGV0YWcucmVwbGFjZSgvXlwiLywgJycpLnJlcGxhY2UoL1wiJC8sICcnKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBldGFnID0gJydcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlVGFncy5wdXNoKHsgcGFydDogcGFydE51bWJlciwgZXRhZyB9KVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY29tcGxldGVNdWx0aXBhcnRVcGxvYWQoYnVja2V0TmFtZSwgb2JqZWN0TmFtZSwgdXBsb2FkSWQsIGVUYWdzKVxuICAgICAgfSkoKSxcbiAgICBdKVxuXG4gICAgcmV0dXJuIG9cbiAgfVxuXG4gIGFzeW5jIHJlbW92ZUJ1Y2tldFJlcGxpY2F0aW9uKGJ1Y2tldE5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD5cbiAgcmVtb3ZlQnVja2V0UmVwbGljYXRpb24oYnVja2V0TmFtZTogc3RyaW5nLCBjYWxsYmFjazogTm9SZXN1bHRDYWxsYmFjayk6IHZvaWRcbiAgYXN5bmMgcmVtb3ZlQnVja2V0UmVwbGljYXRpb24oYnVja2V0TmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZShidWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKCdJbnZhbGlkIGJ1Y2tldCBuYW1lOiAnICsgYnVja2V0TmFtZSlcbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gJ0RFTEVURSdcbiAgICBjb25zdCBxdWVyeSA9ICdyZXBsaWNhdGlvbidcbiAgICBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmNPbWl0KHsgbWV0aG9kLCBidWNrZXROYW1lLCBxdWVyeSB9LCAnJywgWzIwMCwgMjA0XSwgJycpXG4gIH1cblxuICBzZXRCdWNrZXRSZXBsaWNhdGlvbihidWNrZXROYW1lOiBzdHJpbmcsIHJlcGxpY2F0aW9uQ29uZmlnOiBSZXBsaWNhdGlvbkNvbmZpZ09wdHMpOiB2b2lkXG4gIGFzeW5jIHNldEJ1Y2tldFJlcGxpY2F0aW9uKGJ1Y2tldE5hbWU6IHN0cmluZywgcmVwbGljYXRpb25Db25maWc6IFJlcGxpY2F0aW9uQ29uZmlnT3B0cyk6IFByb21pc2U8dm9pZD5cbiAgYXN5bmMgc2V0QnVja2V0UmVwbGljYXRpb24oYnVja2V0TmFtZTogc3RyaW5nLCByZXBsaWNhdGlvbkNvbmZpZzogUmVwbGljYXRpb25Db25maWdPcHRzKSB7XG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZShidWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKCdJbnZhbGlkIGJ1Y2tldCBuYW1lOiAnICsgYnVja2V0TmFtZSlcbiAgICB9XG4gICAgaWYgKCFpc09iamVjdChyZXBsaWNhdGlvbkNvbmZpZykpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoJ3JlcGxpY2F0aW9uQ29uZmlnIHNob3VsZCBiZSBvZiB0eXBlIFwib2JqZWN0XCInKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoXy5pc0VtcHR5KHJlcGxpY2F0aW9uQ29uZmlnLnJvbGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoJ1JvbGUgY2Fubm90IGJlIGVtcHR5JylcbiAgICAgIH0gZWxzZSBpZiAocmVwbGljYXRpb25Db25maWcucm9sZSAmJiAhaXNTdHJpbmcocmVwbGljYXRpb25Db25maWcucm9sZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcignSW52YWxpZCB2YWx1ZSBmb3Igcm9sZScsIHJlcGxpY2F0aW9uQ29uZmlnLnJvbGUpXG4gICAgICB9XG4gICAgICBpZiAoXy5pc0VtcHR5KHJlcGxpY2F0aW9uQ29uZmlnLnJ1bGVzKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKCdNaW5pbXVtIG9uZSByZXBsaWNhdGlvbiBydWxlIG11c3QgYmUgc3BlY2lmaWVkJylcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gJ1BVVCdcbiAgICBjb25zdCBxdWVyeSA9ICdyZXBsaWNhdGlvbidcbiAgICBjb25zdCBoZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge31cblxuICAgIGNvbnN0IHJlcGxpY2F0aW9uUGFyYW1zQ29uZmlnID0ge1xuICAgICAgUmVwbGljYXRpb25Db25maWd1cmF0aW9uOiB7XG4gICAgICAgIFJvbGU6IHJlcGxpY2F0aW9uQ29uZmlnLnJvbGUsXG4gICAgICAgIFJ1bGU6IHJlcGxpY2F0aW9uQ29uZmlnLnJ1bGVzLFxuICAgICAgfSxcbiAgICB9XG5cbiAgICBjb25zdCBidWlsZGVyID0gbmV3IHhtbDJqcy5CdWlsZGVyKHsgcmVuZGVyT3B0czogeyBwcmV0dHk6IGZhbHNlIH0sIGhlYWRsZXNzOiB0cnVlIH0pXG4gICAgY29uc3QgcGF5bG9hZCA9IGJ1aWxkZXIuYnVpbGRPYmplY3QocmVwbGljYXRpb25QYXJhbXNDb25maWcpXG4gICAgaGVhZGVyc1snQ29udGVudC1NRDUnXSA9IHRvTWQ1KHBheWxvYWQpXG4gICAgYXdhaXQgdGhpcy5tYWtlUmVxdWVzdEFzeW5jT21pdCh7IG1ldGhvZCwgYnVja2V0TmFtZSwgcXVlcnksIGhlYWRlcnMgfSwgcGF5bG9hZClcbiAgfVxuXG4gIGdldEJ1Y2tldFJlcGxpY2F0aW9uKGJ1Y2tldE5hbWU6IHN0cmluZyk6IHZvaWRcbiAgYXN5bmMgZ2V0QnVja2V0UmVwbGljYXRpb24oYnVja2V0TmFtZTogc3RyaW5nKTogUHJvbWlzZTxSZXBsaWNhdGlvbkNvbmZpZz5cbiAgYXN5bmMgZ2V0QnVja2V0UmVwbGljYXRpb24oYnVja2V0TmFtZTogc3RyaW5nKSB7XG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZShidWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKCdJbnZhbGlkIGJ1Y2tldCBuYW1lOiAnICsgYnVja2V0TmFtZSlcbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gJ0dFVCdcbiAgICBjb25zdCBxdWVyeSA9ICdyZXBsaWNhdGlvbidcblxuICAgIGNvbnN0IGh0dHBSZXMgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmMoeyBtZXRob2QsIGJ1Y2tldE5hbWUsIHF1ZXJ5IH0sICcnLCBbMjAwLCAyMDRdKVxuICAgIGNvbnN0IHhtbFJlc3VsdCA9IGF3YWl0IHJlYWRBc1N0cmluZyhodHRwUmVzKVxuICAgIHJldHVybiB4bWxQYXJzZXJzLnBhcnNlUmVwbGljYXRpb25Db25maWcoeG1sUmVzdWx0KVxuICB9XG5cbiAgZ2V0T2JqZWN0TGVnYWxIb2xkKFxuICAgIGJ1Y2tldE5hbWU6IHN0cmluZyxcbiAgICBvYmplY3ROYW1lOiBzdHJpbmcsXG4gICAgZ2V0T3B0cz86IEdldE9iamVjdExlZ2FsSG9sZE9wdGlvbnMsXG4gICAgY2FsbGJhY2s/OiBSZXN1bHRDYWxsYmFjazxMRUdBTF9IT0xEX1NUQVRVUz4sXG4gICk6IFByb21pc2U8TEVHQUxfSE9MRF9TVEFUVVM+XG4gIGFzeW5jIGdldE9iamVjdExlZ2FsSG9sZChcbiAgICBidWNrZXROYW1lOiBzdHJpbmcsXG4gICAgb2JqZWN0TmFtZTogc3RyaW5nLFxuICAgIGdldE9wdHM/OiBHZXRPYmplY3RMZWdhbEhvbGRPcHRpb25zLFxuICApOiBQcm9taXNlPExFR0FMX0hPTERfU1RBVFVTPiB7XG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZShidWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKCdJbnZhbGlkIGJ1Y2tldCBuYW1lOiAnICsgYnVja2V0TmFtZSlcbiAgICB9XG4gICAgaWYgKCFpc1ZhbGlkT2JqZWN0TmFtZShvYmplY3ROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkT2JqZWN0TmFtZUVycm9yKGBJbnZhbGlkIG9iamVjdCBuYW1lOiAke29iamVjdE5hbWV9YClcbiAgICB9XG5cbiAgICBpZiAoZ2V0T3B0cykge1xuICAgICAgaWYgKCFpc09iamVjdChnZXRPcHRzKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdnZXRPcHRzIHNob3VsZCBiZSBvZiB0eXBlIFwiT2JqZWN0XCInKVxuICAgICAgfSBlbHNlIGlmIChPYmplY3Qua2V5cyhnZXRPcHRzKS5sZW5ndGggPiAwICYmIGdldE9wdHMudmVyc2lvbklkICYmICFpc1N0cmluZyhnZXRPcHRzLnZlcnNpb25JZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmVyc2lvbklkIHNob3VsZCBiZSBvZiB0eXBlIHN0cmluZy46JywgZ2V0T3B0cy52ZXJzaW9uSWQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgbWV0aG9kID0gJ0dFVCdcbiAgICBsZXQgcXVlcnkgPSAnbGVnYWwtaG9sZCdcblxuICAgIGlmIChnZXRPcHRzPy52ZXJzaW9uSWQpIHtcbiAgICAgIHF1ZXJ5ICs9IGAmdmVyc2lvbklkPSR7Z2V0T3B0cy52ZXJzaW9uSWR9YFxuICAgIH1cblxuICAgIGNvbnN0IGh0dHBSZXMgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmMoeyBtZXRob2QsIGJ1Y2tldE5hbWUsIG9iamVjdE5hbWUsIHF1ZXJ5IH0sICcnLCBbMjAwXSlcbiAgICBjb25zdCBzdHJSZXMgPSBhd2FpdCByZWFkQXNTdHJpbmcoaHR0cFJlcylcbiAgICByZXR1cm4gcGFyc2VPYmplY3RMZWdhbEhvbGRDb25maWcoc3RyUmVzKVxuICB9XG5cbiAgc2V0T2JqZWN0TGVnYWxIb2xkKGJ1Y2tldE5hbWU6IHN0cmluZywgb2JqZWN0TmFtZTogc3RyaW5nLCBzZXRPcHRzPzogUHV0T2JqZWN0TGVnYWxIb2xkT3B0aW9ucyk6IHZvaWRcbiAgYXN5bmMgc2V0T2JqZWN0TGVnYWxIb2xkKFxuICAgIGJ1Y2tldE5hbWU6IHN0cmluZyxcbiAgICBvYmplY3ROYW1lOiBzdHJpbmcsXG4gICAgc2V0T3B0cyA9IHtcbiAgICAgIHN0YXR1czogTEVHQUxfSE9MRF9TVEFUVVMuRU5BQkxFRCxcbiAgICB9IGFzIFB1dE9iamVjdExlZ2FsSG9sZE9wdGlvbnMsXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICghaXNWYWxpZEJ1Y2tldE5hbWUoYnVja2V0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEJ1Y2tldE5hbWVFcnJvcignSW52YWxpZCBidWNrZXQgbmFtZTogJyArIGJ1Y2tldE5hbWUpXG4gICAgfVxuICAgIGlmICghaXNWYWxpZE9iamVjdE5hbWUob2JqZWN0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZE9iamVjdE5hbWVFcnJvcihgSW52YWxpZCBvYmplY3QgbmFtZTogJHtvYmplY3ROYW1lfWApXG4gICAgfVxuXG4gICAgaWYgKCFpc09iamVjdChzZXRPcHRzKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2V0T3B0cyBzaG91bGQgYmUgb2YgdHlwZSBcIk9iamVjdFwiJylcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFbTEVHQUxfSE9MRF9TVEFUVVMuRU5BQkxFRCwgTEVHQUxfSE9MRF9TVEFUVVMuRElTQUJMRURdLmluY2x1ZGVzKHNldE9wdHM/LnN0YXR1cykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBzdGF0dXM6ICcgKyBzZXRPcHRzLnN0YXR1cylcbiAgICAgIH1cbiAgICAgIGlmIChzZXRPcHRzLnZlcnNpb25JZCAmJiAhc2V0T3B0cy52ZXJzaW9uSWQubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZlcnNpb25JZCBzaG91bGQgYmUgb2YgdHlwZSBzdHJpbmcuOicgKyBzZXRPcHRzLnZlcnNpb25JZClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBtZXRob2QgPSAnUFVUJ1xuICAgIGxldCBxdWVyeSA9ICdsZWdhbC1ob2xkJ1xuXG4gICAgaWYgKHNldE9wdHMudmVyc2lvbklkKSB7XG4gICAgICBxdWVyeSArPSBgJnZlcnNpb25JZD0ke3NldE9wdHMudmVyc2lvbklkfWBcbiAgICB9XG5cbiAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICBTdGF0dXM6IHNldE9wdHMuc3RhdHVzLFxuICAgIH1cblxuICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgeG1sMmpzLkJ1aWxkZXIoeyByb290TmFtZTogJ0xlZ2FsSG9sZCcsIHJlbmRlck9wdHM6IHsgcHJldHR5OiBmYWxzZSB9LCBoZWFkbGVzczogdHJ1ZSB9KVxuICAgIGNvbnN0IHBheWxvYWQgPSBidWlsZGVyLmJ1aWxkT2JqZWN0KGNvbmZpZylcbiAgICBjb25zdCBoZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge31cbiAgICBoZWFkZXJzWydDb250ZW50LU1ENSddID0gdG9NZDUocGF5bG9hZClcblxuICAgIGF3YWl0IHRoaXMubWFrZVJlcXVlc3RBc3luY09taXQoeyBtZXRob2QsIGJ1Y2tldE5hbWUsIG9iamVjdE5hbWUsIHF1ZXJ5LCBoZWFkZXJzIH0sIHBheWxvYWQpXG4gIH1cblxuICAvKipcbiAgICogR2V0IFRhZ3MgYXNzb2NpYXRlZCB3aXRoIGEgQnVja2V0XG4gICAqL1xuICBhc3luYyBnZXRCdWNrZXRUYWdnaW5nKGJ1Y2tldE5hbWU6IHN0cmluZyk6IFByb21pc2U8VGFnW10+IHtcbiAgICBpZiAoIWlzVmFsaWRCdWNrZXROYW1lKGJ1Y2tldE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRCdWNrZXROYW1lRXJyb3IoYEludmFsaWQgYnVja2V0IG5hbWU6ICR7YnVja2V0TmFtZX1gKVxuICAgIH1cblxuICAgIGNvbnN0IG1ldGhvZCA9ICdHRVQnXG4gICAgY29uc3QgcXVlcnkgPSAndGFnZ2luZydcbiAgICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kLCBidWNrZXROYW1lLCBxdWVyeSB9XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3RBc3luYyhyZXF1ZXN0T3B0aW9ucylcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVhZEFzU3RyaW5nKHJlc3BvbnNlKVxuICAgIHJldHVybiB4bWxQYXJzZXJzLnBhcnNlVGFnZ2luZyhib2R5KVxuICB9XG5cbiAgLyoqXG4gICAqICBHZXQgdGhlIHRhZ3MgYXNzb2NpYXRlZCB3aXRoIGEgYnVja2V0IE9SIGFuIG9iamVjdFxuICAgKi9cbiAgYXN5bmMgZ2V0T2JqZWN0VGFnZ2luZyhidWNrZXROYW1lOiBzdHJpbmcsIG9iamVjdE5hbWU6IHN0cmluZywgZ2V0T3B0cz86IEdldE9iamVjdE9wdHMpOiBQcm9taXNlPFRhZ1tdPiB7XG4gICAgY29uc3QgbWV0aG9kID0gJ0dFVCdcbiAgICBsZXQgcXVlcnkgPSAndGFnZ2luZydcblxuICAgIGlmICghaXNWYWxpZEJ1Y2tldE5hbWUoYnVja2V0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEJ1Y2tldE5hbWVFcnJvcignSW52YWxpZCBidWNrZXQgbmFtZTogJyArIGJ1Y2tldE5hbWUpXG4gICAgfVxuICAgIGlmICghaXNWYWxpZE9iamVjdE5hbWUob2JqZWN0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEJ1Y2tldE5hbWVFcnJvcignSW52YWxpZCBvYmplY3QgbmFtZTogJyArIG9iamVjdE5hbWUpXG4gICAgfVxuICAgIGlmIChnZXRPcHRzICYmICFpc09iamVjdChnZXRPcHRzKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcignZ2V0T3B0cyBzaG91bGQgYmUgb2YgdHlwZSBcIm9iamVjdFwiJylcbiAgICB9XG5cbiAgICBpZiAoZ2V0T3B0cyAmJiBnZXRPcHRzLnZlcnNpb25JZCkge1xuICAgICAgcXVlcnkgPSBgJHtxdWVyeX0mdmVyc2lvbklkPSR7Z2V0T3B0cy52ZXJzaW9uSWR9YFxuICAgIH1cbiAgICBjb25zdCByZXF1ZXN0T3B0aW9uczogUmVxdWVzdE9wdGlvbiA9IHsgbWV0aG9kLCBidWNrZXROYW1lLCBxdWVyeSB9XG4gICAgaWYgKG9iamVjdE5hbWUpIHtcbiAgICAgIHJlcXVlc3RPcHRpb25zWydvYmplY3ROYW1lJ10gPSBvYmplY3ROYW1lXG4gICAgfVxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmMocmVxdWVzdE9wdGlvbnMpXG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlYWRBc1N0cmluZyhyZXNwb25zZSlcbiAgICByZXR1cm4geG1sUGFyc2Vycy5wYXJzZVRhZ2dpbmcoYm9keSlcbiAgfVxuXG4gIC8qKlxuICAgKiAgU2V0IHRoZSBwb2xpY3kgb24gYSBidWNrZXQgb3IgYW4gb2JqZWN0IHByZWZpeC5cbiAgICovXG4gIGFzeW5jIHNldEJ1Y2tldFBvbGljeShidWNrZXROYW1lOiBzdHJpbmcsIHBvbGljeTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gVmFsaWRhdGUgYXJndW1lbnRzLlxuICAgIGlmICghaXNWYWxpZEJ1Y2tldE5hbWUoYnVja2V0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEJ1Y2tldE5hbWVFcnJvcihgSW52YWxpZCBidWNrZXQgbmFtZTogJHtidWNrZXROYW1lfWApXG4gICAgfVxuICAgIGlmICghaXNTdHJpbmcocG9saWN5KSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0UG9saWN5RXJyb3IoYEludmFsaWQgYnVja2V0IHBvbGljeTogJHtwb2xpY3l9IC0gbXVzdCBiZSBcInN0cmluZ1wiYClcbiAgICB9XG5cbiAgICBjb25zdCBxdWVyeSA9ICdwb2xpY3knXG5cbiAgICBsZXQgbWV0aG9kID0gJ0RFTEVURSdcbiAgICBpZiAocG9saWN5KSB7XG4gICAgICBtZXRob2QgPSAnUFVUJ1xuICAgIH1cblxuICAgIGF3YWl0IHRoaXMubWFrZVJlcXVlc3RBc3luY09taXQoeyBtZXRob2QsIGJ1Y2tldE5hbWUsIHF1ZXJ5IH0sIHBvbGljeSwgWzIwNF0sICcnKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcG9saWN5IG9uIGEgYnVja2V0IG9yIGFuIG9iamVjdCBwcmVmaXguXG4gICAqL1xuICBhc3luYyBnZXRCdWNrZXRQb2xpY3koYnVja2V0TmFtZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAvLyBWYWxpZGF0ZSBhcmd1bWVudHMuXG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZShidWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKGBJbnZhbGlkIGJ1Y2tldCBuYW1lOiAke2J1Y2tldE5hbWV9YClcbiAgICB9XG5cbiAgICBjb25zdCBtZXRob2QgPSAnR0VUJ1xuICAgIGNvbnN0IHF1ZXJ5ID0gJ3BvbGljeSdcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmMoeyBtZXRob2QsIGJ1Y2tldE5hbWUsIHF1ZXJ5IH0pXG4gICAgcmV0dXJuIGF3YWl0IHJlYWRBc1N0cmluZyhyZXMpXG4gIH1cblxuICBhc3luYyBwdXRPYmplY3RSZXRlbnRpb24oYnVja2V0TmFtZTogc3RyaW5nLCBvYmplY3ROYW1lOiBzdHJpbmcsIHJldGVudGlvbk9wdHM6IFJldGVudGlvbiA9IHt9KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZShidWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKGBJbnZhbGlkIGJ1Y2tldCBuYW1lOiAke2J1Y2tldE5hbWV9YClcbiAgICB9XG4gICAgaWYgKCFpc1ZhbGlkT2JqZWN0TmFtZShvYmplY3ROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkT2JqZWN0TmFtZUVycm9yKGBJbnZhbGlkIG9iamVjdCBuYW1lOiAke29iamVjdE5hbWV9YClcbiAgICB9XG4gICAgaWYgKCFpc09iamVjdChyZXRlbnRpb25PcHRzKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcigncmV0ZW50aW9uT3B0cyBzaG91bGQgYmUgb2YgdHlwZSBcIm9iamVjdFwiJylcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHJldGVudGlvbk9wdHMuZ292ZXJuYW5jZUJ5cGFzcyAmJiAhaXNCb29sZWFuKHJldGVudGlvbk9wdHMuZ292ZXJuYW5jZUJ5cGFzcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcihgSW52YWxpZCB2YWx1ZSBmb3IgZ292ZXJuYW5jZUJ5cGFzczogJHtyZXRlbnRpb25PcHRzLmdvdmVybmFuY2VCeXBhc3N9YClcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgcmV0ZW50aW9uT3B0cy5tb2RlICYmXG4gICAgICAgICFbUkVURU5USU9OX01PREVTLkNPTVBMSUFOQ0UsIFJFVEVOVElPTl9NT0RFUy5HT1ZFUk5BTkNFXS5pbmNsdWRlcyhyZXRlbnRpb25PcHRzLm1vZGUpXG4gICAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcihgSW52YWxpZCBvYmplY3QgcmV0ZW50aW9uIG1vZGU6ICR7cmV0ZW50aW9uT3B0cy5tb2RlfWApXG4gICAgICB9XG4gICAgICBpZiAocmV0ZW50aW9uT3B0cy5yZXRhaW5VbnRpbERhdGUgJiYgIWlzU3RyaW5nKHJldGVudGlvbk9wdHMucmV0YWluVW50aWxEYXRlKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKGBJbnZhbGlkIHZhbHVlIGZvciByZXRhaW5VbnRpbERhdGU6ICR7cmV0ZW50aW9uT3B0cy5yZXRhaW5VbnRpbERhdGV9YClcbiAgICAgIH1cbiAgICAgIGlmIChyZXRlbnRpb25PcHRzLnZlcnNpb25JZCAmJiAhaXNTdHJpbmcocmV0ZW50aW9uT3B0cy52ZXJzaW9uSWQpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoYEludmFsaWQgdmFsdWUgZm9yIHZlcnNpb25JZDogJHtyZXRlbnRpb25PcHRzLnZlcnNpb25JZH1gKVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IG1ldGhvZCA9ICdQVVQnXG4gICAgbGV0IHF1ZXJ5ID0gJ3JldGVudGlvbidcblxuICAgIGNvbnN0IGhlYWRlcnM6IFJlcXVlc3RIZWFkZXJzID0ge31cbiAgICBpZiAocmV0ZW50aW9uT3B0cy5nb3Zlcm5hbmNlQnlwYXNzKSB7XG4gICAgICBoZWFkZXJzWydYLUFtei1CeXBhc3MtR292ZXJuYW5jZS1SZXRlbnRpb24nXSA9IHRydWVcbiAgICB9XG5cbiAgICBjb25zdCBidWlsZGVyID0gbmV3IHhtbDJqcy5CdWlsZGVyKHsgcm9vdE5hbWU6ICdSZXRlbnRpb24nLCByZW5kZXJPcHRzOiB7IHByZXR0eTogZmFsc2UgfSwgaGVhZGxlc3M6IHRydWUgfSlcbiAgICBjb25zdCBwYXJhbXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fVxuXG4gICAgaWYgKHJldGVudGlvbk9wdHMubW9kZSkge1xuICAgICAgcGFyYW1zLk1vZGUgPSByZXRlbnRpb25PcHRzLm1vZGVcbiAgICB9XG4gICAgaWYgKHJldGVudGlvbk9wdHMucmV0YWluVW50aWxEYXRlKSB7XG4gICAgICBwYXJhbXMuUmV0YWluVW50aWxEYXRlID0gcmV0ZW50aW9uT3B0cy5yZXRhaW5VbnRpbERhdGVcbiAgICB9XG4gICAgaWYgKHJldGVudGlvbk9wdHMudmVyc2lvbklkKSB7XG4gICAgICBxdWVyeSArPSBgJnZlcnNpb25JZD0ke3JldGVudGlvbk9wdHMudmVyc2lvbklkfWBcbiAgICB9XG5cbiAgICBjb25zdCBwYXlsb2FkID0gYnVpbGRlci5idWlsZE9iamVjdChwYXJhbXMpXG5cbiAgICBoZWFkZXJzWydDb250ZW50LU1ENSddID0gdG9NZDUocGF5bG9hZClcbiAgICBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmNPbWl0KHsgbWV0aG9kLCBidWNrZXROYW1lLCBvYmplY3ROYW1lLCBxdWVyeSwgaGVhZGVycyB9LCBwYXlsb2FkLCBbMjAwLCAyMDRdKVxuICB9XG5cbiAgZ2V0T2JqZWN0TG9ja0NvbmZpZyhidWNrZXROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBSZXN1bHRDYWxsYmFjazxPYmplY3RMb2NrSW5mbz4pOiB2b2lkXG4gIGdldE9iamVjdExvY2tDb25maWcoYnVja2V0TmFtZTogc3RyaW5nKTogdm9pZFxuICBhc3luYyBnZXRPYmplY3RMb2NrQ29uZmlnKGJ1Y2tldE5hbWU6IHN0cmluZyk6IFByb21pc2U8T2JqZWN0TG9ja0luZm8+XG4gIGFzeW5jIGdldE9iamVjdExvY2tDb25maWcoYnVja2V0TmFtZTogc3RyaW5nKSB7XG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZShidWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKCdJbnZhbGlkIGJ1Y2tldCBuYW1lOiAnICsgYnVja2V0TmFtZSlcbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gJ0dFVCdcbiAgICBjb25zdCBxdWVyeSA9ICdvYmplY3QtbG9jaydcblxuICAgIGNvbnN0IGh0dHBSZXMgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmMoeyBtZXRob2QsIGJ1Y2tldE5hbWUsIHF1ZXJ5IH0pXG4gICAgY29uc3QgeG1sUmVzdWx0ID0gYXdhaXQgcmVhZEFzU3RyaW5nKGh0dHBSZXMpXG4gICAgcmV0dXJuIHhtbFBhcnNlcnMucGFyc2VPYmplY3RMb2NrQ29uZmlnKHhtbFJlc3VsdClcbiAgfVxuXG4gIHNldE9iamVjdExvY2tDb25maWcoYnVja2V0TmFtZTogc3RyaW5nLCBsb2NrQ29uZmlnT3B0czogT21pdDxPYmplY3RMb2NrSW5mbywgJ29iamVjdExvY2tFbmFibGVkJz4pOiB2b2lkXG4gIGFzeW5jIHNldE9iamVjdExvY2tDb25maWcoXG4gICAgYnVja2V0TmFtZTogc3RyaW5nLFxuICAgIGxvY2tDb25maWdPcHRzOiBPbWl0PE9iamVjdExvY2tJbmZvLCAnb2JqZWN0TG9ja0VuYWJsZWQnPixcbiAgKTogUHJvbWlzZTx2b2lkPlxuICBhc3luYyBzZXRPYmplY3RMb2NrQ29uZmlnKGJ1Y2tldE5hbWU6IHN0cmluZywgbG9ja0NvbmZpZ09wdHM6IE9taXQ8T2JqZWN0TG9ja0luZm8sICdvYmplY3RMb2NrRW5hYmxlZCc+KSB7XG4gICAgY29uc3QgcmV0ZW50aW9uTW9kZXMgPSBbUkVURU5USU9OX01PREVTLkNPTVBMSUFOQ0UsIFJFVEVOVElPTl9NT0RFUy5HT1ZFUk5BTkNFXVxuICAgIGNvbnN0IHZhbGlkVW5pdHMgPSBbUkVURU5USU9OX1ZBTElESVRZX1VOSVRTLkRBWVMsIFJFVEVOVElPTl9WQUxJRElUWV9VTklUUy5ZRUFSU11cblxuICAgIGlmICghaXNWYWxpZEJ1Y2tldE5hbWUoYnVja2V0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEJ1Y2tldE5hbWVFcnJvcignSW52YWxpZCBidWNrZXQgbmFtZTogJyArIGJ1Y2tldE5hbWUpXG4gICAgfVxuXG4gICAgaWYgKGxvY2tDb25maWdPcHRzLm1vZGUgJiYgIXJldGVudGlvbk1vZGVzLmluY2x1ZGVzKGxvY2tDb25maWdPcHRzLm1vZGUpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBsb2NrQ29uZmlnT3B0cy5tb2RlIHNob3VsZCBiZSBvbmUgb2YgJHtyZXRlbnRpb25Nb2Rlc31gKVxuICAgIH1cbiAgICBpZiAobG9ja0NvbmZpZ09wdHMudW5pdCAmJiAhdmFsaWRVbml0cy5pbmNsdWRlcyhsb2NrQ29uZmlnT3B0cy51bml0KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgbG9ja0NvbmZpZ09wdHMudW5pdCBzaG91bGQgYmUgb25lIG9mICR7dmFsaWRVbml0c31gKVxuICAgIH1cbiAgICBpZiAobG9ja0NvbmZpZ09wdHMudmFsaWRpdHkgJiYgIWlzTnVtYmVyKGxvY2tDb25maWdPcHRzLnZhbGlkaXR5KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgbG9ja0NvbmZpZ09wdHMudmFsaWRpdHkgc2hvdWxkIGJlIGEgbnVtYmVyYClcbiAgICB9XG5cbiAgICBjb25zdCBtZXRob2QgPSAnUFVUJ1xuICAgIGNvbnN0IHF1ZXJ5ID0gJ29iamVjdC1sb2NrJ1xuXG4gICAgY29uc3QgY29uZmlnOiBPYmplY3RMb2NrQ29uZmlnUGFyYW0gPSB7XG4gICAgICBPYmplY3RMb2NrRW5hYmxlZDogJ0VuYWJsZWQnLFxuICAgIH1cbiAgICBjb25zdCBjb25maWdLZXlzID0gT2JqZWN0LmtleXMobG9ja0NvbmZpZ09wdHMpXG5cbiAgICBjb25zdCBpc0FsbEtleXNTZXQgPSBbJ3VuaXQnLCAnbW9kZScsICd2YWxpZGl0eSddLmV2ZXJ5KChsY2spID0+IGNvbmZpZ0tleXMuaW5jbHVkZXMobGNrKSlcbiAgICAvLyBDaGVjayBpZiBrZXlzIGFyZSBwcmVzZW50IGFuZCBhbGwga2V5cyBhcmUgcHJlc2VudC5cbiAgICBpZiAoY29uZmlnS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoIWlzQWxsS2V5c1NldCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIGBsb2NrQ29uZmlnT3B0cy5tb2RlLGxvY2tDb25maWdPcHRzLnVuaXQsbG9ja0NvbmZpZ09wdHMudmFsaWRpdHkgYWxsIHRoZSBwcm9wZXJ0aWVzIHNob3VsZCBiZSBzcGVjaWZpZWQuYCxcbiAgICAgICAgKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uZmlnLlJ1bGUgPSB7XG4gICAgICAgICAgRGVmYXVsdFJldGVudGlvbjoge30sXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvY2tDb25maWdPcHRzLm1vZGUpIHtcbiAgICAgICAgICBjb25maWcuUnVsZS5EZWZhdWx0UmV0ZW50aW9uLk1vZGUgPSBsb2NrQ29uZmlnT3B0cy5tb2RlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvY2tDb25maWdPcHRzLnVuaXQgPT09IFJFVEVOVElPTl9WQUxJRElUWV9VTklUUy5EQVlTKSB7XG4gICAgICAgICAgY29uZmlnLlJ1bGUuRGVmYXVsdFJldGVudGlvbi5EYXlzID0gbG9ja0NvbmZpZ09wdHMudmFsaWRpdHlcbiAgICAgICAgfSBlbHNlIGlmIChsb2NrQ29uZmlnT3B0cy51bml0ID09PSBSRVRFTlRJT05fVkFMSURJVFlfVU5JVFMuWUVBUlMpIHtcbiAgICAgICAgICBjb25maWcuUnVsZS5EZWZhdWx0UmV0ZW50aW9uLlllYXJzID0gbG9ja0NvbmZpZ09wdHMudmFsaWRpdHlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgeG1sMmpzLkJ1aWxkZXIoe1xuICAgICAgcm9vdE5hbWU6ICdPYmplY3RMb2NrQ29uZmlndXJhdGlvbicsXG4gICAgICByZW5kZXJPcHRzOiB7IHByZXR0eTogZmFsc2UgfSxcbiAgICAgIGhlYWRsZXNzOiB0cnVlLFxuICAgIH0pXG4gICAgY29uc3QgcGF5bG9hZCA9IGJ1aWxkZXIuYnVpbGRPYmplY3QoY29uZmlnKVxuXG4gICAgY29uc3QgaGVhZGVyczogUmVxdWVzdEhlYWRlcnMgPSB7fVxuICAgIGhlYWRlcnNbJ0NvbnRlbnQtTUQ1J10gPSB0b01kNShwYXlsb2FkKVxuXG4gICAgYXdhaXQgdGhpcy5tYWtlUmVxdWVzdEFzeW5jT21pdCh7IG1ldGhvZCwgYnVja2V0TmFtZSwgcXVlcnksIGhlYWRlcnMgfSwgcGF5bG9hZClcbiAgfVxuXG4gIGFzeW5jIGdldEJ1Y2tldFZlcnNpb25pbmcoYnVja2V0TmFtZTogc3RyaW5nKTogUHJvbWlzZTxCdWNrZXRWZXJzaW9uaW5nQ29uZmlndXJhdGlvbj4ge1xuICAgIGlmICghaXNWYWxpZEJ1Y2tldE5hbWUoYnVja2V0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEJ1Y2tldE5hbWVFcnJvcignSW52YWxpZCBidWNrZXQgbmFtZTogJyArIGJ1Y2tldE5hbWUpXG4gICAgfVxuICAgIGNvbnN0IG1ldGhvZCA9ICdHRVQnXG4gICAgY29uc3QgcXVlcnkgPSAndmVyc2lvbmluZydcblxuICAgIGNvbnN0IGh0dHBSZXMgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmMoeyBtZXRob2QsIGJ1Y2tldE5hbWUsIHF1ZXJ5IH0pXG4gICAgY29uc3QgeG1sUmVzdWx0ID0gYXdhaXQgcmVhZEFzU3RyaW5nKGh0dHBSZXMpXG4gICAgcmV0dXJuIGF3YWl0IHhtbFBhcnNlcnMucGFyc2VCdWNrZXRWZXJzaW9uaW5nQ29uZmlnKHhtbFJlc3VsdClcbiAgfVxuXG4gIGFzeW5jIHNldEJ1Y2tldFZlcnNpb25pbmcoYnVja2V0TmFtZTogc3RyaW5nLCB2ZXJzaW9uQ29uZmlnOiBCdWNrZXRWZXJzaW9uaW5nQ29uZmlndXJhdGlvbik6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICghaXNWYWxpZEJ1Y2tldE5hbWUoYnVja2V0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEJ1Y2tldE5hbWVFcnJvcignSW52YWxpZCBidWNrZXQgbmFtZTogJyArIGJ1Y2tldE5hbWUpXG4gICAgfVxuICAgIGlmICghT2JqZWN0LmtleXModmVyc2lvbkNvbmZpZykubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKCd2ZXJzaW9uQ29uZmlnIHNob3VsZCBiZSBvZiB0eXBlIFwib2JqZWN0XCInKVxuICAgIH1cblxuICAgIGNvbnN0IG1ldGhvZCA9ICdQVVQnXG4gICAgY29uc3QgcXVlcnkgPSAndmVyc2lvbmluZydcbiAgICBjb25zdCBidWlsZGVyID0gbmV3IHhtbDJqcy5CdWlsZGVyKHtcbiAgICAgIHJvb3ROYW1lOiAnVmVyc2lvbmluZ0NvbmZpZ3VyYXRpb24nLFxuICAgICAgcmVuZGVyT3B0czogeyBwcmV0dHk6IGZhbHNlIH0sXG4gICAgICBoZWFkbGVzczogdHJ1ZSxcbiAgICB9KVxuICAgIGNvbnN0IHBheWxvYWQgPSBidWlsZGVyLmJ1aWxkT2JqZWN0KHZlcnNpb25Db25maWcpXG5cbiAgICBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmNPbWl0KHsgbWV0aG9kLCBidWNrZXROYW1lLCBxdWVyeSB9LCBwYXlsb2FkKVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZXRUYWdnaW5nKHRhZ2dpbmdQYXJhbXM6IFB1dFRhZ2dpbmdQYXJhbXMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB7IGJ1Y2tldE5hbWUsIG9iamVjdE5hbWUsIHRhZ3MsIHB1dE9wdHMgfSA9IHRhZ2dpbmdQYXJhbXNcbiAgICBjb25zdCBtZXRob2QgPSAnUFVUJ1xuICAgIGxldCBxdWVyeSA9ICd0YWdnaW5nJ1xuXG4gICAgaWYgKHB1dE9wdHMgJiYgcHV0T3B0cz8udmVyc2lvbklkKSB7XG4gICAgICBxdWVyeSA9IGAke3F1ZXJ5fSZ2ZXJzaW9uSWQ9JHtwdXRPcHRzLnZlcnNpb25JZH1gXG4gICAgfVxuICAgIGNvbnN0IHRhZ3NMaXN0ID0gW11cbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0YWdzKSkge1xuICAgICAgdGFnc0xpc3QucHVzaCh7IEtleToga2V5LCBWYWx1ZTogdmFsdWUgfSlcbiAgICB9XG4gICAgY29uc3QgdGFnZ2luZ0NvbmZpZyA9IHtcbiAgICAgIFRhZ2dpbmc6IHtcbiAgICAgICAgVGFnU2V0OiB7XG4gICAgICAgICAgVGFnOiB0YWdzTGlzdCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfVxuICAgIGNvbnN0IGhlYWRlcnMgPSB7fSBhcyBSZXF1ZXN0SGVhZGVyc1xuICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgeG1sMmpzLkJ1aWxkZXIoeyBoZWFkbGVzczogdHJ1ZSwgcmVuZGVyT3B0czogeyBwcmV0dHk6IGZhbHNlIH0gfSlcbiAgICBjb25zdCBwYXlsb2FkQnVmID0gQnVmZmVyLmZyb20oYnVpbGRlci5idWlsZE9iamVjdCh0YWdnaW5nQ29uZmlnKSlcbiAgICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIGJ1Y2tldE5hbWUsXG4gICAgICBxdWVyeSxcbiAgICAgIGhlYWRlcnMsXG5cbiAgICAgIC4uLihvYmplY3ROYW1lICYmIHsgb2JqZWN0TmFtZTogb2JqZWN0TmFtZSB9KSxcbiAgICB9XG5cbiAgICBoZWFkZXJzWydDb250ZW50LU1ENSddID0gdG9NZDUocGF5bG9hZEJ1ZilcblxuICAgIGF3YWl0IHRoaXMubWFrZVJlcXVlc3RBc3luY09taXQocmVxdWVzdE9wdGlvbnMsIHBheWxvYWRCdWYpXG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHJlbW92ZVRhZ2dpbmcoeyBidWNrZXROYW1lLCBvYmplY3ROYW1lLCByZW1vdmVPcHRzIH06IFJlbW92ZVRhZ2dpbmdQYXJhbXMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBtZXRob2QgPSAnREVMRVRFJ1xuICAgIGxldCBxdWVyeSA9ICd0YWdnaW5nJ1xuXG4gICAgaWYgKHJlbW92ZU9wdHMgJiYgT2JqZWN0LmtleXMocmVtb3ZlT3B0cykubGVuZ3RoICYmIHJlbW92ZU9wdHMudmVyc2lvbklkKSB7XG4gICAgICBxdWVyeSA9IGAke3F1ZXJ5fSZ2ZXJzaW9uSWQ9JHtyZW1vdmVPcHRzLnZlcnNpb25JZH1gXG4gICAgfVxuICAgIGNvbnN0IHJlcXVlc3RPcHRpb25zID0geyBtZXRob2QsIGJ1Y2tldE5hbWUsIG9iamVjdE5hbWUsIHF1ZXJ5IH1cblxuICAgIGlmIChvYmplY3ROYW1lKSB7XG4gICAgICByZXF1ZXN0T3B0aW9uc1snb2JqZWN0TmFtZSddID0gb2JqZWN0TmFtZVxuICAgIH1cbiAgICBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmMocmVxdWVzdE9wdGlvbnMsICcnLCBbMjAwLCAyMDRdKVxuICB9XG5cbiAgYXN5bmMgc2V0QnVja2V0VGFnZ2luZyhidWNrZXROYW1lOiBzdHJpbmcsIHRhZ3M6IFRhZ3MpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoIWlzVmFsaWRCdWNrZXROYW1lKGJ1Y2tldE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRCdWNrZXROYW1lRXJyb3IoJ0ludmFsaWQgYnVja2V0IG5hbWU6ICcgKyBidWNrZXROYW1lKVxuICAgIH1cbiAgICBpZiAoIWlzT2JqZWN0KHRhZ3MpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKCd0YWdzIHNob3VsZCBiZSBvZiB0eXBlIFwib2JqZWN0XCInKVxuICAgIH1cbiAgICBpZiAoT2JqZWN0LmtleXModGFncykubGVuZ3RoID4gMTApIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoJ21heGltdW0gdGFncyBhbGxvd2VkIGlzIDEwXCInKVxuICAgIH1cblxuICAgIGF3YWl0IHRoaXMuc2V0VGFnZ2luZyh7IGJ1Y2tldE5hbWUsIHRhZ3MgfSlcbiAgfVxuXG4gIGFzeW5jIHJlbW92ZUJ1Y2tldFRhZ2dpbmcoYnVja2V0TmFtZTogc3RyaW5nKSB7XG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZShidWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKCdJbnZhbGlkIGJ1Y2tldCBuYW1lOiAnICsgYnVja2V0TmFtZSlcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5yZW1vdmVUYWdnaW5nKHsgYnVja2V0TmFtZSB9KVxuICB9XG5cbiAgYXN5bmMgc2V0T2JqZWN0VGFnZ2luZyhidWNrZXROYW1lOiBzdHJpbmcsIG9iamVjdE5hbWU6IHN0cmluZywgdGFnczogVGFncywgcHV0T3B0cz86IFRhZ2dpbmdPcHRzKSB7XG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZShidWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKCdJbnZhbGlkIGJ1Y2tldCBuYW1lOiAnICsgYnVja2V0TmFtZSlcbiAgICB9XG4gICAgaWYgKCFpc1ZhbGlkT2JqZWN0TmFtZShvYmplY3ROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKCdJbnZhbGlkIG9iamVjdCBuYW1lOiAnICsgb2JqZWN0TmFtZSlcbiAgICB9XG5cbiAgICBpZiAoIWlzT2JqZWN0KHRhZ3MpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKCd0YWdzIHNob3VsZCBiZSBvZiB0eXBlIFwib2JqZWN0XCInKVxuICAgIH1cbiAgICBpZiAoT2JqZWN0LmtleXModGFncykubGVuZ3RoID4gMTApIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoJ01heGltdW0gdGFncyBhbGxvd2VkIGlzIDEwXCInKVxuICAgIH1cblxuICAgIGF3YWl0IHRoaXMuc2V0VGFnZ2luZyh7IGJ1Y2tldE5hbWUsIG9iamVjdE5hbWUsIHRhZ3MsIHB1dE9wdHMgfSlcbiAgfVxuXG4gIGFzeW5jIHJlbW92ZU9iamVjdFRhZ2dpbmcoYnVja2V0TmFtZTogc3RyaW5nLCBvYmplY3ROYW1lOiBzdHJpbmcsIHJlbW92ZU9wdHM6IFRhZ2dpbmdPcHRzKSB7XG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZShidWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKCdJbnZhbGlkIGJ1Y2tldCBuYW1lOiAnICsgYnVja2V0TmFtZSlcbiAgICB9XG4gICAgaWYgKCFpc1ZhbGlkT2JqZWN0TmFtZShvYmplY3ROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKCdJbnZhbGlkIG9iamVjdCBuYW1lOiAnICsgb2JqZWN0TmFtZSlcbiAgICB9XG4gICAgaWYgKHJlbW92ZU9wdHMgJiYgT2JqZWN0LmtleXMocmVtb3ZlT3B0cykubGVuZ3RoICYmICFpc09iamVjdChyZW1vdmVPcHRzKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcigncmVtb3ZlT3B0cyBzaG91bGQgYmUgb2YgdHlwZSBcIm9iamVjdFwiJylcbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLnJlbW92ZVRhZ2dpbmcoeyBidWNrZXROYW1lLCBvYmplY3ROYW1lLCByZW1vdmVPcHRzIH0pXG4gIH1cblxuICBhc3luYyBzZWxlY3RPYmplY3RDb250ZW50KFxuICAgIGJ1Y2tldE5hbWU6IHN0cmluZyxcbiAgICBvYmplY3ROYW1lOiBzdHJpbmcsXG4gICAgc2VsZWN0T3B0czogU2VsZWN0T3B0aW9ucyxcbiAgKTogUHJvbWlzZTxTZWxlY3RSZXN1bHRzIHwgdW5kZWZpbmVkPiB7XG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZShidWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKGBJbnZhbGlkIGJ1Y2tldCBuYW1lOiAke2J1Y2tldE5hbWV9YClcbiAgICB9XG4gICAgaWYgKCFpc1ZhbGlkT2JqZWN0TmFtZShvYmplY3ROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkT2JqZWN0TmFtZUVycm9yKGBJbnZhbGlkIG9iamVjdCBuYW1lOiAke29iamVjdE5hbWV9YClcbiAgICB9XG4gICAgaWYgKCFfLmlzRW1wdHkoc2VsZWN0T3B0cykpIHtcbiAgICAgIGlmICghaXNTdHJpbmcoc2VsZWN0T3B0cy5leHByZXNzaW9uKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzcWxFeHByZXNzaW9uIHNob3VsZCBiZSBvZiB0eXBlIFwic3RyaW5nXCInKVxuICAgICAgfVxuICAgICAgaWYgKCFfLmlzRW1wdHkoc2VsZWN0T3B0cy5pbnB1dFNlcmlhbGl6YXRpb24pKSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoc2VsZWN0T3B0cy5pbnB1dFNlcmlhbGl6YXRpb24pKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW5wdXRTZXJpYWxpemF0aW9uIHNob3VsZCBiZSBvZiB0eXBlIFwib2JqZWN0XCInKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnB1dFNlcmlhbGl6YXRpb24gaXMgcmVxdWlyZWQnKVxuICAgICAgfVxuICAgICAgaWYgKCFfLmlzRW1wdHkoc2VsZWN0T3B0cy5vdXRwdXRTZXJpYWxpemF0aW9uKSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KHNlbGVjdE9wdHMub3V0cHV0U2VyaWFsaXphdGlvbikpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvdXRwdXRTZXJpYWxpemF0aW9uIHNob3VsZCBiZSBvZiB0eXBlIFwib2JqZWN0XCInKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvdXRwdXRTZXJpYWxpemF0aW9uIGlzIHJlcXVpcmVkJylcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsaWQgc2VsZWN0IGNvbmZpZ3VyYXRpb24gaXMgcmVxdWlyZWQnKVxuICAgIH1cblxuICAgIGNvbnN0IG1ldGhvZCA9ICdQT1NUJ1xuICAgIGNvbnN0IHF1ZXJ5ID0gYHNlbGVjdCZzZWxlY3QtdHlwZT0yYFxuXG4gICAgY29uc3QgY29uZmlnOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPltdID0gW1xuICAgICAge1xuICAgICAgICBFeHByZXNzaW9uOiBzZWxlY3RPcHRzLmV4cHJlc3Npb24sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBFeHByZXNzaW9uVHlwZTogc2VsZWN0T3B0cy5leHByZXNzaW9uVHlwZSB8fCAnU1FMJyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIElucHV0U2VyaWFsaXphdGlvbjogW3NlbGVjdE9wdHMuaW5wdXRTZXJpYWxpemF0aW9uXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIE91dHB1dFNlcmlhbGl6YXRpb246IFtzZWxlY3RPcHRzLm91dHB1dFNlcmlhbGl6YXRpb25dLFxuICAgICAgfSxcbiAgICBdXG5cbiAgICAvLyBPcHRpb25hbFxuICAgIGlmIChzZWxlY3RPcHRzLnJlcXVlc3RQcm9ncmVzcykge1xuICAgICAgY29uZmlnLnB1c2goeyBSZXF1ZXN0UHJvZ3Jlc3M6IHNlbGVjdE9wdHM/LnJlcXVlc3RQcm9ncmVzcyB9KVxuICAgIH1cbiAgICAvLyBPcHRpb25hbFxuICAgIGlmIChzZWxlY3RPcHRzLnNjYW5SYW5nZSkge1xuICAgICAgY29uZmlnLnB1c2goeyBTY2FuUmFuZ2U6IHNlbGVjdE9wdHMuc2NhblJhbmdlIH0pXG4gICAgfVxuXG4gICAgY29uc3QgYnVpbGRlciA9IG5ldyB4bWwyanMuQnVpbGRlcih7XG4gICAgICByb290TmFtZTogJ1NlbGVjdE9iamVjdENvbnRlbnRSZXF1ZXN0JyxcbiAgICAgIHJlbmRlck9wdHM6IHsgcHJldHR5OiBmYWxzZSB9LFxuICAgICAgaGVhZGxlc3M6IHRydWUsXG4gICAgfSlcbiAgICBjb25zdCBwYXlsb2FkID0gYnVpbGRlci5idWlsZE9iamVjdChjb25maWcpXG5cbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmMoeyBtZXRob2QsIGJ1Y2tldE5hbWUsIG9iamVjdE5hbWUsIHF1ZXJ5IH0sIHBheWxvYWQpXG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlYWRBc0J1ZmZlcihyZXMpXG4gICAgcmV0dXJuIHBhcnNlU2VsZWN0T2JqZWN0Q29udGVudFJlc3BvbnNlKGJvZHkpXG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGFwcGx5QnVja2V0TGlmZWN5Y2xlKGJ1Y2tldE5hbWU6IHN0cmluZywgcG9saWN5Q29uZmlnOiBMaWZlQ3ljbGVDb25maWdQYXJhbSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IG1ldGhvZCA9ICdQVVQnXG4gICAgY29uc3QgcXVlcnkgPSAnbGlmZWN5Y2xlJ1xuXG4gICAgY29uc3QgaGVhZGVyczogUmVxdWVzdEhlYWRlcnMgPSB7fVxuICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgeG1sMmpzLkJ1aWxkZXIoe1xuICAgICAgcm9vdE5hbWU6ICdMaWZlY3ljbGVDb25maWd1cmF0aW9uJyxcbiAgICAgIGhlYWRsZXNzOiB0cnVlLFxuICAgICAgcmVuZGVyT3B0czogeyBwcmV0dHk6IGZhbHNlIH0sXG4gICAgfSlcbiAgICBjb25zdCBwYXlsb2FkID0gYnVpbGRlci5idWlsZE9iamVjdChwb2xpY3lDb25maWcpXG4gICAgaGVhZGVyc1snQ29udGVudC1NRDUnXSA9IHRvTWQ1KHBheWxvYWQpXG5cbiAgICBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmNPbWl0KHsgbWV0aG9kLCBidWNrZXROYW1lLCBxdWVyeSwgaGVhZGVycyB9LCBwYXlsb2FkKVxuICB9XG5cbiAgYXN5bmMgcmVtb3ZlQnVja2V0TGlmZWN5Y2xlKGJ1Y2tldE5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICghaXNWYWxpZEJ1Y2tldE5hbWUoYnVja2V0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEJ1Y2tldE5hbWVFcnJvcignSW52YWxpZCBidWNrZXQgbmFtZTogJyArIGJ1Y2tldE5hbWUpXG4gICAgfVxuICAgIGNvbnN0IG1ldGhvZCA9ICdERUxFVEUnXG4gICAgY29uc3QgcXVlcnkgPSAnbGlmZWN5Y2xlJ1xuICAgIGF3YWl0IHRoaXMubWFrZVJlcXVlc3RBc3luY09taXQoeyBtZXRob2QsIGJ1Y2tldE5hbWUsIHF1ZXJ5IH0sICcnLCBbMjA0XSlcbiAgfVxuXG4gIGFzeW5jIHNldEJ1Y2tldExpZmVjeWNsZShidWNrZXROYW1lOiBzdHJpbmcsIGxpZmVDeWNsZUNvbmZpZzogTGlmZUN5Y2xlQ29uZmlnUGFyYW0pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoIWlzVmFsaWRCdWNrZXROYW1lKGJ1Y2tldE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRCdWNrZXROYW1lRXJyb3IoJ0ludmFsaWQgYnVja2V0IG5hbWU6ICcgKyBidWNrZXROYW1lKVxuICAgIH1cbiAgICBpZiAoXy5pc0VtcHR5KGxpZmVDeWNsZUNvbmZpZykpIHtcbiAgICAgIGF3YWl0IHRoaXMucmVtb3ZlQnVja2V0TGlmZWN5Y2xlKGJ1Y2tldE5hbWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IHRoaXMuYXBwbHlCdWNrZXRMaWZlY3ljbGUoYnVja2V0TmFtZSwgbGlmZUN5Y2xlQ29uZmlnKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldEJ1Y2tldExpZmVjeWNsZShidWNrZXROYW1lOiBzdHJpbmcpOiBQcm9taXNlPExpZmVjeWNsZUNvbmZpZyB8IG51bGw+IHtcbiAgICBpZiAoIWlzVmFsaWRCdWNrZXROYW1lKGJ1Y2tldE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRCdWNrZXROYW1lRXJyb3IoJ0ludmFsaWQgYnVja2V0IG5hbWU6ICcgKyBidWNrZXROYW1lKVxuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSAnR0VUJ1xuICAgIGNvbnN0IHF1ZXJ5ID0gJ2xpZmVjeWNsZSdcblxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3RBc3luYyh7IG1ldGhvZCwgYnVja2V0TmFtZSwgcXVlcnkgfSlcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVhZEFzU3RyaW5nKHJlcylcbiAgICByZXR1cm4geG1sUGFyc2Vycy5wYXJzZUxpZmVjeWNsZUNvbmZpZyhib2R5KVxuICB9XG5cbiAgYXN5bmMgc2V0QnVja2V0RW5jcnlwdGlvbihidWNrZXROYW1lOiBzdHJpbmcsIGVuY3J5cHRpb25Db25maWc/OiBFbmNyeXB0aW9uQ29uZmlnKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZShidWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKCdJbnZhbGlkIGJ1Y2tldCBuYW1lOiAnICsgYnVja2V0TmFtZSlcbiAgICB9XG4gICAgaWYgKCFfLmlzRW1wdHkoZW5jcnlwdGlvbkNvbmZpZykgJiYgZW5jcnlwdGlvbkNvbmZpZy5SdWxlLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0ludmFsaWQgUnVsZSBsZW5ndGguIE9ubHkgb25lIHJ1bGUgaXMgYWxsb3dlZC46ICcgKyBlbmNyeXB0aW9uQ29uZmlnLlJ1bGUpXG4gICAgfVxuXG4gICAgbGV0IGVuY3J5cHRpb25PYmogPSBlbmNyeXB0aW9uQ29uZmlnXG4gICAgaWYgKF8uaXNFbXB0eShlbmNyeXB0aW9uQ29uZmlnKSkge1xuICAgICAgZW5jcnlwdGlvbk9iaiA9IHtcbiAgICAgICAgLy8gRGVmYXVsdCBNaW5JTyBTZXJ2ZXIgU3VwcG9ydGVkIFJ1bGVcbiAgICAgICAgUnVsZTogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIEFwcGx5U2VydmVyU2lkZUVuY3J5cHRpb25CeURlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgU1NFQWxnb3JpdGhtOiAnQUVTMjU2JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBtZXRob2QgPSAnUFVUJ1xuICAgIGNvbnN0IHF1ZXJ5ID0gJ2VuY3J5cHRpb24nXG4gICAgY29uc3QgYnVpbGRlciA9IG5ldyB4bWwyanMuQnVpbGRlcih7XG4gICAgICByb290TmFtZTogJ1NlcnZlclNpZGVFbmNyeXB0aW9uQ29uZmlndXJhdGlvbicsXG4gICAgICByZW5kZXJPcHRzOiB7IHByZXR0eTogZmFsc2UgfSxcbiAgICAgIGhlYWRsZXNzOiB0cnVlLFxuICAgIH0pXG4gICAgY29uc3QgcGF5bG9hZCA9IGJ1aWxkZXIuYnVpbGRPYmplY3QoZW5jcnlwdGlvbk9iailcblxuICAgIGNvbnN0IGhlYWRlcnM6IFJlcXVlc3RIZWFkZXJzID0ge31cbiAgICBoZWFkZXJzWydDb250ZW50LU1ENSddID0gdG9NZDUocGF5bG9hZClcblxuICAgIGF3YWl0IHRoaXMubWFrZVJlcXVlc3RBc3luY09taXQoeyBtZXRob2QsIGJ1Y2tldE5hbWUsIHF1ZXJ5LCBoZWFkZXJzIH0sIHBheWxvYWQpXG4gIH1cblxuICBhc3luYyBnZXRCdWNrZXRFbmNyeXB0aW9uKGJ1Y2tldE5hbWU6IHN0cmluZykge1xuICAgIGlmICghaXNWYWxpZEJ1Y2tldE5hbWUoYnVja2V0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEJ1Y2tldE5hbWVFcnJvcignSW52YWxpZCBidWNrZXQgbmFtZTogJyArIGJ1Y2tldE5hbWUpXG4gICAgfVxuICAgIGNvbnN0IG1ldGhvZCA9ICdHRVQnXG4gICAgY29uc3QgcXVlcnkgPSAnZW5jcnlwdGlvbidcblxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3RBc3luYyh7IG1ldGhvZCwgYnVja2V0TmFtZSwgcXVlcnkgfSlcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVhZEFzU3RyaW5nKHJlcylcbiAgICByZXR1cm4geG1sUGFyc2Vycy5wYXJzZUJ1Y2tldEVuY3J5cHRpb25Db25maWcoYm9keSlcbiAgfVxuXG4gIGFzeW5jIHJlbW92ZUJ1Y2tldEVuY3J5cHRpb24oYnVja2V0TmFtZTogc3RyaW5nKSB7XG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZShidWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKCdJbnZhbGlkIGJ1Y2tldCBuYW1lOiAnICsgYnVja2V0TmFtZSlcbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gJ0RFTEVURSdcbiAgICBjb25zdCBxdWVyeSA9ICdlbmNyeXB0aW9uJ1xuXG4gICAgYXdhaXQgdGhpcy5tYWtlUmVxdWVzdEFzeW5jT21pdCh7IG1ldGhvZCwgYnVja2V0TmFtZSwgcXVlcnkgfSwgJycsIFsyMDRdKVxuICB9XG5cbiAgYXN5bmMgZ2V0T2JqZWN0UmV0ZW50aW9uKFxuICAgIGJ1Y2tldE5hbWU6IHN0cmluZyxcbiAgICBvYmplY3ROYW1lOiBzdHJpbmcsXG4gICAgZ2V0T3B0cz86IEdldE9iamVjdFJldGVudGlvbk9wdHMsXG4gICk6IFByb21pc2U8T2JqZWN0UmV0ZW50aW9uSW5mbyB8IG51bGwgfCB1bmRlZmluZWQ+IHtcbiAgICBpZiAoIWlzVmFsaWRCdWNrZXROYW1lKGJ1Y2tldE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRCdWNrZXROYW1lRXJyb3IoJ0ludmFsaWQgYnVja2V0IG5hbWU6ICcgKyBidWNrZXROYW1lKVxuICAgIH1cbiAgICBpZiAoIWlzVmFsaWRPYmplY3ROYW1lKG9iamVjdE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRPYmplY3ROYW1lRXJyb3IoYEludmFsaWQgb2JqZWN0IG5hbWU6ICR7b2JqZWN0TmFtZX1gKVxuICAgIH1cbiAgICBpZiAoZ2V0T3B0cyAmJiAhaXNPYmplY3QoZ2V0T3B0cykpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoJ2dldE9wdHMgc2hvdWxkIGJlIG9mIHR5cGUgXCJvYmplY3RcIicpXG4gICAgfSBlbHNlIGlmIChnZXRPcHRzPy52ZXJzaW9uSWQgJiYgIWlzU3RyaW5nKGdldE9wdHMudmVyc2lvbklkKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcigndmVyc2lvbklkIHNob3VsZCBiZSBvZiB0eXBlIFwic3RyaW5nXCInKVxuICAgIH1cblxuICAgIGNvbnN0IG1ldGhvZCA9ICdHRVQnXG4gICAgbGV0IHF1ZXJ5ID0gJ3JldGVudGlvbidcbiAgICBpZiAoZ2V0T3B0cz8udmVyc2lvbklkKSB7XG4gICAgICBxdWVyeSArPSBgJnZlcnNpb25JZD0ke2dldE9wdHMudmVyc2lvbklkfWBcbiAgICB9XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdEFzeW5jKHsgbWV0aG9kLCBidWNrZXROYW1lLCBvYmplY3ROYW1lLCBxdWVyeSB9KVxuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZWFkQXNTdHJpbmcocmVzKVxuICAgIHJldHVybiB4bWxQYXJzZXJzLnBhcnNlT2JqZWN0UmV0ZW50aW9uQ29uZmlnKGJvZHkpXG4gIH1cblxuICBhc3luYyByZW1vdmVPYmplY3RzKGJ1Y2tldE5hbWU6IHN0cmluZywgb2JqZWN0c0xpc3Q6IFJlbW92ZU9iamVjdHNQYXJhbSk6IFByb21pc2U8UmVtb3ZlT2JqZWN0c1Jlc3BvbnNlW10+IHtcbiAgICBpZiAoIWlzVmFsaWRCdWNrZXROYW1lKGJ1Y2tldE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRCdWNrZXROYW1lRXJyb3IoJ0ludmFsaWQgYnVja2V0IG5hbWU6ICcgKyBidWNrZXROYW1lKVxuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkob2JqZWN0c0xpc3QpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKCdvYmplY3RzTGlzdCBzaG91bGQgYmUgYSBsaXN0JylcbiAgICB9XG5cbiAgICBjb25zdCBydW5EZWxldGVPYmplY3RzID0gYXN5bmMgKGJhdGNoOiBSZW1vdmVPYmplY3RzUGFyYW0pOiBQcm9taXNlPFJlbW92ZU9iamVjdHNSZXNwb25zZVtdPiA9PiB7XG4gICAgICBjb25zdCBkZWxPYmplY3RzOiBSZW1vdmVPYmplY3RzUmVxdWVzdEVudHJ5W10gPSBiYXRjaC5tYXAoKHZhbHVlKSA9PiB7XG4gICAgICAgIHJldHVybiBpc09iamVjdCh2YWx1ZSkgPyB7IEtleTogdmFsdWUubmFtZSwgVmVyc2lvbklkOiB2YWx1ZS52ZXJzaW9uSWQgfSA6IHsgS2V5OiB2YWx1ZSB9XG4gICAgICB9KVxuXG4gICAgICBjb25zdCByZW1PYmplY3RzID0geyBEZWxldGU6IHsgUXVpZXQ6IHRydWUsIE9iamVjdDogZGVsT2JqZWN0cyB9IH1cbiAgICAgIGNvbnN0IHBheWxvYWQgPSBCdWZmZXIuZnJvbShuZXcgeG1sMmpzLkJ1aWxkZXIoeyBoZWFkbGVzczogdHJ1ZSB9KS5idWlsZE9iamVjdChyZW1PYmplY3RzKSlcbiAgICAgIGNvbnN0IGhlYWRlcnM6IFJlcXVlc3RIZWFkZXJzID0geyAnQ29udGVudC1NRDUnOiB0b01kNShwYXlsb2FkKSB9XG5cbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3RBc3luYyh7IG1ldGhvZDogJ1BPU1QnLCBidWNrZXROYW1lLCBxdWVyeTogJ2RlbGV0ZScsIGhlYWRlcnMgfSwgcGF5bG9hZClcbiAgICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZWFkQXNTdHJpbmcocmVzKVxuICAgICAgcmV0dXJuIHhtbFBhcnNlcnMucmVtb3ZlT2JqZWN0c1BhcnNlcihib2R5KVxuICAgIH1cblxuICAgIGNvbnN0IG1heEVudHJpZXMgPSAxMDAwIC8vIG1heCBlbnRyaWVzIGFjY2VwdGVkIGluIHNlcnZlciBmb3IgRGVsZXRlTXVsdGlwbGVPYmplY3RzIEFQSS5cbiAgICAvLyBDbGllbnQgc2lkZSBiYXRjaGluZ1xuICAgIGNvbnN0IGJhdGNoZXMgPSBbXVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqZWN0c0xpc3QubGVuZ3RoOyBpICs9IG1heEVudHJpZXMpIHtcbiAgICAgIGJhdGNoZXMucHVzaChvYmplY3RzTGlzdC5zbGljZShpLCBpICsgbWF4RW50cmllcykpXG4gICAgfVxuXG4gICAgY29uc3QgYmF0Y2hSZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoYmF0Y2hlcy5tYXAocnVuRGVsZXRlT2JqZWN0cykpXG4gICAgcmV0dXJuIGJhdGNoUmVzdWx0cy5mbGF0KClcbiAgfVxuXG4gIGFzeW5jIHJlbW92ZUluY29tcGxldGVVcGxvYWQoYnVja2V0TmFtZTogc3RyaW5nLCBvYmplY3ROYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoIWlzVmFsaWRCdWNrZXROYW1lKGJ1Y2tldE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLklzVmFsaWRCdWNrZXROYW1lRXJyb3IoJ0ludmFsaWQgYnVja2V0IG5hbWU6ICcgKyBidWNrZXROYW1lKVxuICAgIH1cbiAgICBpZiAoIWlzVmFsaWRPYmplY3ROYW1lKG9iamVjdE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRPYmplY3ROYW1lRXJyb3IoYEludmFsaWQgb2JqZWN0IG5hbWU6ICR7b2JqZWN0TmFtZX1gKVxuICAgIH1cbiAgICBjb25zdCByZW1vdmVVcGxvYWRJZCA9IGF3YWl0IHRoaXMuZmluZFVwbG9hZElkKGJ1Y2tldE5hbWUsIG9iamVjdE5hbWUpXG4gICAgY29uc3QgbWV0aG9kID0gJ0RFTEVURSdcbiAgICBjb25zdCBxdWVyeSA9IGB1cGxvYWRJZD0ke3JlbW92ZVVwbG9hZElkfWBcbiAgICBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmNPbWl0KHsgbWV0aG9kLCBidWNrZXROYW1lLCBvYmplY3ROYW1lLCBxdWVyeSB9LCAnJywgWzIwNF0pXG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGNvcHlPYmplY3RWMShcbiAgICB0YXJnZXRCdWNrZXROYW1lOiBzdHJpbmcsXG4gICAgdGFyZ2V0T2JqZWN0TmFtZTogc3RyaW5nLFxuICAgIHNvdXJjZUJ1Y2tldE5hbWVBbmRPYmplY3ROYW1lOiBzdHJpbmcsXG4gICAgY29uZGl0aW9ucz86IG51bGwgfCBDb3B5Q29uZGl0aW9ucyxcbiAgKSB7XG4gICAgaWYgKHR5cGVvZiBjb25kaXRpb25zID09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbmRpdGlvbnMgPSBudWxsXG4gICAgfVxuXG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZSh0YXJnZXRCdWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKCdJbnZhbGlkIGJ1Y2tldCBuYW1lOiAnICsgdGFyZ2V0QnVja2V0TmFtZSlcbiAgICB9XG4gICAgaWYgKCFpc1ZhbGlkT2JqZWN0TmFtZSh0YXJnZXRPYmplY3ROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkT2JqZWN0TmFtZUVycm9yKGBJbnZhbGlkIG9iamVjdCBuYW1lOiAke3RhcmdldE9iamVjdE5hbWV9YClcbiAgICB9XG4gICAgaWYgKCFpc1N0cmluZyhzb3VyY2VCdWNrZXROYW1lQW5kT2JqZWN0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NvdXJjZUJ1Y2tldE5hbWVBbmRPYmplY3ROYW1lIHNob3VsZCBiZSBvZiB0eXBlIFwic3RyaW5nXCInKVxuICAgIH1cbiAgICBpZiAoc291cmNlQnVja2V0TmFtZUFuZE9iamVjdE5hbWUgPT09ICcnKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRQcmVmaXhFcnJvcihgRW1wdHkgc291cmNlIHByZWZpeGApXG4gICAgfVxuXG4gICAgaWYgKGNvbmRpdGlvbnMgIT0gbnVsbCAmJiAhKGNvbmRpdGlvbnMgaW5zdGFuY2VvZiBDb3B5Q29uZGl0aW9ucykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NvbmRpdGlvbnMgc2hvdWxkIGJlIG9mIHR5cGUgXCJDb3B5Q29uZGl0aW9uc1wiJylcbiAgICB9XG5cbiAgICBjb25zdCBoZWFkZXJzOiBSZXF1ZXN0SGVhZGVycyA9IHt9XG4gICAgaGVhZGVyc1sneC1hbXotY29weS1zb3VyY2UnXSA9IHVyaVJlc291cmNlRXNjYXBlKHNvdXJjZUJ1Y2tldE5hbWVBbmRPYmplY3ROYW1lKVxuXG4gICAgaWYgKGNvbmRpdGlvbnMpIHtcbiAgICAgIGlmIChjb25kaXRpb25zLm1vZGlmaWVkICE9PSAnJykge1xuICAgICAgICBoZWFkZXJzWyd4LWFtei1jb3B5LXNvdXJjZS1pZi1tb2RpZmllZC1zaW5jZSddID0gY29uZGl0aW9ucy5tb2RpZmllZFxuICAgICAgfVxuICAgICAgaWYgKGNvbmRpdGlvbnMudW5tb2RpZmllZCAhPT0gJycpIHtcbiAgICAgICAgaGVhZGVyc1sneC1hbXotY29weS1zb3VyY2UtaWYtdW5tb2RpZmllZC1zaW5jZSddID0gY29uZGl0aW9ucy51bm1vZGlmaWVkXG4gICAgICB9XG4gICAgICBpZiAoY29uZGl0aW9ucy5tYXRjaEVUYWcgIT09ICcnKSB7XG4gICAgICAgIGhlYWRlcnNbJ3gtYW16LWNvcHktc291cmNlLWlmLW1hdGNoJ10gPSBjb25kaXRpb25zLm1hdGNoRVRhZ1xuICAgICAgfVxuICAgICAgaWYgKGNvbmRpdGlvbnMubWF0Y2hFVGFnRXhjZXB0ICE9PSAnJykge1xuICAgICAgICBoZWFkZXJzWyd4LWFtei1jb3B5LXNvdXJjZS1pZi1ub25lLW1hdGNoJ10gPSBjb25kaXRpb25zLm1hdGNoRVRhZ0V4Y2VwdFxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IG1ldGhvZCA9ICdQVVQnXG5cbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmMoe1xuICAgICAgbWV0aG9kLFxuICAgICAgYnVja2V0TmFtZTogdGFyZ2V0QnVja2V0TmFtZSxcbiAgICAgIG9iamVjdE5hbWU6IHRhcmdldE9iamVjdE5hbWUsXG4gICAgICBoZWFkZXJzLFxuICAgIH0pXG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlYWRBc1N0cmluZyhyZXMpXG4gICAgcmV0dXJuIHhtbFBhcnNlcnMucGFyc2VDb3B5T2JqZWN0KGJvZHkpXG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGNvcHlPYmplY3RWMihcbiAgICBzb3VyY2VDb25maWc6IENvcHlTb3VyY2VPcHRpb25zLFxuICAgIGRlc3RDb25maWc6IENvcHlEZXN0aW5hdGlvbk9wdGlvbnMsXG4gICk6IFByb21pc2U8Q29weU9iamVjdFJlc3VsdFYyPiB7XG4gICAgaWYgKCEoc291cmNlQ29uZmlnIGluc3RhbmNlb2YgQ29weVNvdXJjZU9wdGlvbnMpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKCdzb3VyY2VDb25maWcgc2hvdWxkIG9mIHR5cGUgQ29weVNvdXJjZU9wdGlvbnMgJylcbiAgICB9XG4gICAgaWYgKCEoZGVzdENvbmZpZyBpbnN0YW5jZW9mIENvcHlEZXN0aW5hdGlvbk9wdGlvbnMpKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKCdkZXN0Q29uZmlnIHNob3VsZCBvZiB0eXBlIENvcHlEZXN0aW5hdGlvbk9wdGlvbnMgJylcbiAgICB9XG4gICAgaWYgKCFkZXN0Q29uZmlnLnZhbGlkYXRlKCkpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgpXG4gICAgfVxuICAgIGlmICghZGVzdENvbmZpZy52YWxpZGF0ZSgpKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoKVxuICAgIH1cblxuICAgIGNvbnN0IGhlYWRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCBzb3VyY2VDb25maWcuZ2V0SGVhZGVycygpLCBkZXN0Q29uZmlnLmdldEhlYWRlcnMoKSlcblxuICAgIGNvbnN0IGJ1Y2tldE5hbWUgPSBkZXN0Q29uZmlnLkJ1Y2tldFxuICAgIGNvbnN0IG9iamVjdE5hbWUgPSBkZXN0Q29uZmlnLk9iamVjdFxuXG4gICAgY29uc3QgbWV0aG9kID0gJ1BVVCdcblxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3RBc3luYyh7IG1ldGhvZCwgYnVja2V0TmFtZSwgb2JqZWN0TmFtZSwgaGVhZGVycyB9KVxuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZWFkQXNTdHJpbmcocmVzKVxuICAgIGNvbnN0IGNvcHlSZXMgPSB4bWxQYXJzZXJzLnBhcnNlQ29weU9iamVjdChib2R5KVxuICAgIGNvbnN0IHJlc0hlYWRlcnM6IEluY29taW5nSHR0cEhlYWRlcnMgPSByZXMuaGVhZGVyc1xuXG4gICAgY29uc3Qgc2l6ZUhlYWRlclZhbHVlID0gcmVzSGVhZGVycyAmJiByZXNIZWFkZXJzWydjb250ZW50LWxlbmd0aCddXG4gICAgY29uc3Qgc2l6ZSA9IHR5cGVvZiBzaXplSGVhZGVyVmFsdWUgPT09ICdudW1iZXInID8gc2l6ZUhlYWRlclZhbHVlIDogdW5kZWZpbmVkXG5cbiAgICByZXR1cm4ge1xuICAgICAgQnVja2V0OiBkZXN0Q29uZmlnLkJ1Y2tldCxcbiAgICAgIEtleTogZGVzdENvbmZpZy5PYmplY3QsXG4gICAgICBMYXN0TW9kaWZpZWQ6IGNvcHlSZXMubGFzdE1vZGlmaWVkLFxuICAgICAgTWV0YURhdGE6IGV4dHJhY3RNZXRhZGF0YShyZXNIZWFkZXJzIGFzIFJlc3BvbnNlSGVhZGVyKSxcbiAgICAgIFZlcnNpb25JZDogZ2V0VmVyc2lvbklkKHJlc0hlYWRlcnMgYXMgUmVzcG9uc2VIZWFkZXIpLFxuICAgICAgU291cmNlVmVyc2lvbklkOiBnZXRTb3VyY2VWZXJzaW9uSWQocmVzSGVhZGVycyBhcyBSZXNwb25zZUhlYWRlciksXG4gICAgICBFdGFnOiBzYW5pdGl6ZUVUYWcocmVzSGVhZGVycy5ldGFnKSxcbiAgICAgIFNpemU6IHNpemUsXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY29weU9iamVjdChzb3VyY2U6IENvcHlTb3VyY2VPcHRpb25zLCBkZXN0OiBDb3B5RGVzdGluYXRpb25PcHRpb25zKTogUHJvbWlzZTxDb3B5T2JqZWN0UmVzdWx0PlxuICBhc3luYyBjb3B5T2JqZWN0KFxuICAgIHRhcmdldEJ1Y2tldE5hbWU6IHN0cmluZyxcbiAgICB0YXJnZXRPYmplY3ROYW1lOiBzdHJpbmcsXG4gICAgc291cmNlQnVja2V0TmFtZUFuZE9iamVjdE5hbWU6IHN0cmluZyxcbiAgICBjb25kaXRpb25zPzogQ29weUNvbmRpdGlvbnMsXG4gICk6IFByb21pc2U8Q29weU9iamVjdFJlc3VsdD5cbiAgYXN5bmMgY29weU9iamVjdCguLi5hbGxBcmdzOiBDb3B5T2JqZWN0UGFyYW1zKTogUHJvbWlzZTxDb3B5T2JqZWN0UmVzdWx0PiB7XG4gICAgaWYgKHR5cGVvZiBhbGxBcmdzWzBdID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgW3RhcmdldEJ1Y2tldE5hbWUsIHRhcmdldE9iamVjdE5hbWUsIHNvdXJjZUJ1Y2tldE5hbWVBbmRPYmplY3ROYW1lLCBjb25kaXRpb25zXSA9IGFsbEFyZ3MgYXMgW1xuICAgICAgICBzdHJpbmcsXG4gICAgICAgIHN0cmluZyxcbiAgICAgICAgc3RyaW5nLFxuICAgICAgICBDb3B5Q29uZGl0aW9ucz8sXG4gICAgICBdXG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb3B5T2JqZWN0VjEodGFyZ2V0QnVja2V0TmFtZSwgdGFyZ2V0T2JqZWN0TmFtZSwgc291cmNlQnVja2V0TmFtZUFuZE9iamVjdE5hbWUsIGNvbmRpdGlvbnMpXG4gICAgfVxuICAgIGNvbnN0IFtzb3VyY2UsIGRlc3RdID0gYWxsQXJncyBhcyBbQ29weVNvdXJjZU9wdGlvbnMsIENvcHlEZXN0aW5hdGlvbk9wdGlvbnNdXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY29weU9iamVjdFYyKHNvdXJjZSwgZGVzdClcbiAgfVxuXG4gIGFzeW5jIHVwbG9hZFBhcnQoXG4gICAgcGFydENvbmZpZzoge1xuICAgICAgYnVja2V0TmFtZTogc3RyaW5nXG4gICAgICBvYmplY3ROYW1lOiBzdHJpbmdcbiAgICAgIHVwbG9hZElEOiBzdHJpbmdcbiAgICAgIHBhcnROdW1iZXI6IG51bWJlclxuICAgICAgaGVhZGVyczogUmVxdWVzdEhlYWRlcnNcbiAgICB9LFxuICAgIHBheWxvYWQ/OiBCaW5hcnksXG4gICkge1xuICAgIGNvbnN0IHsgYnVja2V0TmFtZSwgb2JqZWN0TmFtZSwgdXBsb2FkSUQsIHBhcnROdW1iZXIsIGhlYWRlcnMgfSA9IHBhcnRDb25maWdcblxuICAgIGNvbnN0IG1ldGhvZCA9ICdQVVQnXG4gICAgY29uc3QgcXVlcnkgPSBgdXBsb2FkSWQ9JHt1cGxvYWRJRH0mcGFydE51bWJlcj0ke3BhcnROdW1iZXJ9YFxuICAgIGNvbnN0IHJlcXVlc3RPcHRpb25zID0geyBtZXRob2QsIGJ1Y2tldE5hbWUsIG9iamVjdE5hbWU6IG9iamVjdE5hbWUsIHF1ZXJ5LCBoZWFkZXJzIH1cbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0QXN5bmMocmVxdWVzdE9wdGlvbnMsIHBheWxvYWQpXG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlYWRBc1N0cmluZyhyZXMpXG4gICAgY29uc3QgcGFydFJlcyA9IHVwbG9hZFBhcnRQYXJzZXIoYm9keSlcbiAgICByZXR1cm4ge1xuICAgICAgZXRhZzogc2FuaXRpemVFVGFnKHBhcnRSZXMuRVRhZyksXG4gICAgICBrZXk6IG9iamVjdE5hbWUsXG4gICAgICBwYXJ0OiBwYXJ0TnVtYmVyLFxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNvbXBvc2VPYmplY3QoXG4gICAgZGVzdE9iakNvbmZpZzogQ29weURlc3RpbmF0aW9uT3B0aW9ucyxcbiAgICBzb3VyY2VPYmpMaXN0OiBDb3B5U291cmNlT3B0aW9uc1tdLFxuICApOiBQcm9taXNlPGJvb2xlYW4gfCB7IGV0YWc6IHN0cmluZzsgdmVyc2lvbklkOiBzdHJpbmcgfCBudWxsIH0gfCBQcm9taXNlPHZvaWQ+IHwgQ29weU9iamVjdFJlc3VsdD4ge1xuICAgIGNvbnN0IHNvdXJjZUZpbGVzTGVuZ3RoID0gc291cmNlT2JqTGlzdC5sZW5ndGhcblxuICAgIGlmICghQXJyYXkuaXNBcnJheShzb3VyY2VPYmpMaXN0KSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcignc291cmNlQ29uZmlnIHNob3VsZCBhbiBhcnJheSBvZiBDb3B5U291cmNlT3B0aW9ucyAnKVxuICAgIH1cbiAgICBpZiAoIShkZXN0T2JqQ29uZmlnIGluc3RhbmNlb2YgQ29weURlc3RpbmF0aW9uT3B0aW9ucykpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoJ2Rlc3RDb25maWcgc2hvdWxkIG9mIHR5cGUgQ29weURlc3RpbmF0aW9uT3B0aW9ucyAnKVxuICAgIH1cblxuICAgIGlmIChzb3VyY2VGaWxlc0xlbmd0aCA8IDEgfHwgc291cmNlRmlsZXNMZW5ndGggPiBQQVJUX0NPTlNUUkFJTlRTLk1BWF9QQVJUU19DT1VOVCkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgYFwiVGhlcmUgbXVzdCBiZSBhcyBsZWFzdCBvbmUgYW5kIHVwIHRvICR7UEFSVF9DT05TVFJBSU5UUy5NQVhfUEFSVFNfQ09VTlR9IHNvdXJjZSBvYmplY3RzLmAsXG4gICAgICApXG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VGaWxlc0xlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzT2JqID0gc291cmNlT2JqTGlzdFtpXSBhcyBDb3B5U291cmNlT3B0aW9uc1xuICAgICAgaWYgKCFzT2JqLnZhbGlkYXRlKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCEoZGVzdE9iakNvbmZpZyBhcyBDb3B5RGVzdGluYXRpb25PcHRpb25zKS52YWxpZGF0ZSgpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBjb25zdCBnZXRTdGF0T3B0aW9ucyA9IChzcmNDb25maWc6IENvcHlTb3VyY2VPcHRpb25zKSA9PiB7XG4gICAgICBsZXQgc3RhdE9wdHMgPSB7fVxuICAgICAgaWYgKCFfLmlzRW1wdHkoc3JjQ29uZmlnLlZlcnNpb25JRCkpIHtcbiAgICAgICAgc3RhdE9wdHMgPSB7XG4gICAgICAgICAgdmVyc2lvbklkOiBzcmNDb25maWcuVmVyc2lvbklELFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhdE9wdHNcbiAgICB9XG4gICAgY29uc3Qgc3JjT2JqZWN0U2l6ZXM6IG51bWJlcltdID0gW11cbiAgICBsZXQgdG90YWxTaXplID0gMFxuICAgIGxldCB0b3RhbFBhcnRzID0gMFxuXG4gICAgY29uc3Qgc291cmNlT2JqU3RhdHMgPSBzb3VyY2VPYmpMaXN0Lm1hcCgoc3JjSXRlbSkgPT5cbiAgICAgIHRoaXMuc3RhdE9iamVjdChzcmNJdGVtLkJ1Y2tldCwgc3JjSXRlbS5PYmplY3QsIGdldFN0YXRPcHRpb25zKHNyY0l0ZW0pKSxcbiAgICApXG5cbiAgICBjb25zdCBzcmNPYmplY3RJbmZvcyA9IGF3YWl0IFByb21pc2UuYWxsKHNvdXJjZU9ialN0YXRzKVxuXG4gICAgY29uc3QgdmFsaWRhdGVkU3RhdHMgPSBzcmNPYmplY3RJbmZvcy5tYXAoKHJlc0l0ZW1TdGF0LCBpbmRleCkgPT4ge1xuICAgICAgY29uc3Qgc3JjQ29uZmlnOiBDb3B5U291cmNlT3B0aW9ucyB8IHVuZGVmaW5lZCA9IHNvdXJjZU9iakxpc3RbaW5kZXhdXG5cbiAgICAgIGxldCBzcmNDb3B5U2l6ZSA9IHJlc0l0ZW1TdGF0LnNpemVcbiAgICAgIC8vIENoZWNrIGlmIGEgc2VnbWVudCBpcyBzcGVjaWZpZWQsIGFuZCBpZiBzbywgaXMgdGhlXG4gICAgICAvLyBzZWdtZW50IHdpdGhpbiBvYmplY3QgYm91bmRzP1xuICAgICAgaWYgKHNyY0NvbmZpZyAmJiBzcmNDb25maWcuTWF0Y2hSYW5nZSkge1xuICAgICAgICAvLyBTaW5jZSByYW5nZSBpcyBzcGVjaWZpZWQsXG4gICAgICAgIC8vICAgIDAgPD0gc3JjLnNyY1N0YXJ0IDw9IHNyYy5zcmNFbmRcbiAgICAgICAgLy8gc28gb25seSBpbnZhbGlkIGNhc2UgdG8gY2hlY2sgaXM6XG4gICAgICAgIGNvbnN0IHNyY1N0YXJ0ID0gc3JjQ29uZmlnLlN0YXJ0XG4gICAgICAgIGNvbnN0IHNyY0VuZCA9IHNyY0NvbmZpZy5FbmRcbiAgICAgICAgaWYgKHNyY0VuZCA+PSBzcmNDb3B5U2l6ZSB8fCBzcmNTdGFydCA8IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgYENvcHlTcmNPcHRpb25zICR7aW5kZXh9IGhhcyBpbnZhbGlkIHNlZ21lbnQtdG8tY29weSBbJHtzcmNTdGFydH0sICR7c3JjRW5kfV0gKHNpemUgaXMgJHtzcmNDb3B5U2l6ZX0pYCxcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgc3JjQ29weVNpemUgPSBzcmNFbmQgLSBzcmNTdGFydCArIDFcbiAgICAgIH1cblxuICAgICAgLy8gT25seSB0aGUgbGFzdCBzb3VyY2UgbWF5IGJlIGxlc3MgdGhhbiBgYWJzTWluUGFydFNpemVgXG4gICAgICBpZiAoc3JjQ29weVNpemUgPCBQQVJUX0NPTlNUUkFJTlRTLkFCU19NSU5fUEFSVF9TSVpFICYmIGluZGV4IDwgc291cmNlRmlsZXNMZW5ndGggLSAxKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgYENvcHlTcmNPcHRpb25zICR7aW5kZXh9IGlzIHRvbyBzbWFsbCAoJHtzcmNDb3B5U2l6ZX0pIGFuZCBpdCBpcyBub3QgdGhlIGxhc3QgcGFydC5gLFxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIC8vIElzIGRhdGEgdG8gY29weSB0b28gbGFyZ2U/XG4gICAgICB0b3RhbFNpemUgKz0gc3JjQ29weVNpemVcbiAgICAgIGlmICh0b3RhbFNpemUgPiBQQVJUX0NPTlNUUkFJTlRTLk1BWF9NVUxUSVBBUlRfUFVUX09CSkVDVF9TSVpFKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoYENhbm5vdCBjb21wb3NlIGFuIG9iamVjdCBvZiBzaXplICR7dG90YWxTaXplfSAoPiA1VGlCKWApXG4gICAgICB9XG5cbiAgICAgIC8vIHJlY29yZCBzb3VyY2Ugc2l6ZVxuICAgICAgc3JjT2JqZWN0U2l6ZXNbaW5kZXhdID0gc3JjQ29weVNpemVcblxuICAgICAgLy8gY2FsY3VsYXRlIHBhcnRzIG5lZWRlZCBmb3IgY3VycmVudCBzb3VyY2VcbiAgICAgIHRvdGFsUGFydHMgKz0gcGFydHNSZXF1aXJlZChzcmNDb3B5U2l6ZSlcbiAgICAgIC8vIERvIHdlIG5lZWQgbW9yZSBwYXJ0cyB0aGFuIHdlIGFyZSBhbGxvd2VkP1xuICAgICAgaWYgKHRvdGFsUGFydHMgPiBQQVJUX0NPTlNUUkFJTlRTLk1BWF9QQVJUU19DT1VOVCkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgIGBZb3VyIHByb3Bvc2VkIGNvbXBvc2Ugb2JqZWN0IHJlcXVpcmVzIG1vcmUgdGhhbiAke1BBUlRfQ09OU1RSQUlOVFMuTUFYX1BBUlRTX0NPVU5UfSBwYXJ0c2AsXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc0l0ZW1TdGF0XG4gICAgfSlcblxuICAgIGlmICgodG90YWxQYXJ0cyA9PT0gMSAmJiB0b3RhbFNpemUgPD0gUEFSVF9DT05TVFJBSU5UUy5NQVhfUEFSVF9TSVpFKSB8fCB0b3RhbFNpemUgPT09IDApIHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvcHlPYmplY3Qoc291cmNlT2JqTGlzdFswXSBhcyBDb3B5U291cmNlT3B0aW9ucywgZGVzdE9iakNvbmZpZykgLy8gdXNlIGNvcHlPYmplY3RWMlxuICAgIH1cblxuICAgIC8vIHByZXNlcnZlIGV0YWcgdG8gYXZvaWQgbW9kaWZpY2F0aW9uIG9mIG9iamVjdCB3aGlsZSBjb3B5aW5nLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlRmlsZXNMZW5ndGg7IGkrKykge1xuICAgICAgOyhzb3VyY2VPYmpMaXN0W2ldIGFzIENvcHlTb3VyY2VPcHRpb25zKS5NYXRjaEVUYWcgPSAodmFsaWRhdGVkU3RhdHNbaV0gYXMgQnVja2V0SXRlbVN0YXQpLmV0YWdcbiAgICB9XG5cbiAgICBjb25zdCBzcGxpdFBhcnRTaXplTGlzdCA9IHZhbGlkYXRlZFN0YXRzLm1hcCgocmVzSXRlbVN0YXQsIGlkeCkgPT4ge1xuICAgICAgcmV0dXJuIGNhbGN1bGF0ZUV2ZW5TcGxpdHMoc3JjT2JqZWN0U2l6ZXNbaWR4XSBhcyBudW1iZXIsIHNvdXJjZU9iakxpc3RbaWR4XSBhcyBDb3B5U291cmNlT3B0aW9ucylcbiAgICB9KVxuXG4gICAgY29uc3QgZ2V0VXBsb2FkUGFydENvbmZpZ0xpc3QgPSAodXBsb2FkSWQ6IHN0cmluZykgPT4ge1xuICAgICAgY29uc3QgdXBsb2FkUGFydENvbmZpZ0xpc3Q6IFVwbG9hZFBhcnRDb25maWdbXSA9IFtdXG5cbiAgICAgIHNwbGl0UGFydFNpemVMaXN0LmZvckVhY2goKHNwbGl0U2l6ZSwgc3BsaXRJbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGlmIChzcGxpdFNpemUpIHtcbiAgICAgICAgICBjb25zdCB7IHN0YXJ0SW5kZXg6IHN0YXJ0SWR4LCBlbmRJbmRleDogZW5kSWR4LCBvYmpJbmZvOiBvYmpDb25maWcgfSA9IHNwbGl0U2l6ZVxuXG4gICAgICAgICAgY29uc3QgcGFydEluZGV4ID0gc3BsaXRJbmRleCArIDEgLy8gcGFydCBpbmRleCBzdGFydHMgZnJvbSAxLlxuICAgICAgICAgIGNvbnN0IHRvdGFsVXBsb2FkcyA9IEFycmF5LmZyb20oc3RhcnRJZHgpXG5cbiAgICAgICAgICBjb25zdCBoZWFkZXJzID0gKHNvdXJjZU9iakxpc3Rbc3BsaXRJbmRleF0gYXMgQ29weVNvdXJjZU9wdGlvbnMpLmdldEhlYWRlcnMoKVxuXG4gICAgICAgICAgdG90YWxVcGxvYWRzLmZvckVhY2goKHNwbGl0U3RhcnQsIHVwbGRDdHJJZHgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNwbGl0RW5kID0gZW5kSWR4W3VwbGRDdHJJZHhdXG5cbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZU9iaiA9IGAke29iakNvbmZpZy5CdWNrZXR9LyR7b2JqQ29uZmlnLk9iamVjdH1gXG4gICAgICAgICAgICBoZWFkZXJzWyd4LWFtei1jb3B5LXNvdXJjZSddID0gYCR7c291cmNlT2JqfWBcbiAgICAgICAgICAgIGhlYWRlcnNbJ3gtYW16LWNvcHktc291cmNlLXJhbmdlJ10gPSBgYnl0ZXM9JHtzcGxpdFN0YXJ0fS0ke3NwbGl0RW5kfWBcblxuICAgICAgICAgICAgY29uc3QgdXBsb2FkUGFydENvbmZpZyA9IHtcbiAgICAgICAgICAgICAgYnVja2V0TmFtZTogZGVzdE9iakNvbmZpZy5CdWNrZXQsXG4gICAgICAgICAgICAgIG9iamVjdE5hbWU6IGRlc3RPYmpDb25maWcuT2JqZWN0LFxuICAgICAgICAgICAgICB1cGxvYWRJRDogdXBsb2FkSWQsXG4gICAgICAgICAgICAgIHBhcnROdW1iZXI6IHBhcnRJbmRleCxcbiAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgc291cmNlT2JqOiBzb3VyY2VPYmosXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHVwbG9hZFBhcnRDb25maWdMaXN0LnB1c2godXBsb2FkUGFydENvbmZpZylcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICByZXR1cm4gdXBsb2FkUGFydENvbmZpZ0xpc3RcbiAgICB9XG5cbiAgICBjb25zdCB1cGxvYWRBbGxQYXJ0cyA9IGFzeW5jICh1cGxvYWRMaXN0OiBVcGxvYWRQYXJ0Q29uZmlnW10pID0+IHtcbiAgICAgIGNvbnN0IHBhcnRVcGxvYWRzID0gdXBsb2FkTGlzdC5tYXAoYXN5bmMgKGl0ZW0pID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXBsb2FkUGFydChpdGVtKVxuICAgICAgfSlcbiAgICAgIC8vIFByb2Nlc3MgcmVzdWx0cyBoZXJlIGlmIG5lZWRlZFxuICAgICAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsKHBhcnRVcGxvYWRzKVxuICAgIH1cblxuICAgIGNvbnN0IHBlcmZvcm1VcGxvYWRQYXJ0cyA9IGFzeW5jICh1cGxvYWRJZDogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCB1cGxvYWRMaXN0ID0gZ2V0VXBsb2FkUGFydENvbmZpZ0xpc3QodXBsb2FkSWQpXG4gICAgICBjb25zdCBwYXJ0c1JlcyA9IGF3YWl0IHVwbG9hZEFsbFBhcnRzKHVwbG9hZExpc3QpXG4gICAgICByZXR1cm4gcGFydHNSZXMubWFwKChwYXJ0Q29weSkgPT4gKHsgZXRhZzogcGFydENvcHkuZXRhZywgcGFydDogcGFydENvcHkucGFydCB9KSlcbiAgICB9XG5cbiAgICBjb25zdCBuZXdVcGxvYWRIZWFkZXJzID0gZGVzdE9iakNvbmZpZy5nZXRIZWFkZXJzKClcblxuICAgIGNvbnN0IHVwbG9hZElkID0gYXdhaXQgdGhpcy5pbml0aWF0ZU5ld011bHRpcGFydFVwbG9hZChkZXN0T2JqQ29uZmlnLkJ1Y2tldCwgZGVzdE9iakNvbmZpZy5PYmplY3QsIG5ld1VwbG9hZEhlYWRlcnMpXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHBhcnRzRG9uZSA9IGF3YWl0IHBlcmZvcm1VcGxvYWRQYXJ0cyh1cGxvYWRJZClcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbXBsZXRlTXVsdGlwYXJ0VXBsb2FkKGRlc3RPYmpDb25maWcuQnVja2V0LCBkZXN0T2JqQ29uZmlnLk9iamVjdCwgdXBsb2FkSWQsIHBhcnRzRG9uZSlcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmFib3J0TXVsdGlwYXJ0VXBsb2FkKGRlc3RPYmpDb25maWcuQnVja2V0LCBkZXN0T2JqQ29uZmlnLk9iamVjdCwgdXBsb2FkSWQpXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcHJlc2lnbmVkVXJsKFxuICAgIG1ldGhvZDogc3RyaW5nLFxuICAgIGJ1Y2tldE5hbWU6IHN0cmluZyxcbiAgICBvYmplY3ROYW1lOiBzdHJpbmcsXG4gICAgZXhwaXJlcz86IG51bWJlciB8IFByZVNpZ25SZXF1ZXN0UGFyYW1zIHwgdW5kZWZpbmVkLFxuICAgIHJlcVBhcmFtcz86IFByZVNpZ25SZXF1ZXN0UGFyYW1zIHwgRGF0ZSxcbiAgICByZXF1ZXN0RGF0ZT86IERhdGUsXG4gICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgaWYgKHRoaXMuYW5vbnltb3VzKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkFub255bW91c1JlcXVlc3RFcnJvcihgUHJlc2lnbmVkICR7bWV0aG9kfSB1cmwgY2Fubm90IGJlIGdlbmVyYXRlZCBmb3IgYW5vbnltb3VzIHJlcXVlc3RzYClcbiAgICB9XG5cbiAgICBpZiAoIWV4cGlyZXMpIHtcbiAgICAgIGV4cGlyZXMgPSBQUkVTSUdOX0VYUElSWV9EQVlTX01BWFxuICAgIH1cbiAgICBpZiAoIXJlcVBhcmFtcykge1xuICAgICAgcmVxUGFyYW1zID0ge31cbiAgICB9XG4gICAgaWYgKCFyZXF1ZXN0RGF0ZSkge1xuICAgICAgcmVxdWVzdERhdGUgPSBuZXcgRGF0ZSgpXG4gICAgfVxuXG4gICAgLy8gVHlwZSBhc3NlcnRpb25zXG4gICAgaWYgKGV4cGlyZXMgJiYgdHlwZW9mIGV4cGlyZXMgIT09ICdudW1iZXInKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleHBpcmVzIHNob3VsZCBiZSBvZiB0eXBlIFwibnVtYmVyXCInKVxuICAgIH1cbiAgICBpZiAocmVxUGFyYW1zICYmIHR5cGVvZiByZXFQYXJhbXMgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZXFQYXJhbXMgc2hvdWxkIGJlIG9mIHR5cGUgXCJvYmplY3RcIicpXG4gICAgfVxuICAgIGlmICgocmVxdWVzdERhdGUgJiYgIShyZXF1ZXN0RGF0ZSBpbnN0YW5jZW9mIERhdGUpKSB8fCAocmVxdWVzdERhdGUgJiYgaXNOYU4ocmVxdWVzdERhdGU/LmdldFRpbWUoKSkpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZXF1ZXN0RGF0ZSBzaG91bGQgYmUgb2YgdHlwZSBcIkRhdGVcIiBhbmQgdmFsaWQnKVxuICAgIH1cblxuICAgIGNvbnN0IHF1ZXJ5ID0gcmVxUGFyYW1zID8gcXMuc3RyaW5naWZ5KHJlcVBhcmFtcykgOiB1bmRlZmluZWRcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZWdpb24gPSBhd2FpdCB0aGlzLmdldEJ1Y2tldFJlZ2lvbkFzeW5jKGJ1Y2tldE5hbWUpXG4gICAgICBhd2FpdCB0aGlzLmNoZWNrQW5kUmVmcmVzaENyZWRzKClcbiAgICAgIGNvbnN0IHJlcU9wdGlvbnMgPSB0aGlzLmdldFJlcXVlc3RPcHRpb25zKHsgbWV0aG9kLCByZWdpb24sIGJ1Y2tldE5hbWUsIG9iamVjdE5hbWUsIHF1ZXJ5IH0pXG5cbiAgICAgIHJldHVybiBwcmVzaWduU2lnbmF0dXJlVjQoXG4gICAgICAgIHJlcU9wdGlvbnMsXG4gICAgICAgIHRoaXMuYWNjZXNzS2V5LFxuICAgICAgICB0aGlzLnNlY3JldEtleSxcbiAgICAgICAgdGhpcy5zZXNzaW9uVG9rZW4sXG4gICAgICAgIHJlZ2lvbixcbiAgICAgICAgcmVxdWVzdERhdGUsXG4gICAgICAgIGV4cGlyZXMsXG4gICAgICApXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyIGluc3RhbmNlb2YgZXJyb3JzLkludmFsaWRCdWNrZXROYW1lRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcihgVW5hYmxlIHRvIGdldCBidWNrZXQgcmVnaW9uIGZvciAke2J1Y2tldE5hbWV9LmApXG4gICAgICB9XG5cbiAgICAgIHRocm93IGVyclxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHByZXNpZ25lZEdldE9iamVjdChcbiAgICBidWNrZXROYW1lOiBzdHJpbmcsXG4gICAgb2JqZWN0TmFtZTogc3RyaW5nLFxuICAgIGV4cGlyZXM/OiBudW1iZXIsXG4gICAgcmVzcEhlYWRlcnM/OiBQcmVTaWduUmVxdWVzdFBhcmFtcyB8IERhdGUsXG4gICAgcmVxdWVzdERhdGU/OiBEYXRlLFxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGlmICghaXNWYWxpZEJ1Y2tldE5hbWUoYnVja2V0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEJ1Y2tldE5hbWVFcnJvcignSW52YWxpZCBidWNrZXQgbmFtZTogJyArIGJ1Y2tldE5hbWUpXG4gICAgfVxuICAgIGlmICghaXNWYWxpZE9iamVjdE5hbWUob2JqZWN0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZE9iamVjdE5hbWVFcnJvcihgSW52YWxpZCBvYmplY3QgbmFtZTogJHtvYmplY3ROYW1lfWApXG4gICAgfVxuXG4gICAgY29uc3QgdmFsaWRSZXNwSGVhZGVycyA9IFtcbiAgICAgICdyZXNwb25zZS1jb250ZW50LXR5cGUnLFxuICAgICAgJ3Jlc3BvbnNlLWNvbnRlbnQtbGFuZ3VhZ2UnLFxuICAgICAgJ3Jlc3BvbnNlLWV4cGlyZXMnLFxuICAgICAgJ3Jlc3BvbnNlLWNhY2hlLWNvbnRyb2wnLFxuICAgICAgJ3Jlc3BvbnNlLWNvbnRlbnQtZGlzcG9zaXRpb24nLFxuICAgICAgJ3Jlc3BvbnNlLWNvbnRlbnQtZW5jb2RpbmcnLFxuICAgIF1cbiAgICB2YWxpZFJlc3BIZWFkZXJzLmZvckVhY2goKGhlYWRlcikgPT4ge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaWYgKHJlc3BIZWFkZXJzICE9PSB1bmRlZmluZWQgJiYgcmVzcEhlYWRlcnNbaGVhZGVyXSAhPT0gdW5kZWZpbmVkICYmICFpc1N0cmluZyhyZXNwSGVhZGVyc1toZWFkZXJdKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGByZXNwb25zZSBoZWFkZXIgJHtoZWFkZXJ9IHNob3VsZCBiZSBvZiB0eXBlIFwic3RyaW5nXCJgKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIHRoaXMucHJlc2lnbmVkVXJsKCdHRVQnLCBidWNrZXROYW1lLCBvYmplY3ROYW1lLCBleHBpcmVzLCByZXNwSGVhZGVycywgcmVxdWVzdERhdGUpXG4gIH1cblxuICBhc3luYyBwcmVzaWduZWRQdXRPYmplY3QoYnVja2V0TmFtZTogc3RyaW5nLCBvYmplY3ROYW1lOiBzdHJpbmcsIGV4cGlyZXM/OiBudW1iZXIpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGlmICghaXNWYWxpZEJ1Y2tldE5hbWUoYnVja2V0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEJ1Y2tldE5hbWVFcnJvcihgSW52YWxpZCBidWNrZXQgbmFtZTogJHtidWNrZXROYW1lfWApXG4gICAgfVxuICAgIGlmICghaXNWYWxpZE9iamVjdE5hbWUob2JqZWN0TmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZE9iamVjdE5hbWVFcnJvcihgSW52YWxpZCBvYmplY3QgbmFtZTogJHtvYmplY3ROYW1lfWApXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucHJlc2lnbmVkVXJsKCdQVVQnLCBidWNrZXROYW1lLCBvYmplY3ROYW1lLCBleHBpcmVzKVxuICB9XG5cbiAgbmV3UG9zdFBvbGljeSgpOiBQb3N0UG9saWN5IHtcbiAgICByZXR1cm4gbmV3IFBvc3RQb2xpY3koKVxuICB9XG5cbiAgYXN5bmMgcHJlc2lnbmVkUG9zdFBvbGljeShwb3N0UG9saWN5OiBQb3N0UG9saWN5KTogUHJvbWlzZTxQb3N0UG9saWN5UmVzdWx0PiB7XG4gICAgaWYgKHRoaXMuYW5vbnltb3VzKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkFub255bW91c1JlcXVlc3RFcnJvcignUHJlc2lnbmVkIFBPU1QgcG9saWN5IGNhbm5vdCBiZSBnZW5lcmF0ZWQgZm9yIGFub255bW91cyByZXF1ZXN0cycpXG4gICAgfVxuICAgIGlmICghaXNPYmplY3QocG9zdFBvbGljeSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Bvc3RQb2xpY3kgc2hvdWxkIGJlIG9mIHR5cGUgXCJvYmplY3RcIicpXG4gICAgfVxuICAgIGNvbnN0IGJ1Y2tldE5hbWUgPSBwb3N0UG9saWN5LmZvcm1EYXRhLmJ1Y2tldCBhcyBzdHJpbmdcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVnaW9uID0gYXdhaXQgdGhpcy5nZXRCdWNrZXRSZWdpb25Bc3luYyhidWNrZXROYW1lKVxuXG4gICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKVxuICAgICAgY29uc3QgZGF0ZVN0ciA9IG1ha2VEYXRlTG9uZyhkYXRlKVxuICAgICAgYXdhaXQgdGhpcy5jaGVja0FuZFJlZnJlc2hDcmVkcygpXG5cbiAgICAgIGlmICghcG9zdFBvbGljeS5wb2xpY3kuZXhwaXJhdGlvbikge1xuICAgICAgICAvLyAnZXhwaXJhdGlvbicgaXMgbWFuZGF0b3J5IGZpZWxkIGZvciBTMy5cbiAgICAgICAgLy8gU2V0IGRlZmF1bHQgZXhwaXJhdGlvbiBkYXRlIG9mIDcgZGF5cy5cbiAgICAgICAgY29uc3QgZXhwaXJlcyA9IG5ldyBEYXRlKClcbiAgICAgICAgZXhwaXJlcy5zZXRTZWNvbmRzKFBSRVNJR05fRVhQSVJZX0RBWVNfTUFYKVxuICAgICAgICBwb3N0UG9saWN5LnNldEV4cGlyZXMoZXhwaXJlcylcbiAgICAgIH1cblxuICAgICAgcG9zdFBvbGljeS5wb2xpY3kuY29uZGl0aW9ucy5wdXNoKFsnZXEnLCAnJHgtYW16LWRhdGUnLCBkYXRlU3RyXSlcbiAgICAgIHBvc3RQb2xpY3kuZm9ybURhdGFbJ3gtYW16LWRhdGUnXSA9IGRhdGVTdHJcblxuICAgICAgcG9zdFBvbGljeS5wb2xpY3kuY29uZGl0aW9ucy5wdXNoKFsnZXEnLCAnJHgtYW16LWFsZ29yaXRobScsICdBV1M0LUhNQUMtU0hBMjU2J10pXG4gICAgICBwb3N0UG9saWN5LmZvcm1EYXRhWyd4LWFtei1hbGdvcml0aG0nXSA9ICdBV1M0LUhNQUMtU0hBMjU2J1xuXG4gICAgICBwb3N0UG9saWN5LnBvbGljeS5jb25kaXRpb25zLnB1c2goWydlcScsICckeC1hbXotY3JlZGVudGlhbCcsIHRoaXMuYWNjZXNzS2V5ICsgJy8nICsgZ2V0U2NvcGUocmVnaW9uLCBkYXRlKV0pXG4gICAgICBwb3N0UG9saWN5LmZvcm1EYXRhWyd4LWFtei1jcmVkZW50aWFsJ10gPSB0aGlzLmFjY2Vzc0tleSArICcvJyArIGdldFNjb3BlKHJlZ2lvbiwgZGF0ZSlcblxuICAgICAgaWYgKHRoaXMuc2Vzc2lvblRva2VuKSB7XG4gICAgICAgIHBvc3RQb2xpY3kucG9saWN5LmNvbmRpdGlvbnMucHVzaChbJ2VxJywgJyR4LWFtei1zZWN1cml0eS10b2tlbicsIHRoaXMuc2Vzc2lvblRva2VuXSlcbiAgICAgICAgcG9zdFBvbGljeS5mb3JtRGF0YVsneC1hbXotc2VjdXJpdHktdG9rZW4nXSA9IHRoaXMuc2Vzc2lvblRva2VuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHBvbGljeUJhc2U2NCA9IEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KHBvc3RQb2xpY3kucG9saWN5KSkudG9TdHJpbmcoJ2Jhc2U2NCcpXG5cbiAgICAgIHBvc3RQb2xpY3kuZm9ybURhdGEucG9saWN5ID0gcG9saWN5QmFzZTY0XG5cbiAgICAgIHBvc3RQb2xpY3kuZm9ybURhdGFbJ3gtYW16LXNpZ25hdHVyZSddID0gcG9zdFByZXNpZ25TaWduYXR1cmVWNChyZWdpb24sIGRhdGUsIHRoaXMuc2VjcmV0S2V5LCBwb2xpY3lCYXNlNjQpXG4gICAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICByZWdpb246IHJlZ2lvbixcbiAgICAgICAgYnVja2V0TmFtZTogYnVja2V0TmFtZSxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICB9XG4gICAgICBjb25zdCByZXFPcHRpb25zID0gdGhpcy5nZXRSZXF1ZXN0T3B0aW9ucyhvcHRzKVxuICAgICAgY29uc3QgcG9ydFN0ciA9IHRoaXMucG9ydCA9PSA4MCB8fCB0aGlzLnBvcnQgPT09IDQ0MyA/ICcnIDogYDoke3RoaXMucG9ydC50b1N0cmluZygpfWBcbiAgICAgIGNvbnN0IHVybFN0ciA9IGAke3JlcU9wdGlvbnMucHJvdG9jb2x9Ly8ke3JlcU9wdGlvbnMuaG9zdH0ke3BvcnRTdHJ9JHtyZXFPcHRpb25zLnBhdGh9YFxuICAgICAgcmV0dXJuIHsgcG9zdFVSTDogdXJsU3RyLCBmb3JtRGF0YTogcG9zdFBvbGljeS5mb3JtRGF0YSB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyIGluc3RhbmNlb2YgZXJyb3JzLkludmFsaWRCdWNrZXROYW1lRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcihgVW5hYmxlIHRvIGdldCBidWNrZXQgcmVnaW9uIGZvciAke2J1Y2tldE5hbWV9LmApXG4gICAgICB9XG5cbiAgICAgIHRocm93IGVyclxuICAgIH1cbiAgfVxuICAvLyBsaXN0IGEgYmF0Y2ggb2Ygb2JqZWN0c1xuICBhc3luYyBsaXN0T2JqZWN0c1F1ZXJ5KGJ1Y2tldE5hbWU6IHN0cmluZywgcHJlZml4Pzogc3RyaW5nLCBtYXJrZXI/OiBzdHJpbmcsIGxpc3RRdWVyeU9wdHM/OiBMaXN0T2JqZWN0UXVlcnlPcHRzKSB7XG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZShidWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKCdJbnZhbGlkIGJ1Y2tldCBuYW1lOiAnICsgYnVja2V0TmFtZSlcbiAgICB9XG4gICAgaWYgKCFpc1N0cmluZyhwcmVmaXgpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwcmVmaXggc2hvdWxkIGJlIG9mIHR5cGUgXCJzdHJpbmdcIicpXG4gICAgfVxuICAgIGlmICghaXNTdHJpbmcobWFya2VyKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWFya2VyIHNob3VsZCBiZSBvZiB0eXBlIFwic3RyaW5nXCInKVxuICAgIH1cblxuICAgIGlmIChsaXN0UXVlcnlPcHRzICYmICFpc09iamVjdChsaXN0UXVlcnlPcHRzKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbGlzdFF1ZXJ5T3B0cyBzaG91bGQgYmUgb2YgdHlwZSBcIm9iamVjdFwiJylcbiAgICB9XG4gICAgbGV0IHsgRGVsaW1pdGVyLCBNYXhLZXlzLCBJbmNsdWRlVmVyc2lvbiB9ID0gbGlzdFF1ZXJ5T3B0cyBhcyBMaXN0T2JqZWN0UXVlcnlPcHRzXG5cbiAgICBpZiAoIWlzU3RyaW5nKERlbGltaXRlcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0RlbGltaXRlciBzaG91bGQgYmUgb2YgdHlwZSBcInN0cmluZ1wiJylcbiAgICB9XG4gICAgaWYgKCFpc051bWJlcihNYXhLZXlzKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTWF4S2V5cyBzaG91bGQgYmUgb2YgdHlwZSBcIm51bWJlclwiJylcbiAgICB9XG5cbiAgICBjb25zdCBxdWVyaWVzID0gW11cbiAgICAvLyBlc2NhcGUgZXZlcnkgdmFsdWUgaW4gcXVlcnkgc3RyaW5nLCBleGNlcHQgbWF4S2V5c1xuICAgIHF1ZXJpZXMucHVzaChgcHJlZml4PSR7dXJpRXNjYXBlKHByZWZpeCl9YClcbiAgICBxdWVyaWVzLnB1c2goYGRlbGltaXRlcj0ke3VyaUVzY2FwZShEZWxpbWl0ZXIpfWApXG4gICAgcXVlcmllcy5wdXNoKGBlbmNvZGluZy10eXBlPXVybGApXG5cbiAgICBpZiAoSW5jbHVkZVZlcnNpb24pIHtcbiAgICAgIHF1ZXJpZXMucHVzaChgdmVyc2lvbnNgKVxuICAgIH1cblxuICAgIGlmIChtYXJrZXIpIHtcbiAgICAgIG1hcmtlciA9IHVyaUVzY2FwZShtYXJrZXIpXG4gICAgICBpZiAoSW5jbHVkZVZlcnNpb24pIHtcbiAgICAgICAgcXVlcmllcy5wdXNoKGBrZXktbWFya2VyPSR7bWFya2VyfWApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxdWVyaWVzLnB1c2goYG1hcmtlcj0ke21hcmtlcn1gKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIG5vIG5lZWQgdG8gZXNjYXBlIG1heEtleXNcbiAgICBpZiAoTWF4S2V5cykge1xuICAgICAgaWYgKE1heEtleXMgPj0gMTAwMCkge1xuICAgICAgICBNYXhLZXlzID0gMTAwMFxuICAgICAgfVxuICAgICAgcXVlcmllcy5wdXNoKGBtYXgta2V5cz0ke01heEtleXN9YClcbiAgICB9XG4gICAgcXVlcmllcy5zb3J0KClcbiAgICBsZXQgcXVlcnkgPSAnJ1xuICAgIGlmIChxdWVyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHF1ZXJ5ID0gYCR7cXVlcmllcy5qb2luKCcmJyl9YFxuICAgIH1cblxuICAgIGNvbnN0IG1ldGhvZCA9ICdHRVQnXG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdEFzeW5jKHsgbWV0aG9kLCBidWNrZXROYW1lLCBxdWVyeSB9KVxuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZWFkQXNTdHJpbmcocmVzKVxuICAgIGNvbnN0IGxpc3RRcnlMaXN0ID0gcGFyc2VMaXN0T2JqZWN0cyhib2R5KVxuICAgIHJldHVybiBsaXN0UXJ5TGlzdFxuICB9XG5cbiAgbGlzdE9iamVjdHMoXG4gICAgYnVja2V0TmFtZTogc3RyaW5nLFxuICAgIHByZWZpeD86IHN0cmluZyxcbiAgICByZWN1cnNpdmU/OiBib29sZWFuLFxuICAgIGxpc3RPcHRzPzogTGlzdE9iamVjdFF1ZXJ5T3B0cyB8IHVuZGVmaW5lZCxcbiAgKTogQnVja2V0U3RyZWFtPE9iamVjdEluZm8+IHtcbiAgICBpZiAocHJlZml4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHByZWZpeCA9ICcnXG4gICAgfVxuICAgIGlmIChyZWN1cnNpdmUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVjdXJzaXZlID0gZmFsc2VcbiAgICB9XG4gICAgaWYgKCFpc1ZhbGlkQnVja2V0TmFtZShidWNrZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQnVja2V0TmFtZUVycm9yKCdJbnZhbGlkIGJ1Y2tldCBuYW1lOiAnICsgYnVja2V0TmFtZSlcbiAgICB9XG4gICAgaWYgKCFpc1ZhbGlkUHJlZml4KHByZWZpeCkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZFByZWZpeEVycm9yKGBJbnZhbGlkIHByZWZpeCA6ICR7cHJlZml4fWApXG4gICAgfVxuICAgIGlmICghaXNTdHJpbmcocHJlZml4KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncHJlZml4IHNob3VsZCBiZSBvZiB0eXBlIFwic3RyaW5nXCInKVxuICAgIH1cbiAgICBpZiAoIWlzQm9vbGVhbihyZWN1cnNpdmUpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWN1cnNpdmUgc2hvdWxkIGJlIG9mIHR5cGUgXCJib29sZWFuXCInKVxuICAgIH1cbiAgICBpZiAobGlzdE9wdHMgJiYgIWlzT2JqZWN0KGxpc3RPcHRzKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbGlzdE9wdHMgc2hvdWxkIGJlIG9mIHR5cGUgXCJvYmplY3RcIicpXG4gICAgfVxuICAgIGxldCBtYXJrZXI6IHN0cmluZyB8IHVuZGVmaW5lZCA9ICcnXG4gICAgY29uc3QgbGlzdFF1ZXJ5T3B0cyA9IHtcbiAgICAgIERlbGltaXRlcjogcmVjdXJzaXZlID8gJycgOiAnLycsIC8vIGlmIHJlY3Vyc2l2ZSBpcyBmYWxzZSBzZXQgZGVsaW1pdGVyIHRvICcvJ1xuICAgICAgTWF4S2V5czogMTAwMCxcbiAgICAgIEluY2x1ZGVWZXJzaW9uOiBsaXN0T3B0cz8uSW5jbHVkZVZlcnNpb24sXG4gICAgfVxuICAgIGxldCBvYmplY3RzOiBPYmplY3RJbmZvW10gPSBbXVxuICAgIGxldCBlbmRlZCA9IGZhbHNlXG4gICAgY29uc3QgcmVhZFN0cmVhbTogc3RyZWFtLlJlYWRhYmxlID0gbmV3IHN0cmVhbS5SZWFkYWJsZSh7IG9iamVjdE1vZGU6IHRydWUgfSlcbiAgICByZWFkU3RyZWFtLl9yZWFkID0gYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gcHVzaCBvbmUgb2JqZWN0IHBlciBfcmVhZCgpXG4gICAgICBpZiAob2JqZWN0cy5sZW5ndGgpIHtcbiAgICAgICAgcmVhZFN0cmVhbS5wdXNoKG9iamVjdHMuc2hpZnQoKSlcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAoZW5kZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRTdHJlYW0ucHVzaChudWxsKVxuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXN1bHQ6IExpc3RPYmplY3RRdWVyeVJlcyA9IGF3YWl0IHRoaXMubGlzdE9iamVjdHNRdWVyeShidWNrZXROYW1lLCBwcmVmaXgsIG1hcmtlciwgbGlzdFF1ZXJ5T3B0cylcbiAgICAgICAgaWYgKHJlc3VsdC5pc1RydW5jYXRlZCkge1xuICAgICAgICAgIG1hcmtlciA9IHJlc3VsdC5uZXh0TWFya2VyIHx8IHJlc3VsdC52ZXJzaW9uSWRNYXJrZXJcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmRlZCA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0Lm9iamVjdHMpIHtcbiAgICAgICAgICBvYmplY3RzID0gcmVzdWx0Lm9iamVjdHNcbiAgICAgICAgfVxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJlYWRTdHJlYW0uX3JlYWQoKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJlYWRTdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZWFkU3RyZWFtXG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLQSxNQUFNO0FBQ2xCLE9BQU8sS0FBS0MsRUFBRTtBQUVkLE9BQU8sS0FBS0MsSUFBSTtBQUNoQixPQUFPLEtBQUtDLEtBQUs7QUFDakIsT0FBTyxLQUFLQyxJQUFJO0FBQ2hCLE9BQU8sS0FBS0MsTUFBTTtBQUVsQixPQUFPLEtBQUtDLEtBQUssTUFBTSxPQUFPO0FBQzlCLE9BQU9DLFlBQVksTUFBTSxlQUFlO0FBQ3hDLFNBQVNDLFNBQVMsUUFBUSxpQkFBaUI7QUFDM0MsT0FBT0MsQ0FBQyxNQUFNLFFBQVE7QUFDdEIsT0FBTyxLQUFLQyxFQUFFLE1BQU0sY0FBYztBQUNsQyxPQUFPQyxNQUFNLE1BQU0sUUFBUTtBQUUzQixTQUFTQyxrQkFBa0IsUUFBUSwyQkFBMEI7QUFDN0QsT0FBTyxLQUFLQyxNQUFNLE1BQU0sZUFBYztBQUV0QyxTQUNFQyxzQkFBc0IsRUFDdEJDLGlCQUFpQixFQUNqQkMsY0FBYyxFQUNkQyxpQkFBaUIsRUFDakJDLHVCQUF1QixFQUN2QkMsZUFBZSxFQUNmQyx3QkFBd0IsUUFDbkIsZ0JBQWU7QUFFdEIsU0FBU0Msc0JBQXNCLEVBQUVDLGtCQUFrQixFQUFFQyxNQUFNLFFBQVEsZ0JBQWU7QUFDbEYsU0FBU0MsR0FBRyxFQUFFQyxhQUFhLFFBQVEsYUFBWTtBQUMvQyxTQUFTQyxjQUFjLFFBQVEsdUJBQXNCO0FBQ3JELFNBQVNDLFVBQVUsUUFBUSxrQkFBaUI7QUFDNUMsU0FDRUMsbUJBQW1CLEVBQ25CQyxlQUFlLEVBQ2ZDLGdCQUFnQixFQUNoQkMsUUFBUSxFQUNSQyxrQkFBa0IsRUFDbEJDLFlBQVksRUFDWkMsVUFBVSxFQUNWQyxpQkFBaUIsRUFDakJDLGdCQUFnQixFQUNoQkMsU0FBUyxFQUNUQyxTQUFTLEVBQ1RDLE9BQU8sRUFDUEMsUUFBUSxFQUNSQyxRQUFRLEVBQ1JDLGdCQUFnQixFQUNoQkMsUUFBUSxFQUNSQyxpQkFBaUIsRUFDakJDLGVBQWUsRUFDZkMsaUJBQWlCLEVBQ2pCQyxXQUFXLEVBQ1hDLGFBQWEsRUFDYkMsa0JBQWtCLEVBQ2xCQyxZQUFZLEVBQ1pDLGdCQUFnQixFQUNoQkMsYUFBYSxFQUNiQyxlQUFlLEVBQ2ZDLGNBQWMsRUFDZEMsWUFBWSxFQUNaQyxLQUFLLEVBQ0xDLFFBQVEsRUFDUkMsU0FBUyxFQUNUQyxpQkFBaUIsUUFDWixjQUFhO0FBQ3BCLFNBQVNDLFlBQVksUUFBUSxzQkFBcUI7QUFDbEQsU0FBU0MsVUFBVSxRQUFRLG1CQUFrQjtBQUM3QyxTQUFTQyxnQkFBZ0IsUUFBUSxlQUFjO0FBQy9DLFNBQVNDLGFBQWEsRUFBRUMsWUFBWSxFQUFFQyxZQUFZLFFBQVEsZ0JBQWU7QUFFekUsU0FBU0MsYUFBYSxRQUFRLG9CQUFtQjtBQWlEakQsU0FDRUMsc0JBQXNCLEVBQ3RCQyxzQkFBc0IsRUFDdEJDLGdCQUFnQixFQUNoQkMsMEJBQTBCLEVBQzFCQyxnQ0FBZ0MsRUFDaENDLGdCQUFnQixRQUNYLGtCQUFpQjtBQUN4QixPQUFPLEtBQUtDLFVBQVUsTUFBTSxrQkFBaUI7QUFFN0MsTUFBTUMsR0FBRyxHQUFHLElBQUkvRCxNQUFNLENBQUNnRSxPQUFPLENBQUM7RUFBRUMsVUFBVSxFQUFFO0lBQUVDLE1BQU0sRUFBRTtFQUFNLENBQUM7RUFBRUMsUUFBUSxFQUFFO0FBQUssQ0FBQyxDQUFDOztBQUVqRjtBQUNBLE1BQU1DLE9BQU8sR0FBRztFQUFFQyxPQUFPLEVBckl6QixPQUFPLElBcUk0RDtBQUFjLENBQUM7QUFFbEYsTUFBTUMsdUJBQXVCLEdBQUcsQ0FDOUIsT0FBTyxFQUNQLElBQUksRUFDSixNQUFNLEVBQ04sU0FBUyxFQUNULGtCQUFrQixFQUNsQixLQUFLLEVBQ0wsU0FBUyxFQUNULFdBQVcsRUFDWCxRQUFRLEVBQ1Isa0JBQWtCLEVBQ2xCLEtBQUssRUFDTCxZQUFZLEVBQ1osS0FBSyxFQUNMLG9CQUFvQixFQUNwQixlQUFlLEVBQ2YsZ0JBQWdCLEVBQ2hCLFlBQVksRUFDWixrQkFBa0IsQ0FDVjtBQTJDVixPQUFPLE1BQU1DLFdBQVcsQ0FBQztFQWN2QkMsUUFBUSxHQUFXLEVBQUUsR0FBRyxJQUFJLEdBQUcsSUFBSTtFQUd6QkMsZUFBZSxHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUk7RUFDeENDLGFBQWEsR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSTtFQVF2REMsV0FBV0EsQ0FBQ0MsTUFBcUIsRUFBRTtJQUNqQztJQUNBLElBQUlBLE1BQU0sQ0FBQ0MsTUFBTSxLQUFLQyxTQUFTLEVBQUU7TUFDL0IsTUFBTSxJQUFJQyxLQUFLLENBQUMsNkRBQTZELENBQUM7SUFDaEY7SUFDQTtJQUNBLElBQUlILE1BQU0sQ0FBQ0ksTUFBTSxLQUFLRixTQUFTLEVBQUU7TUFDL0JGLE1BQU0sQ0FBQ0ksTUFBTSxHQUFHLElBQUk7SUFDdEI7SUFDQSxJQUFJLENBQUNKLE1BQU0sQ0FBQ0ssSUFBSSxFQUFFO01BQ2hCTCxNQUFNLENBQUNLLElBQUksR0FBRyxDQUFDO0lBQ2pCO0lBQ0E7SUFDQSxJQUFJLENBQUMvQyxlQUFlLENBQUMwQyxNQUFNLENBQUNNLFFBQVEsQ0FBQyxFQUFFO01BQ3JDLE1BQU0sSUFBSWhGLE1BQU0sQ0FBQ2lGLG9CQUFvQixDQUFFLHNCQUFxQlAsTUFBTSxDQUFDTSxRQUFTLEVBQUMsQ0FBQztJQUNoRjtJQUNBLElBQUksQ0FBQzlDLFdBQVcsQ0FBQ3dDLE1BQU0sQ0FBQ0ssSUFBSSxDQUFDLEVBQUU7TUFDN0IsTUFBTSxJQUFJL0UsTUFBTSxDQUFDa0Ysb0JBQW9CLENBQUUsa0JBQWlCUixNQUFNLENBQUNLLElBQUssRUFBQyxDQUFDO0lBQ3hFO0lBQ0EsSUFBSSxDQUFDdkQsU0FBUyxDQUFDa0QsTUFBTSxDQUFDSSxNQUFNLENBQUMsRUFBRTtNQUM3QixNQUFNLElBQUk5RSxNQUFNLENBQUNrRixvQkFBb0IsQ0FDbEMsOEJBQTZCUixNQUFNLENBQUNJLE1BQU8sb0NBQzlDLENBQUM7SUFDSDs7SUFFQTtJQUNBLElBQUlKLE1BQU0sQ0FBQ1MsTUFBTSxFQUFFO01BQ2pCLElBQUksQ0FBQ3JELFFBQVEsQ0FBQzRDLE1BQU0sQ0FBQ1MsTUFBTSxDQUFDLEVBQUU7UUFDNUIsTUFBTSxJQUFJbkYsTUFBTSxDQUFDa0Ysb0JBQW9CLENBQUUsb0JBQW1CUixNQUFNLENBQUNTLE1BQU8sRUFBQyxDQUFDO01BQzVFO0lBQ0Y7SUFFQSxNQUFNQyxJQUFJLEdBQUdWLE1BQU0sQ0FBQ00sUUFBUSxDQUFDSyxXQUFXLENBQUMsQ0FBQztJQUMxQyxJQUFJTixJQUFJLEdBQUdMLE1BQU0sQ0FBQ0ssSUFBSTtJQUN0QixJQUFJTyxRQUFnQjtJQUNwQixJQUFJQyxTQUFTO0lBQ2IsSUFBSUMsY0FBMEI7SUFDOUI7SUFDQTtJQUNBLElBQUlkLE1BQU0sQ0FBQ0ksTUFBTSxFQUFFO01BQ2pCO01BQ0FTLFNBQVMsR0FBR2pHLEtBQUs7TUFDakJnRyxRQUFRLEdBQUcsUUFBUTtNQUNuQlAsSUFBSSxHQUFHQSxJQUFJLElBQUksR0FBRztNQUNsQlMsY0FBYyxHQUFHbEcsS0FBSyxDQUFDbUcsV0FBVztJQUNwQyxDQUFDLE1BQU07TUFDTEYsU0FBUyxHQUFHbEcsSUFBSTtNQUNoQmlHLFFBQVEsR0FBRyxPQUFPO01BQ2xCUCxJQUFJLEdBQUdBLElBQUksSUFBSSxFQUFFO01BQ2pCUyxjQUFjLEdBQUduRyxJQUFJLENBQUNvRyxXQUFXO0lBQ25DOztJQUVBO0lBQ0EsSUFBSWYsTUFBTSxDQUFDYSxTQUFTLEVBQUU7TUFDcEIsSUFBSSxDQUFDM0QsUUFBUSxDQUFDOEMsTUFBTSxDQUFDYSxTQUFTLENBQUMsRUFBRTtRQUMvQixNQUFNLElBQUl2RixNQUFNLENBQUNrRixvQkFBb0IsQ0FDbEMsNEJBQTJCUixNQUFNLENBQUNhLFNBQVUsZ0NBQy9DLENBQUM7TUFDSDtNQUNBQSxTQUFTLEdBQUdiLE1BQU0sQ0FBQ2EsU0FBUztJQUM5Qjs7SUFFQTtJQUNBLElBQUliLE1BQU0sQ0FBQ2MsY0FBYyxFQUFFO01BQ3pCLElBQUksQ0FBQzVELFFBQVEsQ0FBQzhDLE1BQU0sQ0FBQ2MsY0FBYyxDQUFDLEVBQUU7UUFDcEMsTUFBTSxJQUFJeEYsTUFBTSxDQUFDa0Ysb0JBQW9CLENBQ2xDLGdDQUErQlIsTUFBTSxDQUFDYyxjQUFlLGdDQUN4RCxDQUFDO01BQ0g7TUFFQUEsY0FBYyxHQUFHZCxNQUFNLENBQUNjLGNBQWM7SUFDeEM7O0lBRUE7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBLE1BQU1FLGVBQWUsR0FBSSxJQUFHQyxPQUFPLENBQUNDLFFBQVMsS0FBSUQsT0FBTyxDQUFDRSxJQUFLLEdBQUU7SUFDaEUsTUFBTUMsWUFBWSxHQUFJLFNBQVFKLGVBQWdCLGFBQVl4QixPQUFPLENBQUNDLE9BQVEsRUFBQztJQUMzRTs7SUFFQSxJQUFJLENBQUNvQixTQUFTLEdBQUdBLFNBQVM7SUFDMUIsSUFBSSxDQUFDQyxjQUFjLEdBQUdBLGNBQWM7SUFDcEMsSUFBSSxDQUFDSixJQUFJLEdBQUdBLElBQUk7SUFDaEIsSUFBSSxDQUFDTCxJQUFJLEdBQUdBLElBQUk7SUFDaEIsSUFBSSxDQUFDTyxRQUFRLEdBQUdBLFFBQVE7SUFDeEIsSUFBSSxDQUFDUyxTQUFTLEdBQUksR0FBRUQsWUFBYSxFQUFDOztJQUVsQztJQUNBLElBQUlwQixNQUFNLENBQUNzQixTQUFTLEtBQUtwQixTQUFTLEVBQUU7TUFDbEMsSUFBSSxDQUFDb0IsU0FBUyxHQUFHLElBQUk7SUFDdkIsQ0FBQyxNQUFNO01BQ0wsSUFBSSxDQUFDQSxTQUFTLEdBQUd0QixNQUFNLENBQUNzQixTQUFTO0lBQ25DO0lBRUEsSUFBSSxDQUFDQyxTQUFTLEdBQUd2QixNQUFNLENBQUN1QixTQUFTLElBQUksRUFBRTtJQUN2QyxJQUFJLENBQUNDLFNBQVMsR0FBR3hCLE1BQU0sQ0FBQ3dCLFNBQVMsSUFBSSxFQUFFO0lBQ3ZDLElBQUksQ0FBQ0MsWUFBWSxHQUFHekIsTUFBTSxDQUFDeUIsWUFBWTtJQUN2QyxJQUFJLENBQUNDLFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQ0gsU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDQyxTQUFTO0lBRW5ELElBQUl4QixNQUFNLENBQUMyQixtQkFBbUIsRUFBRTtNQUM5QixJQUFJLENBQUNELFNBQVMsR0FBRyxLQUFLO01BQ3RCLElBQUksQ0FBQ0MsbUJBQW1CLEdBQUczQixNQUFNLENBQUMyQixtQkFBbUI7SUFDdkQ7SUFFQSxJQUFJLENBQUNDLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDbkIsSUFBSTVCLE1BQU0sQ0FBQ1MsTUFBTSxFQUFFO01BQ2pCLElBQUksQ0FBQ0EsTUFBTSxHQUFHVCxNQUFNLENBQUNTLE1BQU07SUFDN0I7SUFFQSxJQUFJVCxNQUFNLENBQUNKLFFBQVEsRUFBRTtNQUNuQixJQUFJLENBQUNBLFFBQVEsR0FBR0ksTUFBTSxDQUFDSixRQUFRO01BQy9CLElBQUksQ0FBQ2lDLGdCQUFnQixHQUFHLElBQUk7SUFDOUI7SUFDQSxJQUFJLElBQUksQ0FBQ2pDLFFBQVEsR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksRUFBRTtNQUNuQyxNQUFNLElBQUl0RSxNQUFNLENBQUNrRixvQkFBb0IsQ0FBRSxzQ0FBcUMsQ0FBQztJQUMvRTtJQUNBLElBQUksSUFBSSxDQUFDWixRQUFRLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxFQUFFO01BQzFDLE1BQU0sSUFBSXRFLE1BQU0sQ0FBQ2tGLG9CQUFvQixDQUFFLG1DQUFrQyxDQUFDO0lBQzVFOztJQUVBO0lBQ0E7SUFDQTtJQUNBLElBQUksQ0FBQ3NCLFlBQVksR0FBRyxDQUFDLElBQUksQ0FBQ0osU0FBUyxJQUFJLENBQUMxQixNQUFNLENBQUNJLE1BQU07SUFFckQsSUFBSSxDQUFDMkIsb0JBQW9CLEdBQUcvQixNQUFNLENBQUMrQixvQkFBb0IsSUFBSTdCLFNBQVM7SUFDcEUsSUFBSSxDQUFDOEIsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUNwQixJQUFJLENBQUNDLGdCQUFnQixHQUFHLElBQUk3RixVQUFVLENBQUMsSUFBSSxDQUFDO0VBQzlDO0VBQ0E7QUFDRjtBQUNBO0VBQ0UsSUFBSThGLFVBQVVBLENBQUEsRUFBRztJQUNmLE9BQU8sSUFBSSxDQUFDRCxnQkFBZ0I7RUFDOUI7O0VBRUE7QUFDRjtBQUNBO0VBQ0VFLHVCQUF1QkEsQ0FBQzdCLFFBQWdCLEVBQUU7SUFDeEMsSUFBSSxDQUFDeUIsb0JBQW9CLEdBQUd6QixRQUFRO0VBQ3RDOztFQUVBO0FBQ0Y7QUFDQTtFQUNTOEIsaUJBQWlCQSxDQUFDQyxPQUE2RSxFQUFFO0lBQ3RHLElBQUksQ0FBQ25GLFFBQVEsQ0FBQ21GLE9BQU8sQ0FBQyxFQUFFO01BQ3RCLE1BQU0sSUFBSUMsU0FBUyxDQUFDLDRDQUE0QyxDQUFDO0lBQ25FO0lBQ0EsSUFBSSxDQUFDTixVQUFVLEdBQUc5RyxDQUFDLENBQUNxSCxJQUFJLENBQUNGLE9BQU8sRUFBRTNDLHVCQUF1QixDQUFDO0VBQzVEOztFQUVBO0FBQ0Y7QUFDQTtFQUNVOEMsMEJBQTBCQSxDQUFDQyxVQUFtQixFQUFFQyxVQUFtQixFQUFFO0lBQzNFLElBQUksQ0FBQzFGLE9BQU8sQ0FBQyxJQUFJLENBQUMrRSxvQkFBb0IsQ0FBQyxJQUFJLENBQUMvRSxPQUFPLENBQUN5RixVQUFVLENBQUMsSUFBSSxDQUFDekYsT0FBTyxDQUFDMEYsVUFBVSxDQUFDLEVBQUU7TUFDdkY7TUFDQTtNQUNBLElBQUlELFVBQVUsQ0FBQ0UsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQzVCLE1BQU0sSUFBSXhDLEtBQUssQ0FBRSxtRUFBa0VzQyxVQUFXLEVBQUMsQ0FBQztNQUNsRztNQUNBO01BQ0E7TUFDQTtNQUNBLE9BQU8sSUFBSSxDQUFDVixvQkFBb0I7SUFDbEM7SUFDQSxPQUFPLEtBQUs7RUFDZDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VhLFVBQVVBLENBQUNDLE9BQWUsRUFBRUMsVUFBa0IsRUFBRTtJQUM5QyxJQUFJLENBQUMxRixRQUFRLENBQUN5RixPQUFPLENBQUMsRUFBRTtNQUN0QixNQUFNLElBQUlQLFNBQVMsQ0FBRSxvQkFBbUJPLE9BQVEsRUFBQyxDQUFDO0lBQ3BEO0lBQ0EsSUFBSUEsT0FBTyxDQUFDRSxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtNQUN6QixNQUFNLElBQUl6SCxNQUFNLENBQUNrRixvQkFBb0IsQ0FBQyxnQ0FBZ0MsQ0FBQztJQUN6RTtJQUNBLElBQUksQ0FBQ3BELFFBQVEsQ0FBQzBGLFVBQVUsQ0FBQyxFQUFFO01BQ3pCLE1BQU0sSUFBSVIsU0FBUyxDQUFFLHVCQUFzQlEsVUFBVyxFQUFDLENBQUM7SUFDMUQ7SUFDQSxJQUFJQSxVQUFVLENBQUNDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO01BQzVCLE1BQU0sSUFBSXpILE1BQU0sQ0FBQ2tGLG9CQUFvQixDQUFDLG1DQUFtQyxDQUFDO0lBQzVFO0lBQ0EsSUFBSSxDQUFDYSxTQUFTLEdBQUksR0FBRSxJQUFJLENBQUNBLFNBQVUsSUFBR3dCLE9BQVEsSUFBR0MsVUFBVyxFQUFDO0VBQy9EOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ1lFLGlCQUFpQkEsQ0FDekJDLElBRUMsRUFJRDtJQUNBLE1BQU1DLE1BQU0sR0FBR0QsSUFBSSxDQUFDQyxNQUFNO0lBQzFCLE1BQU16QyxNQUFNLEdBQUd3QyxJQUFJLENBQUN4QyxNQUFNO0lBQzFCLE1BQU1nQyxVQUFVLEdBQUdRLElBQUksQ0FBQ1IsVUFBVTtJQUNsQyxJQUFJQyxVQUFVLEdBQUdPLElBQUksQ0FBQ1AsVUFBVTtJQUNoQyxNQUFNUyxPQUFPLEdBQUdGLElBQUksQ0FBQ0UsT0FBTztJQUM1QixNQUFNQyxLQUFLLEdBQUdILElBQUksQ0FBQ0csS0FBSztJQUV4QixJQUFJcEIsVUFBVSxHQUFHO01BQ2ZrQixNQUFNO01BQ05DLE9BQU8sRUFBRSxDQUFDLENBQW1CO01BQzdCdkMsUUFBUSxFQUFFLElBQUksQ0FBQ0EsUUFBUTtNQUN2QjtNQUNBeUMsS0FBSyxFQUFFLElBQUksQ0FBQ3ZDO0lBQ2QsQ0FBQzs7SUFFRDtJQUNBLElBQUl3QyxnQkFBZ0I7SUFDcEIsSUFBSWIsVUFBVSxFQUFFO01BQ2RhLGdCQUFnQixHQUFHNUYsa0JBQWtCLENBQUMsSUFBSSxDQUFDZ0QsSUFBSSxFQUFFLElBQUksQ0FBQ0UsUUFBUSxFQUFFNkIsVUFBVSxFQUFFLElBQUksQ0FBQ25CLFNBQVMsQ0FBQztJQUM3RjtJQUVBLElBQUl6RyxJQUFJLEdBQUcsR0FBRztJQUNkLElBQUk2RixJQUFJLEdBQUcsSUFBSSxDQUFDQSxJQUFJO0lBRXBCLElBQUlMLElBQXdCO0lBQzVCLElBQUksSUFBSSxDQUFDQSxJQUFJLEVBQUU7TUFDYkEsSUFBSSxHQUFHLElBQUksQ0FBQ0EsSUFBSTtJQUNsQjtJQUVBLElBQUlxQyxVQUFVLEVBQUU7TUFDZEEsVUFBVSxHQUFHdEUsaUJBQWlCLENBQUNzRSxVQUFVLENBQUM7SUFDNUM7O0lBRUE7SUFDQSxJQUFJN0YsZ0JBQWdCLENBQUM2RCxJQUFJLENBQUMsRUFBRTtNQUMxQixNQUFNNkMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDZiwwQkFBMEIsQ0FBQ0MsVUFBVSxFQUFFQyxVQUFVLENBQUM7TUFDbEYsSUFBSWEsa0JBQWtCLEVBQUU7UUFDdEI3QyxJQUFJLEdBQUksR0FBRTZDLGtCQUFtQixFQUFDO01BQ2hDLENBQUMsTUFBTTtRQUNMN0MsSUFBSSxHQUFHL0IsYUFBYSxDQUFDOEIsTUFBTSxDQUFDO01BQzlCO0lBQ0Y7SUFFQSxJQUFJNkMsZ0JBQWdCLElBQUksQ0FBQ0wsSUFBSSxDQUFDM0IsU0FBUyxFQUFFO01BQ3ZDO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQSxJQUFJbUIsVUFBVSxFQUFFO1FBQ2QvQixJQUFJLEdBQUksR0FBRStCLFVBQVcsSUFBRy9CLElBQUssRUFBQztNQUNoQztNQUNBLElBQUlnQyxVQUFVLEVBQUU7UUFDZDdILElBQUksR0FBSSxJQUFHNkgsVUFBVyxFQUFDO01BQ3pCO0lBQ0YsQ0FBQyxNQUFNO01BQ0w7TUFDQTtNQUNBO01BQ0EsSUFBSUQsVUFBVSxFQUFFO1FBQ2Q1SCxJQUFJLEdBQUksSUFBRzRILFVBQVcsRUFBQztNQUN6QjtNQUNBLElBQUlDLFVBQVUsRUFBRTtRQUNkN0gsSUFBSSxHQUFJLElBQUc0SCxVQUFXLElBQUdDLFVBQVcsRUFBQztNQUN2QztJQUNGO0lBRUEsSUFBSVUsS0FBSyxFQUFFO01BQ1R2SSxJQUFJLElBQUssSUFBR3VJLEtBQU0sRUFBQztJQUNyQjtJQUNBcEIsVUFBVSxDQUFDbUIsT0FBTyxDQUFDekMsSUFBSSxHQUFHQSxJQUFJO0lBQzlCLElBQUtzQixVQUFVLENBQUNwQixRQUFRLEtBQUssT0FBTyxJQUFJUCxJQUFJLEtBQUssRUFBRSxJQUFNMkIsVUFBVSxDQUFDcEIsUUFBUSxLQUFLLFFBQVEsSUFBSVAsSUFBSSxLQUFLLEdBQUksRUFBRTtNQUMxRzJCLFVBQVUsQ0FBQ21CLE9BQU8sQ0FBQ3pDLElBQUksR0FBR3JDLFlBQVksQ0FBQ3FDLElBQUksRUFBRUwsSUFBSSxDQUFDO0lBQ3BEO0lBRUEyQixVQUFVLENBQUNtQixPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDOUIsU0FBUztJQUNqRCxJQUFJOEIsT0FBTyxFQUFFO01BQ1g7TUFDQSxLQUFLLE1BQU0sQ0FBQ0ssQ0FBQyxFQUFFQyxDQUFDLENBQUMsSUFBSUMsTUFBTSxDQUFDQyxPQUFPLENBQUNSLE9BQU8sQ0FBQyxFQUFFO1FBQzVDbkIsVUFBVSxDQUFDbUIsT0FBTyxDQUFDSyxDQUFDLENBQUM3QyxXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUc4QyxDQUFDO01BQ3pDO0lBQ0Y7O0lBRUE7SUFDQXpCLFVBQVUsR0FBRzBCLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQzVCLFVBQVUsRUFBRUEsVUFBVSxDQUFDO0lBRTNELE9BQU87TUFDTCxHQUFHQSxVQUFVO01BQ2JtQixPQUFPLEVBQUVqSSxDQUFDLENBQUMySSxTQUFTLENBQUMzSSxDQUFDLENBQUM0SSxNQUFNLENBQUM5QixVQUFVLENBQUNtQixPQUFPLEVBQUVwRyxTQUFTLENBQUMsRUFBRzBHLENBQUMsSUFBS0EsQ0FBQyxDQUFDTSxRQUFRLENBQUMsQ0FBQyxDQUFDO01BQ2xGckQsSUFBSTtNQUNKTCxJQUFJO01BQ0p4RjtJQUNGLENBQUM7RUFDSDtFQUVBLE1BQWFtSixzQkFBc0JBLENBQUNyQyxtQkFBdUMsRUFBRTtJQUMzRSxJQUFJLEVBQUVBLG1CQUFtQixZQUFZdEcsa0JBQWtCLENBQUMsRUFBRTtNQUN4RCxNQUFNLElBQUk4RSxLQUFLLENBQUMsb0VBQW9FLENBQUM7SUFDdkY7SUFDQSxJQUFJLENBQUN3QixtQkFBbUIsR0FBR0EsbUJBQW1CO0lBQzlDLE1BQU0sSUFBSSxDQUFDc0Msb0JBQW9CLENBQUMsQ0FBQztFQUNuQztFQUVBLE1BQWNBLG9CQUFvQkEsQ0FBQSxFQUFHO0lBQ25DLElBQUksSUFBSSxDQUFDdEMsbUJBQW1CLEVBQUU7TUFDNUIsSUFBSTtRQUNGLE1BQU11QyxlQUFlLEdBQUcsTUFBTSxJQUFJLENBQUN2QyxtQkFBbUIsQ0FBQ3dDLGNBQWMsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQzVDLFNBQVMsR0FBRzJDLGVBQWUsQ0FBQ0UsWUFBWSxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDNUMsU0FBUyxHQUFHMEMsZUFBZSxDQUFDRyxZQUFZLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUM1QyxZQUFZLEdBQUd5QyxlQUFlLENBQUNJLGVBQWUsQ0FBQyxDQUFDO01BQ3ZELENBQUMsQ0FBQyxPQUFPQyxDQUFDLEVBQUU7UUFDVixNQUFNLElBQUlwRSxLQUFLLENBQUUsOEJBQTZCb0UsQ0FBRSxFQUFDLEVBQUU7VUFBRUMsS0FBSyxFQUFFRDtRQUFFLENBQUMsQ0FBQztNQUNsRTtJQUNGO0VBQ0Y7RUFJQTtBQUNGO0FBQ0E7RUFDVUUsT0FBT0EsQ0FBQ3pDLFVBQW9CLEVBQUUwQyxRQUFxQyxFQUFFQyxHQUFhLEVBQUU7SUFDMUY7SUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDQyxTQUFTLEVBQUU7TUFDbkI7SUFDRjtJQUNBLElBQUksQ0FBQzFILFFBQVEsQ0FBQzhFLFVBQVUsQ0FBQyxFQUFFO01BQ3pCLE1BQU0sSUFBSU0sU0FBUyxDQUFDLHVDQUF1QyxDQUFDO0lBQzlEO0lBQ0EsSUFBSW9DLFFBQVEsSUFBSSxDQUFDdkgsZ0JBQWdCLENBQUN1SCxRQUFRLENBQUMsRUFBRTtNQUMzQyxNQUFNLElBQUlwQyxTQUFTLENBQUMscUNBQXFDLENBQUM7SUFDNUQ7SUFDQSxJQUFJcUMsR0FBRyxJQUFJLEVBQUVBLEdBQUcsWUFBWXhFLEtBQUssQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSW1DLFNBQVMsQ0FBQywrQkFBK0IsQ0FBQztJQUN0RDtJQUNBLE1BQU1zQyxTQUFTLEdBQUcsSUFBSSxDQUFDQSxTQUFTO0lBQ2hDLE1BQU1DLFVBQVUsR0FBSTFCLE9BQXVCLElBQUs7TUFDOUNPLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDUixPQUFPLENBQUMsQ0FBQzJCLE9BQU8sQ0FBQyxDQUFDLENBQUN0QixDQUFDLEVBQUVDLENBQUMsQ0FBQyxLQUFLO1FBQzFDLElBQUlELENBQUMsSUFBSSxlQUFlLEVBQUU7VUFDeEIsSUFBSXBHLFFBQVEsQ0FBQ3FHLENBQUMsQ0FBQyxFQUFFO1lBQ2YsTUFBTXNCLFFBQVEsR0FBRyxJQUFJQyxNQUFNLENBQUMsdUJBQXVCLENBQUM7WUFDcER2QixDQUFDLEdBQUdBLENBQUMsQ0FBQ3dCLE9BQU8sQ0FBQ0YsUUFBUSxFQUFFLHdCQUF3QixDQUFDO1VBQ25EO1FBQ0Y7UUFDQUgsU0FBUyxDQUFDTSxLQUFLLENBQUUsR0FBRTFCLENBQUUsS0FBSUMsQ0FBRSxJQUFHLENBQUM7TUFDakMsQ0FBQyxDQUFDO01BQ0ZtQixTQUFTLENBQUNNLEtBQUssQ0FBQyxJQUFJLENBQUM7SUFDdkIsQ0FBQztJQUNETixTQUFTLENBQUNNLEtBQUssQ0FBRSxZQUFXbEQsVUFBVSxDQUFDa0IsTUFBTyxJQUFHbEIsVUFBVSxDQUFDbkgsSUFBSyxJQUFHLENBQUM7SUFDckVnSyxVQUFVLENBQUM3QyxVQUFVLENBQUNtQixPQUFPLENBQUM7SUFDOUIsSUFBSXVCLFFBQVEsRUFBRTtNQUNaLElBQUksQ0FBQ0UsU0FBUyxDQUFDTSxLQUFLLENBQUUsYUFBWVIsUUFBUSxDQUFDUyxVQUFXLElBQUcsQ0FBQztNQUMxRE4sVUFBVSxDQUFDSCxRQUFRLENBQUN2QixPQUF5QixDQUFDO0lBQ2hEO0lBQ0EsSUFBSXdCLEdBQUcsRUFBRTtNQUNQQyxTQUFTLENBQUNNLEtBQUssQ0FBQyxlQUFlLENBQUM7TUFDaEMsTUFBTUUsT0FBTyxHQUFHQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ1gsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7TUFDL0NDLFNBQVMsQ0FBQ00sS0FBSyxDQUFFLEdBQUVFLE9BQVEsSUFBRyxDQUFDO0lBQ2pDO0VBQ0Y7O0VBRUE7QUFDRjtBQUNBO0VBQ1NHLE9BQU9BLENBQUN6SyxNQUF3QixFQUFFO0lBQ3ZDLElBQUksQ0FBQ0EsTUFBTSxFQUFFO01BQ1hBLE1BQU0sR0FBR21HLE9BQU8sQ0FBQ3VFLE1BQU07SUFDekI7SUFDQSxJQUFJLENBQUNaLFNBQVMsR0FBRzlKLE1BQU07RUFDekI7O0VBRUE7QUFDRjtBQUNBO0VBQ1MySyxRQUFRQSxDQUFBLEVBQUc7SUFDaEIsSUFBSSxDQUFDYixTQUFTLEdBQUcxRSxTQUFTO0VBQzVCOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0UsTUFBTXdGLGdCQUFnQkEsQ0FDcEJyRCxPQUFzQixFQUN0QnNELE9BQWUsR0FBRyxFQUFFLEVBQ3BCQyxhQUF1QixHQUFHLENBQUMsR0FBRyxDQUFDLEVBQy9CbkYsTUFBTSxHQUFHLEVBQUUsRUFDb0I7SUFDL0IsSUFBSSxDQUFDdkQsUUFBUSxDQUFDbUYsT0FBTyxDQUFDLEVBQUU7TUFDdEIsTUFBTSxJQUFJQyxTQUFTLENBQUMsb0NBQW9DLENBQUM7SUFDM0Q7SUFDQSxJQUFJLENBQUNsRixRQUFRLENBQUN1SSxPQUFPLENBQUMsSUFBSSxDQUFDekksUUFBUSxDQUFDeUksT0FBTyxDQUFDLEVBQUU7TUFDNUM7TUFDQSxNQUFNLElBQUlyRCxTQUFTLENBQUMsZ0RBQWdELENBQUM7SUFDdkU7SUFDQXNELGFBQWEsQ0FBQ2QsT0FBTyxDQUFFSyxVQUFVLElBQUs7TUFDcEMsSUFBSSxDQUFDbEksUUFBUSxDQUFDa0ksVUFBVSxDQUFDLEVBQUU7UUFDekIsTUFBTSxJQUFJN0MsU0FBUyxDQUFDLHVDQUF1QyxDQUFDO01BQzlEO0lBQ0YsQ0FBQyxDQUFDO0lBQ0YsSUFBSSxDQUFDbEYsUUFBUSxDQUFDcUQsTUFBTSxDQUFDLEVBQUU7TUFDckIsTUFBTSxJQUFJNkIsU0FBUyxDQUFDLG1DQUFtQyxDQUFDO0lBQzFEO0lBQ0EsSUFBSSxDQUFDRCxPQUFPLENBQUNjLE9BQU8sRUFBRTtNQUNwQmQsT0FBTyxDQUFDYyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCO0lBQ0EsSUFBSWQsT0FBTyxDQUFDYSxNQUFNLEtBQUssTUFBTSxJQUFJYixPQUFPLENBQUNhLE1BQU0sS0FBSyxLQUFLLElBQUliLE9BQU8sQ0FBQ2EsTUFBTSxLQUFLLFFBQVEsRUFBRTtNQUN4RmIsT0FBTyxDQUFDYyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsR0FBR3dDLE9BQU8sQ0FBQ0UsTUFBTSxDQUFDOUIsUUFBUSxDQUFDLENBQUM7SUFDL0Q7SUFDQSxNQUFNK0IsU0FBUyxHQUFHLElBQUksQ0FBQ2hFLFlBQVksR0FBRzVELFFBQVEsQ0FBQ3lILE9BQU8sQ0FBQyxHQUFHLEVBQUU7SUFDNUQsT0FBTyxJQUFJLENBQUNJLHNCQUFzQixDQUFDMUQsT0FBTyxFQUFFc0QsT0FBTyxFQUFFRyxTQUFTLEVBQUVGLGFBQWEsRUFBRW5GLE1BQU0sQ0FBQztFQUN4Rjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0UsTUFBTXVGLG9CQUFvQkEsQ0FDeEIzRCxPQUFzQixFQUN0QnNELE9BQWUsR0FBRyxFQUFFLEVBQ3BCTSxXQUFxQixHQUFHLENBQUMsR0FBRyxDQUFDLEVBQzdCeEYsTUFBTSxHQUFHLEVBQUUsRUFDZ0M7SUFDM0MsTUFBTXlGLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQ1IsZ0JBQWdCLENBQUNyRCxPQUFPLEVBQUVzRCxPQUFPLEVBQUVNLFdBQVcsRUFBRXhGLE1BQU0sQ0FBQztJQUM5RSxNQUFNakMsYUFBYSxDQUFDMEgsR0FBRyxDQUFDO0lBQ3hCLE9BQU9BLEdBQUc7RUFDWjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRSxNQUFNSCxzQkFBc0JBLENBQzFCMUQsT0FBc0IsRUFDdEI4RCxJQUE4QixFQUM5QkwsU0FBaUIsRUFDakJHLFdBQXFCLEVBQ3JCeEYsTUFBYyxFQUNpQjtJQUMvQixJQUFJLENBQUN2RCxRQUFRLENBQUNtRixPQUFPLENBQUMsRUFBRTtNQUN0QixNQUFNLElBQUlDLFNBQVMsQ0FBQyxvQ0FBb0MsQ0FBQztJQUMzRDtJQUNBLElBQUksRUFBRThELE1BQU0sQ0FBQ0MsUUFBUSxDQUFDRixJQUFJLENBQUMsSUFBSSxPQUFPQSxJQUFJLEtBQUssUUFBUSxJQUFJaEosZ0JBQWdCLENBQUNnSixJQUFJLENBQUMsQ0FBQyxFQUFFO01BQ2xGLE1BQU0sSUFBSTdLLE1BQU0sQ0FBQ2tGLG9CQUFvQixDQUNsQyw2REFBNEQsT0FBTzJGLElBQUssVUFDM0UsQ0FBQztJQUNIO0lBQ0EsSUFBSSxDQUFDL0ksUUFBUSxDQUFDMEksU0FBUyxDQUFDLEVBQUU7TUFDeEIsTUFBTSxJQUFJeEQsU0FBUyxDQUFDLHNDQUFzQyxDQUFDO0lBQzdEO0lBQ0EyRCxXQUFXLENBQUNuQixPQUFPLENBQUVLLFVBQVUsSUFBSztNQUNsQyxJQUFJLENBQUNsSSxRQUFRLENBQUNrSSxVQUFVLENBQUMsRUFBRTtRQUN6QixNQUFNLElBQUk3QyxTQUFTLENBQUMsdUNBQXVDLENBQUM7TUFDOUQ7SUFDRixDQUFDLENBQUM7SUFDRixJQUFJLENBQUNsRixRQUFRLENBQUNxRCxNQUFNLENBQUMsRUFBRTtNQUNyQixNQUFNLElBQUk2QixTQUFTLENBQUMsbUNBQW1DLENBQUM7SUFDMUQ7SUFDQTtJQUNBLElBQUksQ0FBQyxJQUFJLENBQUNSLFlBQVksSUFBSWdFLFNBQVMsQ0FBQ0QsTUFBTSxLQUFLLENBQUMsRUFBRTtNQUNoRCxNQUFNLElBQUl2SyxNQUFNLENBQUNrRixvQkFBb0IsQ0FBRSxnRUFBK0QsQ0FBQztJQUN6RztJQUNBO0lBQ0EsSUFBSSxJQUFJLENBQUNzQixZQUFZLElBQUlnRSxTQUFTLENBQUNELE1BQU0sS0FBSyxFQUFFLEVBQUU7TUFDaEQsTUFBTSxJQUFJdkssTUFBTSxDQUFDa0Ysb0JBQW9CLENBQUUsdUJBQXNCc0YsU0FBVSxFQUFDLENBQUM7SUFDM0U7SUFFQSxNQUFNLElBQUksQ0FBQzdCLG9CQUFvQixDQUFDLENBQUM7O0lBRWpDO0lBQ0F4RCxNQUFNLEdBQUdBLE1BQU0sS0FBSyxNQUFNLElBQUksQ0FBQzZGLG9CQUFvQixDQUFDakUsT0FBTyxDQUFDSSxVQUFXLENBQUMsQ0FBQztJQUV6RSxNQUFNVCxVQUFVLEdBQUcsSUFBSSxDQUFDZ0IsaUJBQWlCLENBQUM7TUFBRSxHQUFHWCxPQUFPO01BQUU1QjtJQUFPLENBQUMsQ0FBQztJQUNqRSxJQUFJLENBQUMsSUFBSSxDQUFDaUIsU0FBUyxFQUFFO01BQ25CO01BQ0EsSUFBSSxDQUFDLElBQUksQ0FBQ0ksWUFBWSxFQUFFO1FBQ3RCZ0UsU0FBUyxHQUFHLGtCQUFrQjtNQUNoQztNQUNBLE1BQU1TLElBQUksR0FBRyxJQUFJQyxJQUFJLENBQUMsQ0FBQztNQUN2QnhFLFVBQVUsQ0FBQ21CLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBR3hGLFlBQVksQ0FBQzRJLElBQUksQ0FBQztNQUNyRHZFLFVBQVUsQ0FBQ21CLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHMkMsU0FBUztNQUN0RCxJQUFJLElBQUksQ0FBQ3JFLFlBQVksRUFBRTtRQUNyQk8sVUFBVSxDQUFDbUIsT0FBTyxDQUFDLHNCQUFzQixDQUFDLEdBQUcsSUFBSSxDQUFDMUIsWUFBWTtNQUNoRTtNQUNBTyxVQUFVLENBQUNtQixPQUFPLENBQUNzRCxhQUFhLEdBQUd6SyxNQUFNLENBQUNnRyxVQUFVLEVBQUUsSUFBSSxDQUFDVCxTQUFTLEVBQUUsSUFBSSxDQUFDQyxTQUFTLEVBQUVmLE1BQU0sRUFBRThGLElBQUksRUFBRVQsU0FBUyxDQUFDO0lBQ2hIO0lBRUEsTUFBTXBCLFFBQVEsR0FBRyxNQUFNbkcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDc0MsU0FBUyxFQUFFbUIsVUFBVSxFQUFFbUUsSUFBSSxDQUFDO0lBQ3pFLElBQUksQ0FBQ3pCLFFBQVEsQ0FBQ1MsVUFBVSxFQUFFO01BQ3hCLE1BQU0sSUFBSWhGLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQztJQUM1RDtJQUVBLElBQUksQ0FBQzhGLFdBQVcsQ0FBQ3RELFFBQVEsQ0FBQytCLFFBQVEsQ0FBQ1MsVUFBVSxDQUFDLEVBQUU7TUFDOUM7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBLE9BQU8sSUFBSSxDQUFDdkQsU0FBUyxDQUFDUyxPQUFPLENBQUNJLFVBQVUsQ0FBRTtNQUUxQyxNQUFNa0MsR0FBRyxHQUFHLE1BQU16RixVQUFVLENBQUN3SCxrQkFBa0IsQ0FBQ2hDLFFBQVEsQ0FBQztNQUN6RCxJQUFJLENBQUNELE9BQU8sQ0FBQ3pDLFVBQVUsRUFBRTBDLFFBQVEsRUFBRUMsR0FBRyxDQUFDO01BQ3ZDLE1BQU1BLEdBQUc7SUFDWDtJQUVBLElBQUksQ0FBQ0YsT0FBTyxDQUFDekMsVUFBVSxFQUFFMEMsUUFBUSxDQUFDO0lBRWxDLE9BQU9BLFFBQVE7RUFDakI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRSxNQUFnQjRCLG9CQUFvQkEsQ0FBQzdELFVBQWtCLEVBQW1CO0lBQ3hFLElBQUksQ0FBQ3BGLGlCQUFpQixDQUFDb0YsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJbkgsTUFBTSxDQUFDcUwsc0JBQXNCLENBQUUseUJBQXdCbEUsVUFBVyxFQUFDLENBQUM7SUFDaEY7O0lBRUE7SUFDQSxJQUFJLElBQUksQ0FBQ2hDLE1BQU0sRUFBRTtNQUNmLE9BQU8sSUFBSSxDQUFDQSxNQUFNO0lBQ3BCO0lBRUEsTUFBTW1HLE1BQU0sR0FBRyxJQUFJLENBQUNoRixTQUFTLENBQUNhLFVBQVUsQ0FBQztJQUN6QyxJQUFJbUUsTUFBTSxFQUFFO01BQ1YsT0FBT0EsTUFBTTtJQUNmO0lBRUEsTUFBTUMsa0JBQWtCLEdBQUcsTUFBT25DLFFBQThCLElBQUs7TUFDbkUsTUFBTXlCLElBQUksR0FBRyxNQUFNekgsWUFBWSxDQUFDZ0csUUFBUSxDQUFDO01BQ3pDLE1BQU1qRSxNQUFNLEdBQUd2QixVQUFVLENBQUM0SCxpQkFBaUIsQ0FBQ1gsSUFBSSxDQUFDLElBQUkxSyxjQUFjO01BQ25FLElBQUksQ0FBQ21HLFNBQVMsQ0FBQ2EsVUFBVSxDQUFDLEdBQUdoQyxNQUFNO01BQ25DLE9BQU9BLE1BQU07SUFDZixDQUFDO0lBRUQsTUFBTXlDLE1BQU0sR0FBRyxLQUFLO0lBQ3BCLE1BQU1FLEtBQUssR0FBRyxVQUFVO0lBQ3hCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQSxNQUFNOUIsU0FBUyxHQUFHLElBQUksQ0FBQ0EsU0FBUyxJQUFJLENBQUNyRyxTQUFTO0lBQzlDLElBQUl3RixNQUFjO0lBQ2xCLElBQUk7TUFDRixNQUFNeUYsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDUixnQkFBZ0IsQ0FBQztRQUFFeEMsTUFBTTtRQUFFVCxVQUFVO1FBQUVXLEtBQUs7UUFBRTlCO01BQVUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFN0YsY0FBYyxDQUFDO01BQzVHLE9BQU9vTCxrQkFBa0IsQ0FBQ1gsR0FBRyxDQUFDO0lBQ2hDLENBQUMsQ0FBQyxPQUFPM0IsQ0FBQyxFQUFFO01BQ1Y7TUFDQSxJQUFJQSxDQUFDLFlBQVlqSixNQUFNLENBQUN5TCxPQUFPLEVBQUU7UUFDL0IsTUFBTUMsT0FBTyxHQUFHekMsQ0FBQyxDQUFDMEMsSUFBSTtRQUN0QixNQUFNQyxTQUFTLEdBQUczQyxDQUFDLENBQUM5RCxNQUFNO1FBQzFCLElBQUl1RyxPQUFPLEtBQUssY0FBYyxJQUFJLENBQUNFLFNBQVMsRUFBRTtVQUM1QyxPQUFPekwsY0FBYztRQUN2QjtNQUNGO01BQ0E7TUFDQTtNQUNBLElBQUksRUFBRThJLENBQUMsQ0FBQzRDLElBQUksS0FBSyw4QkFBOEIsQ0FBQyxFQUFFO1FBQ2hELE1BQU01QyxDQUFDO01BQ1Q7TUFDQTtNQUNBOUQsTUFBTSxHQUFHOEQsQ0FBQyxDQUFDNkMsTUFBZ0I7TUFDM0IsSUFBSSxDQUFDM0csTUFBTSxFQUFFO1FBQ1gsTUFBTThELENBQUM7TUFDVDtJQUNGO0lBRUEsTUFBTTJCLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQ1IsZ0JBQWdCLENBQUM7TUFBRXhDLE1BQU07TUFBRVQsVUFBVTtNQUFFVyxLQUFLO01BQUU5QjtJQUFVLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRWIsTUFBTSxDQUFDO0lBQ3BHLE9BQU8sTUFBTW9HLGtCQUFrQixDQUFDWCxHQUFHLENBQUM7RUFDdEM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRW1CLFdBQVdBLENBQ1RoRixPQUFzQixFQUN0QnNELE9BQWUsR0FBRyxFQUFFLEVBQ3BCQyxhQUF1QixHQUFHLENBQUMsR0FBRyxDQUFDLEVBQy9CbkYsTUFBTSxHQUFHLEVBQUUsRUFDWDZHLGNBQXVCLEVBQ3ZCQyxFQUF1RCxFQUN2RDtJQUNBLElBQUlDLElBQW1DO0lBQ3ZDLElBQUlGLGNBQWMsRUFBRTtNQUNsQkUsSUFBSSxHQUFHLElBQUksQ0FBQzlCLGdCQUFnQixDQUFDckQsT0FBTyxFQUFFc0QsT0FBTyxFQUFFQyxhQUFhLEVBQUVuRixNQUFNLENBQUM7SUFDdkUsQ0FBQyxNQUFNO01BQ0w7TUFDQTtNQUNBK0csSUFBSSxHQUFHLElBQUksQ0FBQ3hCLG9CQUFvQixDQUFDM0QsT0FBTyxFQUFFc0QsT0FBTyxFQUFFQyxhQUFhLEVBQUVuRixNQUFNLENBQUM7SUFDM0U7SUFFQStHLElBQUksQ0FBQ0MsSUFBSSxDQUNOQyxNQUFNLElBQUtILEVBQUUsQ0FBQyxJQUFJLEVBQUVHLE1BQU0sQ0FBQyxFQUMzQi9DLEdBQUcsSUFBSztNQUNQO01BQ0E7TUFDQTRDLEVBQUUsQ0FBQzVDLEdBQUcsQ0FBQztJQUNULENBQ0YsQ0FBQztFQUNIOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFZ0QsaUJBQWlCQSxDQUNmdEYsT0FBc0IsRUFDdEJ2SCxNQUFnQyxFQUNoQ2dMLFNBQWlCLEVBQ2pCRyxXQUFxQixFQUNyQnhGLE1BQWMsRUFDZDZHLGNBQXVCLEVBQ3ZCQyxFQUF1RCxFQUN2RDtJQUNBLE1BQU1LLFFBQVEsR0FBRyxNQUFBQSxDQUFBLEtBQVk7TUFDM0IsTUFBTTFCLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQ0gsc0JBQXNCLENBQUMxRCxPQUFPLEVBQUV2SCxNQUFNLEVBQUVnTCxTQUFTLEVBQUVHLFdBQVcsRUFBRXhGLE1BQU0sQ0FBQztNQUM5RixJQUFJLENBQUM2RyxjQUFjLEVBQUU7UUFDbkIsTUFBTTlJLGFBQWEsQ0FBQzBILEdBQUcsQ0FBQztNQUMxQjtNQUVBLE9BQU9BLEdBQUc7SUFDWixDQUFDO0lBRUQwQixRQUFRLENBQUMsQ0FBQyxDQUFDSCxJQUFJLENBQ1pDLE1BQU0sSUFBS0gsRUFBRSxDQUFDLElBQUksRUFBRUcsTUFBTSxDQUFDO0lBQzVCO0lBQ0E7SUFDQy9DLEdBQUcsSUFBSzRDLEVBQUUsQ0FBQzVDLEdBQUcsQ0FDakIsQ0FBQztFQUNIOztFQUVBO0FBQ0Y7QUFDQTtFQUNFa0QsZUFBZUEsQ0FBQ3BGLFVBQWtCLEVBQUU4RSxFQUEwQyxFQUFFO0lBQzlFLE9BQU8sSUFBSSxDQUFDakIsb0JBQW9CLENBQUM3RCxVQUFVLENBQUMsQ0FBQ2dGLElBQUksQ0FDOUNDLE1BQU0sSUFBS0gsRUFBRSxDQUFDLElBQUksRUFBRUcsTUFBTSxDQUFDO0lBQzVCO0lBQ0E7SUFDQy9DLEdBQUcsSUFBSzRDLEVBQUUsQ0FBQzVDLEdBQUcsQ0FDakIsQ0FBQztFQUNIOztFQUVBOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ0UsTUFBTW1ELFVBQVVBLENBQUNyRixVQUFrQixFQUFFaEMsTUFBYyxHQUFHLEVBQUUsRUFBRXNILFFBQXdCLEVBQWlCO0lBQ2pHLElBQUksQ0FBQzFLLGlCQUFpQixDQUFDb0YsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJbkgsTUFBTSxDQUFDcUwsc0JBQXNCLENBQUMsdUJBQXVCLEdBQUdsRSxVQUFVLENBQUM7SUFDL0U7SUFDQTtJQUNBLElBQUl2RixRQUFRLENBQUN1RCxNQUFNLENBQUMsRUFBRTtNQUNwQnNILFFBQVEsR0FBR3RILE1BQU07TUFDakJBLE1BQU0sR0FBRyxFQUFFO0lBQ2I7SUFFQSxJQUFJLENBQUNyRCxRQUFRLENBQUNxRCxNQUFNLENBQUMsRUFBRTtNQUNyQixNQUFNLElBQUk2QixTQUFTLENBQUMsbUNBQW1DLENBQUM7SUFDMUQ7SUFDQSxJQUFJeUYsUUFBUSxJQUFJLENBQUM3SyxRQUFRLENBQUM2SyxRQUFRLENBQUMsRUFBRTtNQUNuQyxNQUFNLElBQUl6RixTQUFTLENBQUMscUNBQXFDLENBQUM7SUFDNUQ7SUFFQSxJQUFJcUQsT0FBTyxHQUFHLEVBQUU7O0lBRWhCO0lBQ0E7SUFDQSxJQUFJbEYsTUFBTSxJQUFJLElBQUksQ0FBQ0EsTUFBTSxFQUFFO01BQ3pCLElBQUlBLE1BQU0sS0FBSyxJQUFJLENBQUNBLE1BQU0sRUFBRTtRQUMxQixNQUFNLElBQUluRixNQUFNLENBQUNrRixvQkFBb0IsQ0FBRSxxQkFBb0IsSUFBSSxDQUFDQyxNQUFPLGVBQWNBLE1BQU8sRUFBQyxDQUFDO01BQ2hHO0lBQ0Y7SUFDQTtJQUNBO0lBQ0EsSUFBSUEsTUFBTSxJQUFJQSxNQUFNLEtBQUtoRixjQUFjLEVBQUU7TUFDdkNrSyxPQUFPLEdBQUd4RyxHQUFHLENBQUM2SSxXQUFXLENBQUM7UUFDeEJDLHlCQUF5QixFQUFFO1VBQ3pCQyxDQUFDLEVBQUU7WUFBRUMsS0FBSyxFQUFFO1VBQTBDLENBQUM7VUFDdkRDLGtCQUFrQixFQUFFM0g7UUFDdEI7TUFDRixDQUFDLENBQUM7SUFDSjtJQUNBLE1BQU15QyxNQUFNLEdBQUcsS0FBSztJQUNwQixNQUFNQyxPQUF1QixHQUFHLENBQUMsQ0FBQztJQUVsQyxJQUFJNEUsUUFBUSxJQUFJQSxRQUFRLENBQUNNLGFBQWEsRUFBRTtNQUN0Q2xGLE9BQU8sQ0FBQyxrQ0FBa0MsQ0FBQyxHQUFHLElBQUk7SUFDcEQ7O0lBRUE7SUFDQSxNQUFNbUYsV0FBVyxHQUFHLElBQUksQ0FBQzdILE1BQU0sSUFBSUEsTUFBTSxJQUFJaEYsY0FBYztJQUUzRCxNQUFNOE0sVUFBeUIsR0FBRztNQUFFckYsTUFBTTtNQUFFVCxVQUFVO01BQUVVO0lBQVEsQ0FBQztJQUVqRSxJQUFJO01BQ0YsTUFBTSxJQUFJLENBQUM2QyxvQkFBb0IsQ0FBQ3VDLFVBQVUsRUFBRTVDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFMkMsV0FBVyxDQUFDO0lBQzFFLENBQUMsQ0FBQyxPQUFPM0QsR0FBWSxFQUFFO01BQ3JCLElBQUlsRSxNQUFNLEtBQUssRUFBRSxJQUFJQSxNQUFNLEtBQUtoRixjQUFjLEVBQUU7UUFDOUMsSUFBSWtKLEdBQUcsWUFBWXJKLE1BQU0sQ0FBQ3lMLE9BQU8sRUFBRTtVQUNqQyxNQUFNQyxPQUFPLEdBQUdyQyxHQUFHLENBQUNzQyxJQUFJO1VBQ3hCLE1BQU1DLFNBQVMsR0FBR3ZDLEdBQUcsQ0FBQ2xFLE1BQU07VUFDNUIsSUFBSXVHLE9BQU8sS0FBSyw4QkFBOEIsSUFBSUUsU0FBUyxLQUFLLEVBQUUsRUFBRTtZQUNsRTtZQUNBLE1BQU0sSUFBSSxDQUFDbEIsb0JBQW9CLENBQUN1QyxVQUFVLEVBQUU1QyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRXFCLE9BQU8sQ0FBQztVQUN0RTtRQUNGO01BQ0Y7TUFDQSxNQUFNckMsR0FBRztJQUNYO0VBQ0Y7O0VBRUE7QUFDRjtBQUNBO0VBQ0UsTUFBTTZELFlBQVlBLENBQUMvRixVQUFrQixFQUFvQjtJQUN2RCxJQUFJLENBQUNwRixpQkFBaUIsQ0FBQ29GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSW5ILE1BQU0sQ0FBQ3FMLHNCQUFzQixDQUFDLHVCQUF1QixHQUFHbEUsVUFBVSxDQUFDO0lBQy9FO0lBQ0EsTUFBTVMsTUFBTSxHQUFHLE1BQU07SUFDckIsSUFBSTtNQUNGLE1BQU0sSUFBSSxDQUFDOEMsb0JBQW9CLENBQUM7UUFBRTlDLE1BQU07UUFBRVQ7TUFBVyxDQUFDLENBQUM7SUFDekQsQ0FBQyxDQUFDLE9BQU9rQyxHQUFHLEVBQUU7TUFDWjtNQUNBLElBQUlBLEdBQUcsQ0FBQ3NDLElBQUksS0FBSyxjQUFjLElBQUl0QyxHQUFHLENBQUNzQyxJQUFJLEtBQUssVUFBVSxFQUFFO1FBQzFELE9BQU8sS0FBSztNQUNkO01BQ0EsTUFBTXRDLEdBQUc7SUFDWDtJQUVBLE9BQU8sSUFBSTtFQUNiOztFQUlBO0FBQ0Y7QUFDQTs7RUFHRSxNQUFNOEQsWUFBWUEsQ0FBQ2hHLFVBQWtCLEVBQWlCO0lBQ3BELElBQUksQ0FBQ3BGLGlCQUFpQixDQUFDb0YsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJbkgsTUFBTSxDQUFDcUwsc0JBQXNCLENBQUMsdUJBQXVCLEdBQUdsRSxVQUFVLENBQUM7SUFDL0U7SUFDQSxNQUFNUyxNQUFNLEdBQUcsUUFBUTtJQUN2QixNQUFNLElBQUksQ0FBQzhDLG9CQUFvQixDQUFDO01BQUU5QyxNQUFNO01BQUVUO0lBQVcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xFLE9BQU8sSUFBSSxDQUFDYixTQUFTLENBQUNhLFVBQVUsQ0FBQztFQUNuQzs7RUFFQTtBQUNGO0FBQ0E7RUFDRSxNQUFNaUcsU0FBU0EsQ0FBQ2pHLFVBQWtCLEVBQUVDLFVBQWtCLEVBQUVpRyxPQUF1QixFQUE0QjtJQUN6RyxJQUFJLENBQUN0TCxpQkFBaUIsQ0FBQ29GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSW5ILE1BQU0sQ0FBQ3FMLHNCQUFzQixDQUFDLHVCQUF1QixHQUFHbEUsVUFBVSxDQUFDO0lBQy9FO0lBQ0EsSUFBSSxDQUFDbEYsaUJBQWlCLENBQUNtRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUlwSCxNQUFNLENBQUNzTixzQkFBc0IsQ0FBRSx3QkFBdUJsRyxVQUFXLEVBQUMsQ0FBQztJQUMvRTtJQUNBLE9BQU8sSUFBSSxDQUFDbUcsZ0JBQWdCLENBQUNwRyxVQUFVLEVBQUVDLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFaUcsT0FBTyxDQUFDO0VBQ3JFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRSxNQUFNRSxnQkFBZ0JBLENBQ3BCcEcsVUFBa0IsRUFDbEJDLFVBQWtCLEVBQ2xCb0csTUFBYyxFQUNkakQsTUFBTSxHQUFHLENBQUMsRUFDVjhDLE9BQXVCLEVBQ0c7SUFDMUIsSUFBSSxDQUFDdEwsaUJBQWlCLENBQUNvRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUluSCxNQUFNLENBQUNxTCxzQkFBc0IsQ0FBQyx1QkFBdUIsR0FBR2xFLFVBQVUsQ0FBQztJQUMvRTtJQUNBLElBQUksQ0FBQ2xGLGlCQUFpQixDQUFDbUYsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJcEgsTUFBTSxDQUFDc04sc0JBQXNCLENBQUUsd0JBQXVCbEcsVUFBVyxFQUFDLENBQUM7SUFDL0U7SUFDQSxJQUFJLENBQUN6RixRQUFRLENBQUM2TCxNQUFNLENBQUMsRUFBRTtNQUNyQixNQUFNLElBQUl4RyxTQUFTLENBQUMsbUNBQW1DLENBQUM7SUFDMUQ7SUFDQSxJQUFJLENBQUNyRixRQUFRLENBQUM0SSxNQUFNLENBQUMsRUFBRTtNQUNyQixNQUFNLElBQUl2RCxTQUFTLENBQUMsbUNBQW1DLENBQUM7SUFDMUQ7SUFFQSxJQUFJeUcsS0FBSyxHQUFHLEVBQUU7SUFDZCxJQUFJRCxNQUFNLElBQUlqRCxNQUFNLEVBQUU7TUFDcEIsSUFBSWlELE1BQU0sRUFBRTtRQUNWQyxLQUFLLEdBQUksU0FBUSxDQUFDRCxNQUFPLEdBQUU7TUFDN0IsQ0FBQyxNQUFNO1FBQ0xDLEtBQUssR0FBRyxVQUFVO1FBQ2xCRCxNQUFNLEdBQUcsQ0FBQztNQUNaO01BQ0EsSUFBSWpELE1BQU0sRUFBRTtRQUNWa0QsS0FBSyxJQUFLLEdBQUUsQ0FBQ2xELE1BQU0sR0FBR2lELE1BQU0sR0FBRyxDQUFFLEVBQUM7TUFDcEM7SUFDRjtJQUVBLElBQUkxRixLQUFLLEdBQUcsRUFBRTtJQUNkLElBQUlELE9BQXVCLEdBQUc7TUFDNUIsSUFBSTRGLEtBQUssS0FBSyxFQUFFLElBQUk7UUFBRUE7TUFBTSxDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFJSixPQUFPLEVBQUU7TUFDWCxNQUFNSyxVQUFrQyxHQUFHO1FBQ3pDLElBQUlMLE9BQU8sQ0FBQ00sb0JBQW9CLElBQUk7VUFDbEMsaURBQWlELEVBQUVOLE9BQU8sQ0FBQ007UUFDN0QsQ0FBQyxDQUFDO1FBQ0YsSUFBSU4sT0FBTyxDQUFDTyxjQUFjLElBQUk7VUFBRSwyQ0FBMkMsRUFBRVAsT0FBTyxDQUFDTztRQUFlLENBQUMsQ0FBQztRQUN0RyxJQUFJUCxPQUFPLENBQUNRLGlCQUFpQixJQUFJO1VBQy9CLCtDQUErQyxFQUFFUixPQUFPLENBQUNRO1FBQzNELENBQUM7TUFDSCxDQUFDO01BQ0QvRixLQUFLLEdBQUdqSSxFQUFFLENBQUNtSyxTQUFTLENBQUNxRCxPQUFPLENBQUM7TUFDN0J4RixPQUFPLEdBQUc7UUFDUixHQUFHckYsZUFBZSxDQUFDa0wsVUFBVSxDQUFDO1FBQzlCLEdBQUc3RjtNQUNMLENBQUM7SUFDSDtJQUVBLE1BQU1pRyxtQkFBbUIsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUNqQyxJQUFJTCxLQUFLLEVBQUU7TUFDVEssbUJBQW1CLENBQUNDLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDL0I7SUFDQSxNQUFNbkcsTUFBTSxHQUFHLEtBQUs7SUFFcEIsT0FBTyxNQUFNLElBQUksQ0FBQ3dDLGdCQUFnQixDQUFDO01BQUV4QyxNQUFNO01BQUVULFVBQVU7TUFBRUMsVUFBVTtNQUFFUyxPQUFPO01BQUVDO0lBQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRWdHLG1CQUFtQixDQUFDO0VBQ2pIOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFLE1BQU1FLFVBQVVBLENBQUM3RyxVQUFrQixFQUFFQyxVQUFrQixFQUFFNkcsUUFBZ0IsRUFBRVosT0FBdUIsRUFBaUI7SUFDakg7SUFDQSxJQUFJLENBQUN0TCxpQkFBaUIsQ0FBQ29GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSW5ILE1BQU0sQ0FBQ3FMLHNCQUFzQixDQUFDLHVCQUF1QixHQUFHbEUsVUFBVSxDQUFDO0lBQy9FO0lBQ0EsSUFBSSxDQUFDbEYsaUJBQWlCLENBQUNtRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUlwSCxNQUFNLENBQUNzTixzQkFBc0IsQ0FBRSx3QkFBdUJsRyxVQUFXLEVBQUMsQ0FBQztJQUMvRTtJQUNBLElBQUksQ0FBQ3RGLFFBQVEsQ0FBQ21NLFFBQVEsQ0FBQyxFQUFFO01BQ3ZCLE1BQU0sSUFBSWpILFNBQVMsQ0FBQyxxQ0FBcUMsQ0FBQztJQUM1RDtJQUVBLE1BQU1rSCxpQkFBaUIsR0FBRyxNQUFBQSxDQUFBLEtBQTZCO01BQ3JELElBQUlDLGNBQStCO01BQ25DLE1BQU1DLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQ0MsVUFBVSxDQUFDbEgsVUFBVSxFQUFFQyxVQUFVLEVBQUVpRyxPQUFPLENBQUM7TUFDdEUsTUFBTWlCLFdBQVcsR0FBR3hELE1BQU0sQ0FBQ3lELElBQUksQ0FBQ0gsT0FBTyxDQUFDSSxJQUFJLENBQUMsQ0FBQy9GLFFBQVEsQ0FBQyxRQUFRLENBQUM7TUFDaEUsTUFBTWdHLFFBQVEsR0FBSSxHQUFFUixRQUFTLElBQUdLLFdBQVksYUFBWTtNQUV4RCxNQUFNM04sR0FBRyxDQUFDK04sS0FBSyxDQUFDblAsSUFBSSxDQUFDb1AsT0FBTyxDQUFDVixRQUFRLENBQUMsRUFBRTtRQUFFVyxTQUFTLEVBQUU7TUFBSyxDQUFDLENBQUM7TUFFNUQsSUFBSXBCLE1BQU0sR0FBRyxDQUFDO01BQ2QsSUFBSTtRQUNGLE1BQU1xQixLQUFLLEdBQUcsTUFBTWxPLEdBQUcsQ0FBQ21PLElBQUksQ0FBQ0wsUUFBUSxDQUFDO1FBQ3RDLElBQUlMLE9BQU8sQ0FBQ1csSUFBSSxLQUFLRixLQUFLLENBQUNFLElBQUksRUFBRTtVQUMvQixPQUFPTixRQUFRO1FBQ2pCO1FBQ0FqQixNQUFNLEdBQUdxQixLQUFLLENBQUNFLElBQUk7UUFDbkJaLGNBQWMsR0FBRy9PLEVBQUUsQ0FBQzRQLGlCQUFpQixDQUFDUCxRQUFRLEVBQUU7VUFBRVEsS0FBSyxFQUFFO1FBQUksQ0FBQyxDQUFDO01BQ2pFLENBQUMsQ0FBQyxPQUFPaEcsQ0FBQyxFQUFFO1FBQ1YsSUFBSUEsQ0FBQyxZQUFZcEUsS0FBSyxJQUFLb0UsQ0FBQyxDQUFpQzBDLElBQUksS0FBSyxRQUFRLEVBQUU7VUFDOUU7VUFDQXdDLGNBQWMsR0FBRy9PLEVBQUUsQ0FBQzRQLGlCQUFpQixDQUFDUCxRQUFRLEVBQUU7WUFBRVEsS0FBSyxFQUFFO1VBQUksQ0FBQyxDQUFDO1FBQ2pFLENBQUMsTUFBTTtVQUNMO1VBQ0EsTUFBTWhHLENBQUM7UUFDVDtNQUNGO01BRUEsTUFBTWlHLGNBQWMsR0FBRyxNQUFNLElBQUksQ0FBQzNCLGdCQUFnQixDQUFDcEcsVUFBVSxFQUFFQyxVQUFVLEVBQUVvRyxNQUFNLEVBQUUsQ0FBQyxFQUFFSCxPQUFPLENBQUM7TUFFOUYsTUFBTXpNLGFBQWEsQ0FBQ3VPLFFBQVEsQ0FBQ0QsY0FBYyxFQUFFZixjQUFjLENBQUM7TUFDNUQsTUFBTVUsS0FBSyxHQUFHLE1BQU1sTyxHQUFHLENBQUNtTyxJQUFJLENBQUNMLFFBQVEsQ0FBQztNQUN0QyxJQUFJSSxLQUFLLENBQUNFLElBQUksS0FBS1gsT0FBTyxDQUFDVyxJQUFJLEVBQUU7UUFDL0IsT0FBT04sUUFBUTtNQUNqQjtNQUVBLE1BQU0sSUFBSTVKLEtBQUssQ0FBQyxzREFBc0QsQ0FBQztJQUN6RSxDQUFDO0lBRUQsTUFBTTRKLFFBQVEsR0FBRyxNQUFNUCxpQkFBaUIsQ0FBQyxDQUFDO0lBQzFDLE1BQU12TixHQUFHLENBQUN5TyxNQUFNLENBQUNYLFFBQVEsRUFBRVIsUUFBUSxDQUFDO0VBQ3RDOztFQUVBO0FBQ0Y7QUFDQTtFQUNFLE1BQU1JLFVBQVVBLENBQUNsSCxVQUFrQixFQUFFQyxVQUFrQixFQUFFaUksUUFBeUIsRUFBMkI7SUFDM0csTUFBTUMsVUFBVSxHQUFHRCxRQUFRLElBQUksQ0FBQyxDQUFDO0lBQ2pDLElBQUksQ0FBQ3ROLGlCQUFpQixDQUFDb0YsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJbkgsTUFBTSxDQUFDcUwsc0JBQXNCLENBQUMsdUJBQXVCLEdBQUdsRSxVQUFVLENBQUM7SUFDL0U7SUFDQSxJQUFJLENBQUNsRixpQkFBaUIsQ0FBQ21GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSXBILE1BQU0sQ0FBQ3NOLHNCQUFzQixDQUFFLHdCQUF1QmxHLFVBQVcsRUFBQyxDQUFDO0lBQy9FO0lBRUEsSUFBSSxDQUFDeEYsUUFBUSxDQUFDME4sVUFBVSxDQUFDLEVBQUU7TUFDekIsTUFBTSxJQUFJdFAsTUFBTSxDQUFDa0Ysb0JBQW9CLENBQUMscUNBQXFDLENBQUM7SUFDOUU7SUFFQSxNQUFNNEMsS0FBSyxHQUFHakksRUFBRSxDQUFDbUssU0FBUyxDQUFDc0YsVUFBVSxDQUFDO0lBQ3RDLE1BQU0xSCxNQUFNLEdBQUcsTUFBTTtJQUNyQixNQUFNZ0QsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDRixvQkFBb0IsQ0FBQztNQUFFOUMsTUFBTTtNQUFFVCxVQUFVO01BQUVDLFVBQVU7TUFBRVU7SUFBTSxDQUFDLENBQUM7SUFFdEYsT0FBTztNQUNMaUgsSUFBSSxFQUFFUSxRQUFRLENBQUMzRSxHQUFHLENBQUMvQyxPQUFPLENBQUMsZ0JBQWdCLENBQVcsQ0FBQztNQUN2RDJILFFBQVEsRUFBRXhPLGVBQWUsQ0FBQzRKLEdBQUcsQ0FBQy9DLE9BQXlCLENBQUM7TUFDeEQ0SCxZQUFZLEVBQUUsSUFBSXZFLElBQUksQ0FBQ04sR0FBRyxDQUFDL0MsT0FBTyxDQUFDLGVBQWUsQ0FBVyxDQUFDO01BQzlENkgsU0FBUyxFQUFFdE8sWUFBWSxDQUFDd0osR0FBRyxDQUFDL0MsT0FBeUIsQ0FBQztNQUN0RDJHLElBQUksRUFBRTlMLFlBQVksQ0FBQ2tJLEdBQUcsQ0FBQy9DLE9BQU8sQ0FBQzJHLElBQUk7SUFDckMsQ0FBQztFQUNIO0VBRUEsTUFBTW1CLFlBQVlBLENBQUN4SSxVQUFrQixFQUFFQyxVQUFrQixFQUFFd0ksVUFBMEIsRUFBaUI7SUFDcEcsSUFBSSxDQUFDN04saUJBQWlCLENBQUNvRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUluSCxNQUFNLENBQUNxTCxzQkFBc0IsQ0FBRSx3QkFBdUJsRSxVQUFXLEVBQUMsQ0FBQztJQUMvRTtJQUNBLElBQUksQ0FBQ2xGLGlCQUFpQixDQUFDbUYsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJcEgsTUFBTSxDQUFDc04sc0JBQXNCLENBQUUsd0JBQXVCbEcsVUFBVyxFQUFDLENBQUM7SUFDL0U7SUFFQSxJQUFJd0ksVUFBVSxJQUFJLENBQUNoTyxRQUFRLENBQUNnTyxVQUFVLENBQUMsRUFBRTtNQUN2QyxNQUFNLElBQUk1UCxNQUFNLENBQUNrRixvQkFBb0IsQ0FBQyx1Q0FBdUMsQ0FBQztJQUNoRjtJQUVBLE1BQU0wQyxNQUFNLEdBQUcsUUFBUTtJQUV2QixNQUFNQyxPQUF1QixHQUFHLENBQUMsQ0FBQztJQUNsQyxJQUFJK0gsVUFBVSxhQUFWQSxVQUFVLGVBQVZBLFVBQVUsQ0FBRUMsZ0JBQWdCLEVBQUU7TUFDaENoSSxPQUFPLENBQUMsbUNBQW1DLENBQUMsR0FBRyxJQUFJO0lBQ3JEO0lBQ0EsSUFBSStILFVBQVUsYUFBVkEsVUFBVSxlQUFWQSxVQUFVLENBQUVFLFdBQVcsRUFBRTtNQUMzQmpJLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLElBQUk7SUFDeEM7SUFFQSxNQUFNa0ksV0FBbUMsR0FBRyxDQUFDLENBQUM7SUFDOUMsSUFBSUgsVUFBVSxhQUFWQSxVQUFVLGVBQVZBLFVBQVUsQ0FBRUYsU0FBUyxFQUFFO01BQ3pCSyxXQUFXLENBQUNMLFNBQVMsR0FBSSxHQUFFRSxVQUFVLENBQUNGLFNBQVUsRUFBQztJQUNuRDtJQUNBLE1BQU01SCxLQUFLLEdBQUdqSSxFQUFFLENBQUNtSyxTQUFTLENBQUMrRixXQUFXLENBQUM7SUFFdkMsTUFBTSxJQUFJLENBQUNyRixvQkFBb0IsQ0FBQztNQUFFOUMsTUFBTTtNQUFFVCxVQUFVO01BQUVDLFVBQVU7TUFBRVMsT0FBTztNQUFFQztJQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDckc7O0VBRUE7O0VBRUFrSSxxQkFBcUJBLENBQ25CQyxNQUFjLEVBQ2RDLE1BQWMsRUFDZHRCLFNBQWtCLEVBQzBCO0lBQzVDLElBQUlzQixNQUFNLEtBQUt0TCxTQUFTLEVBQUU7TUFDeEJzTCxNQUFNLEdBQUcsRUFBRTtJQUNiO0lBQ0EsSUFBSXRCLFNBQVMsS0FBS2hLLFNBQVMsRUFBRTtNQUMzQmdLLFNBQVMsR0FBRyxLQUFLO0lBQ25CO0lBQ0EsSUFBSSxDQUFDN00saUJBQWlCLENBQUNrTyxNQUFNLENBQUMsRUFBRTtNQUM5QixNQUFNLElBQUlqUSxNQUFNLENBQUNxTCxzQkFBc0IsQ0FBQyx1QkFBdUIsR0FBRzRFLE1BQU0sQ0FBQztJQUMzRTtJQUNBLElBQUksQ0FBQzlOLGFBQWEsQ0FBQytOLE1BQU0sQ0FBQyxFQUFFO01BQzFCLE1BQU0sSUFBSWxRLE1BQU0sQ0FBQ21RLGtCQUFrQixDQUFFLG9CQUFtQkQsTUFBTyxFQUFDLENBQUM7SUFDbkU7SUFDQSxJQUFJLENBQUMxTyxTQUFTLENBQUNvTixTQUFTLENBQUMsRUFBRTtNQUN6QixNQUFNLElBQUk1SCxTQUFTLENBQUMsdUNBQXVDLENBQUM7SUFDOUQ7SUFDQSxNQUFNb0osU0FBUyxHQUFHeEIsU0FBUyxHQUFHLEVBQUUsR0FBRyxHQUFHO0lBQ3RDLElBQUl5QixTQUFTLEdBQUcsRUFBRTtJQUNsQixJQUFJQyxjQUFjLEdBQUcsRUFBRTtJQUN2QixNQUFNQyxPQUFrQixHQUFHLEVBQUU7SUFDN0IsSUFBSUMsS0FBSyxHQUFHLEtBQUs7O0lBRWpCO0lBQ0EsTUFBTUMsVUFBVSxHQUFHLElBQUlqUixNQUFNLENBQUNrUixRQUFRLENBQUM7TUFBRUMsVUFBVSxFQUFFO0lBQUssQ0FBQyxDQUFDO0lBQzVERixVQUFVLENBQUNHLEtBQUssR0FBRyxNQUFNO01BQ3ZCO01BQ0EsSUFBSUwsT0FBTyxDQUFDaEcsTUFBTSxFQUFFO1FBQ2xCLE9BQU9rRyxVQUFVLENBQUMxQyxJQUFJLENBQUN3QyxPQUFPLENBQUNNLEtBQUssQ0FBQyxDQUFDLENBQUM7TUFDekM7TUFDQSxJQUFJTCxLQUFLLEVBQUU7UUFDVCxPQUFPQyxVQUFVLENBQUMxQyxJQUFJLENBQUMsSUFBSSxDQUFDO01BQzlCO01BQ0EsSUFBSSxDQUFDK0MsMEJBQTBCLENBQUNiLE1BQU0sRUFBRUMsTUFBTSxFQUFFRyxTQUFTLEVBQUVDLGNBQWMsRUFBRUYsU0FBUyxDQUFDLENBQUNqRSxJQUFJLENBQ3ZGQyxNQUFNLElBQUs7UUFDVjtRQUNBO1FBQ0FBLE1BQU0sQ0FBQzJFLFFBQVEsQ0FBQ3ZILE9BQU8sQ0FBRTBHLE1BQU0sSUFBS0ssT0FBTyxDQUFDeEMsSUFBSSxDQUFDbUMsTUFBTSxDQUFDLENBQUM7UUFDekR6USxLQUFLLENBQUN1UixVQUFVLENBQ2Q1RSxNQUFNLENBQUNtRSxPQUFPLEVBQ2QsQ0FBQ1UsTUFBTSxFQUFFaEYsRUFBRSxLQUFLO1VBQ2Q7VUFDQTtVQUNBO1VBQ0EsSUFBSSxDQUFDaUYsU0FBUyxDQUFDakIsTUFBTSxFQUFFZ0IsTUFBTSxDQUFDRSxHQUFHLEVBQUVGLE1BQU0sQ0FBQ0csUUFBUSxDQUFDLENBQUNqRixJQUFJLENBQ3JEa0YsS0FBYSxJQUFLO1lBQ2pCO1lBQ0E7WUFDQUosTUFBTSxDQUFDbEMsSUFBSSxHQUFHc0MsS0FBSyxDQUFDQyxNQUFNLENBQUMsQ0FBQ0MsR0FBRyxFQUFFQyxJQUFJLEtBQUtELEdBQUcsR0FBR0MsSUFBSSxDQUFDekMsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUM3RHdCLE9BQU8sQ0FBQ3hDLElBQUksQ0FBQ2tELE1BQU0sQ0FBQztZQUNwQmhGLEVBQUUsQ0FBQyxDQUFDO1VBQ04sQ0FBQyxFQUNBNUMsR0FBVSxJQUFLNEMsRUFBRSxDQUFDNUMsR0FBRyxDQUN4QixDQUFDO1FBQ0gsQ0FBQyxFQUNBQSxHQUFHLElBQUs7VUFDUCxJQUFJQSxHQUFHLEVBQUU7WUFDUG9ILFVBQVUsQ0FBQ2dCLElBQUksQ0FBQyxPQUFPLEVBQUVwSSxHQUFHLENBQUM7WUFDN0I7VUFDRjtVQUNBLElBQUkrQyxNQUFNLENBQUNzRixXQUFXLEVBQUU7WUFDdEJyQixTQUFTLEdBQUdqRSxNQUFNLENBQUN1RixhQUFhO1lBQ2hDckIsY0FBYyxHQUFHbEUsTUFBTSxDQUFDd0Ysa0JBQWtCO1VBQzVDLENBQUMsTUFBTTtZQUNMcEIsS0FBSyxHQUFHLElBQUk7VUFDZDs7VUFFQTtVQUNBO1VBQ0FDLFVBQVUsQ0FBQ0csS0FBSyxDQUFDLENBQUM7UUFDcEIsQ0FDRixDQUFDO01BQ0gsQ0FBQyxFQUNBM0gsQ0FBQyxJQUFLO1FBQ0x3SCxVQUFVLENBQUNnQixJQUFJLENBQUMsT0FBTyxFQUFFeEksQ0FBQyxDQUFDO01BQzdCLENBQ0YsQ0FBQztJQUNILENBQUM7SUFDRCxPQUFPd0gsVUFBVTtFQUNuQjs7RUFFQTtBQUNGO0FBQ0E7RUFDRSxNQUFNSywwQkFBMEJBLENBQzlCM0osVUFBa0IsRUFDbEIrSSxNQUFjLEVBQ2RHLFNBQWlCLEVBQ2pCQyxjQUFzQixFQUN0QkYsU0FBaUIsRUFDYTtJQUM5QixJQUFJLENBQUNyTyxpQkFBaUIsQ0FBQ29GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSW5ILE1BQU0sQ0FBQ3FMLHNCQUFzQixDQUFDLHVCQUF1QixHQUFHbEUsVUFBVSxDQUFDO0lBQy9FO0lBQ0EsSUFBSSxDQUFDckYsUUFBUSxDQUFDb08sTUFBTSxDQUFDLEVBQUU7TUFDckIsTUFBTSxJQUFJbEosU0FBUyxDQUFDLG1DQUFtQyxDQUFDO0lBQzFEO0lBQ0EsSUFBSSxDQUFDbEYsUUFBUSxDQUFDdU8sU0FBUyxDQUFDLEVBQUU7TUFDeEIsTUFBTSxJQUFJckosU0FBUyxDQUFDLHNDQUFzQyxDQUFDO0lBQzdEO0lBQ0EsSUFBSSxDQUFDbEYsUUFBUSxDQUFDd08sY0FBYyxDQUFDLEVBQUU7TUFDN0IsTUFBTSxJQUFJdEosU0FBUyxDQUFDLDJDQUEyQyxDQUFDO0lBQ2xFO0lBQ0EsSUFBSSxDQUFDbEYsUUFBUSxDQUFDc08sU0FBUyxDQUFDLEVBQUU7TUFDeEIsTUFBTSxJQUFJcEosU0FBUyxDQUFDLHNDQUFzQyxDQUFDO0lBQzdEO0lBQ0EsTUFBTTZLLE9BQU8sR0FBRyxFQUFFO0lBQ2xCQSxPQUFPLENBQUM5RCxJQUFJLENBQUUsVUFBU2xMLFNBQVMsQ0FBQ3FOLE1BQU0sQ0FBRSxFQUFDLENBQUM7SUFDM0MyQixPQUFPLENBQUM5RCxJQUFJLENBQUUsYUFBWWxMLFNBQVMsQ0FBQ3VOLFNBQVMsQ0FBRSxFQUFDLENBQUM7SUFFakQsSUFBSUMsU0FBUyxFQUFFO01BQ2J3QixPQUFPLENBQUM5RCxJQUFJLENBQUUsY0FBYWxMLFNBQVMsQ0FBQ3dOLFNBQVMsQ0FBRSxFQUFDLENBQUM7SUFDcEQ7SUFDQSxJQUFJQyxjQUFjLEVBQUU7TUFDbEJ1QixPQUFPLENBQUM5RCxJQUFJLENBQUUsb0JBQW1CdUMsY0FBZSxFQUFDLENBQUM7SUFDcEQ7SUFFQSxNQUFNd0IsVUFBVSxHQUFHLElBQUk7SUFDdkJELE9BQU8sQ0FBQzlELElBQUksQ0FBRSxlQUFjK0QsVUFBVyxFQUFDLENBQUM7SUFDekNELE9BQU8sQ0FBQ0UsSUFBSSxDQUFDLENBQUM7SUFDZEYsT0FBTyxDQUFDRyxPQUFPLENBQUMsU0FBUyxDQUFDO0lBQzFCLElBQUlsSyxLQUFLLEdBQUcsRUFBRTtJQUNkLElBQUkrSixPQUFPLENBQUN0SCxNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQ3RCekMsS0FBSyxHQUFJLEdBQUUrSixPQUFPLENBQUNJLElBQUksQ0FBQyxHQUFHLENBQUUsRUFBQztJQUNoQztJQUNBLE1BQU1ySyxNQUFNLEdBQUcsS0FBSztJQUNwQixNQUFNZ0QsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDUixnQkFBZ0IsQ0FBQztNQUFFeEMsTUFBTTtNQUFFVCxVQUFVO01BQUVXO0lBQU0sQ0FBQyxDQUFDO0lBQ3RFLE1BQU0rQyxJQUFJLEdBQUcsTUFBTXpILFlBQVksQ0FBQ3dILEdBQUcsQ0FBQztJQUNwQyxPQUFPaEgsVUFBVSxDQUFDc08sa0JBQWtCLENBQUNySCxJQUFJLENBQUM7RUFDNUM7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRSxNQUFNc0gsMEJBQTBCQSxDQUFDaEwsVUFBa0IsRUFBRUMsVUFBa0IsRUFBRVMsT0FBdUIsRUFBbUI7SUFDakgsSUFBSSxDQUFDOUYsaUJBQWlCLENBQUNvRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUluSCxNQUFNLENBQUNxTCxzQkFBc0IsQ0FBQyx1QkFBdUIsR0FBR2xFLFVBQVUsQ0FBQztJQUMvRTtJQUNBLElBQUksQ0FBQ2xGLGlCQUFpQixDQUFDbUYsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJcEgsTUFBTSxDQUFDc04sc0JBQXNCLENBQUUsd0JBQXVCbEcsVUFBVyxFQUFDLENBQUM7SUFDL0U7SUFDQSxJQUFJLENBQUN4RixRQUFRLENBQUNpRyxPQUFPLENBQUMsRUFBRTtNQUN0QixNQUFNLElBQUk3SCxNQUFNLENBQUNzTixzQkFBc0IsQ0FBQyx3Q0FBd0MsQ0FBQztJQUNuRjtJQUNBLE1BQU0xRixNQUFNLEdBQUcsTUFBTTtJQUNyQixNQUFNRSxLQUFLLEdBQUcsU0FBUztJQUN2QixNQUFNOEMsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDUixnQkFBZ0IsQ0FBQztNQUFFeEMsTUFBTTtNQUFFVCxVQUFVO01BQUVDLFVBQVU7TUFBRVUsS0FBSztNQUFFRDtJQUFRLENBQUMsQ0FBQztJQUMzRixNQUFNZ0QsSUFBSSxHQUFHLE1BQU0xSCxZQUFZLENBQUN5SCxHQUFHLENBQUM7SUFDcEMsT0FBT3JILHNCQUFzQixDQUFDc0gsSUFBSSxDQUFDcEMsUUFBUSxDQUFDLENBQUMsQ0FBQztFQUNoRDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFLE1BQU0ySixvQkFBb0JBLENBQUNqTCxVQUFrQixFQUFFQyxVQUFrQixFQUFFZ0ssUUFBZ0IsRUFBaUI7SUFDbEcsTUFBTXhKLE1BQU0sR0FBRyxRQUFRO0lBQ3ZCLE1BQU1FLEtBQUssR0FBSSxZQUFXc0osUUFBUyxFQUFDO0lBRXBDLE1BQU1pQixjQUFjLEdBQUc7TUFBRXpLLE1BQU07TUFBRVQsVUFBVTtNQUFFQyxVQUFVLEVBQUVBLFVBQVU7TUFBRVU7SUFBTSxDQUFDO0lBQzVFLE1BQU0sSUFBSSxDQUFDNEMsb0JBQW9CLENBQUMySCxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDNUQ7RUFFQSxNQUFNQyxZQUFZQSxDQUFDbkwsVUFBa0IsRUFBRUMsVUFBa0IsRUFBK0I7SUFBQSxJQUFBbUwsYUFBQTtJQUN0RixJQUFJLENBQUN4USxpQkFBaUIsQ0FBQ29GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSW5ILE1BQU0sQ0FBQ3FMLHNCQUFzQixDQUFDLHVCQUF1QixHQUFHbEUsVUFBVSxDQUFDO0lBQy9FO0lBQ0EsSUFBSSxDQUFDbEYsaUJBQWlCLENBQUNtRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUlwSCxNQUFNLENBQUNzTixzQkFBc0IsQ0FBRSx3QkFBdUJsRyxVQUFXLEVBQUMsQ0FBQztJQUMvRTtJQUVBLElBQUlvTCxZQUFnRTtJQUNwRSxJQUFJbkMsU0FBUyxHQUFHLEVBQUU7SUFDbEIsSUFBSUMsY0FBYyxHQUFHLEVBQUU7SUFDdkIsU0FBUztNQUNQLE1BQU1sRSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMwRSwwQkFBMEIsQ0FBQzNKLFVBQVUsRUFBRUMsVUFBVSxFQUFFaUosU0FBUyxFQUFFQyxjQUFjLEVBQUUsRUFBRSxDQUFDO01BQzNHLEtBQUssTUFBTVcsTUFBTSxJQUFJN0UsTUFBTSxDQUFDbUUsT0FBTyxFQUFFO1FBQ25DLElBQUlVLE1BQU0sQ0FBQ0UsR0FBRyxLQUFLL0osVUFBVSxFQUFFO1VBQzdCLElBQUksQ0FBQ29MLFlBQVksSUFBSXZCLE1BQU0sQ0FBQ3dCLFNBQVMsQ0FBQ0MsT0FBTyxDQUFDLENBQUMsR0FBR0YsWUFBWSxDQUFDQyxTQUFTLENBQUNDLE9BQU8sQ0FBQyxDQUFDLEVBQUU7WUFDbEZGLFlBQVksR0FBR3ZCLE1BQU07VUFDdkI7UUFDRjtNQUNGO01BQ0EsSUFBSTdFLE1BQU0sQ0FBQ3NGLFdBQVcsRUFBRTtRQUN0QnJCLFNBQVMsR0FBR2pFLE1BQU0sQ0FBQ3VGLGFBQWE7UUFDaENyQixjQUFjLEdBQUdsRSxNQUFNLENBQUN3RixrQkFBa0I7UUFDMUM7TUFDRjtNQUVBO0lBQ0Y7SUFDQSxRQUFBVyxhQUFBLEdBQU9DLFlBQVksY0FBQUQsYUFBQSx1QkFBWkEsYUFBQSxDQUFjbkIsUUFBUTtFQUMvQjs7RUFFQTtBQUNGO0FBQ0E7RUFDRSxNQUFNdUIsdUJBQXVCQSxDQUMzQnhMLFVBQWtCLEVBQ2xCQyxVQUFrQixFQUNsQmdLLFFBQWdCLEVBQ2hCd0IsS0FHRyxFQUNrRDtJQUNyRCxJQUFJLENBQUM3USxpQkFBaUIsQ0FBQ29GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSW5ILE1BQU0sQ0FBQ3FMLHNCQUFzQixDQUFDLHVCQUF1QixHQUFHbEUsVUFBVSxDQUFDO0lBQy9FO0lBQ0EsSUFBSSxDQUFDbEYsaUJBQWlCLENBQUNtRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUlwSCxNQUFNLENBQUNzTixzQkFBc0IsQ0FBRSx3QkFBdUJsRyxVQUFXLEVBQUMsQ0FBQztJQUMvRTtJQUNBLElBQUksQ0FBQ3RGLFFBQVEsQ0FBQ3NQLFFBQVEsQ0FBQyxFQUFFO01BQ3ZCLE1BQU0sSUFBSXBLLFNBQVMsQ0FBQyxxQ0FBcUMsQ0FBQztJQUM1RDtJQUNBLElBQUksQ0FBQ3BGLFFBQVEsQ0FBQ2dSLEtBQUssQ0FBQyxFQUFFO01BQ3BCLE1BQU0sSUFBSTVMLFNBQVMsQ0FBQyxpQ0FBaUMsQ0FBQztJQUN4RDtJQUVBLElBQUksQ0FBQ29LLFFBQVEsRUFBRTtNQUNiLE1BQU0sSUFBSXBSLE1BQU0sQ0FBQ2tGLG9CQUFvQixDQUFDLDBCQUEwQixDQUFDO0lBQ25FO0lBRUEsTUFBTTBDLE1BQU0sR0FBRyxNQUFNO0lBQ3JCLE1BQU1FLEtBQUssR0FBSSxZQUFXakYsU0FBUyxDQUFDdU8sUUFBUSxDQUFFLEVBQUM7SUFFL0MsTUFBTXlCLE9BQU8sR0FBRyxJQUFJL1MsTUFBTSxDQUFDZ0UsT0FBTyxDQUFDLENBQUM7SUFDcEMsTUFBTXVHLE9BQU8sR0FBR3dJLE9BQU8sQ0FBQ25HLFdBQVcsQ0FBQztNQUNsQ29HLHVCQUF1QixFQUFFO1FBQ3ZCbEcsQ0FBQyxFQUFFO1VBQ0RDLEtBQUssRUFBRTtRQUNULENBQUM7UUFDRGtHLElBQUksRUFBRUgsS0FBSyxDQUFDSSxHQUFHLENBQUV4RSxJQUFJLElBQUs7VUFDeEIsT0FBTztZQUNMeUUsVUFBVSxFQUFFekUsSUFBSSxDQUFDMEUsSUFBSTtZQUNyQkMsSUFBSSxFQUFFM0UsSUFBSSxDQUFDQTtVQUNiLENBQUM7UUFDSCxDQUFDO01BQ0g7SUFDRixDQUFDLENBQUM7SUFFRixNQUFNNUQsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDUixnQkFBZ0IsQ0FBQztNQUFFeEMsTUFBTTtNQUFFVCxVQUFVO01BQUVDLFVBQVU7TUFBRVU7SUFBTSxDQUFDLEVBQUV1QyxPQUFPLENBQUM7SUFDM0YsTUFBTVEsSUFBSSxHQUFHLE1BQU0xSCxZQUFZLENBQUN5SCxHQUFHLENBQUM7SUFDcEMsTUFBTXdCLE1BQU0sR0FBRzlJLHNCQUFzQixDQUFDdUgsSUFBSSxDQUFDcEMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUN0RCxJQUFJLENBQUMyRCxNQUFNLEVBQUU7TUFDWCxNQUFNLElBQUl2SCxLQUFLLENBQUMsc0NBQXNDLENBQUM7SUFDekQ7SUFFQSxJQUFJdUgsTUFBTSxDQUFDVixPQUFPLEVBQUU7TUFDbEI7TUFDQSxNQUFNLElBQUkxTCxNQUFNLENBQUN5TCxPQUFPLENBQUNXLE1BQU0sQ0FBQ2dILFVBQVUsQ0FBQztJQUM3QztJQUVBLE9BQU87TUFDTDtNQUNBO01BQ0E1RSxJQUFJLEVBQUVwQyxNQUFNLENBQUNvQyxJQUFjO01BQzNCa0IsU0FBUyxFQUFFdE8sWUFBWSxDQUFDd0osR0FBRyxDQUFDL0MsT0FBeUI7SUFDdkQsQ0FBQztFQUNIOztFQUVBO0FBQ0Y7QUFDQTtFQUNFLE1BQWdCcUosU0FBU0EsQ0FBQy9KLFVBQWtCLEVBQUVDLFVBQWtCLEVBQUVnSyxRQUFnQixFQUEyQjtJQUMzRyxJQUFJLENBQUNyUCxpQkFBaUIsQ0FBQ29GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSW5ILE1BQU0sQ0FBQ3FMLHNCQUFzQixDQUFDLHVCQUF1QixHQUFHbEUsVUFBVSxDQUFDO0lBQy9FO0lBQ0EsSUFBSSxDQUFDbEYsaUJBQWlCLENBQUNtRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUlwSCxNQUFNLENBQUNzTixzQkFBc0IsQ0FBRSx3QkFBdUJsRyxVQUFXLEVBQUMsQ0FBQztJQUMvRTtJQUNBLElBQUksQ0FBQ3RGLFFBQVEsQ0FBQ3NQLFFBQVEsQ0FBQyxFQUFFO01BQ3ZCLE1BQU0sSUFBSXBLLFNBQVMsQ0FBQyxxQ0FBcUMsQ0FBQztJQUM1RDtJQUNBLElBQUksQ0FBQ29LLFFBQVEsRUFBRTtNQUNiLE1BQU0sSUFBSXBSLE1BQU0sQ0FBQ2tGLG9CQUFvQixDQUFDLDBCQUEwQixDQUFDO0lBQ25FO0lBRUEsTUFBTW1NLEtBQXFCLEdBQUcsRUFBRTtJQUNoQyxJQUFJZ0MsTUFBTSxHQUFHLENBQUM7SUFDZCxJQUFJakgsTUFBTTtJQUNWLEdBQUc7TUFDREEsTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDa0gsY0FBYyxDQUFDbk0sVUFBVSxFQUFFQyxVQUFVLEVBQUVnSyxRQUFRLEVBQUVpQyxNQUFNLENBQUM7TUFDNUVBLE1BQU0sR0FBR2pILE1BQU0sQ0FBQ2lILE1BQU07TUFDdEJoQyxLQUFLLENBQUN0RCxJQUFJLENBQUMsR0FBRzNCLE1BQU0sQ0FBQ2lGLEtBQUssQ0FBQztJQUM3QixDQUFDLFFBQVFqRixNQUFNLENBQUNzRixXQUFXO0lBRTNCLE9BQU9MLEtBQUs7RUFDZDs7RUFFQTtBQUNGO0FBQ0E7RUFDRSxNQUFjaUMsY0FBY0EsQ0FBQ25NLFVBQWtCLEVBQUVDLFVBQWtCLEVBQUVnSyxRQUFnQixFQUFFaUMsTUFBYyxFQUFFO0lBQ3JHLElBQUksQ0FBQ3RSLGlCQUFpQixDQUFDb0YsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJbkgsTUFBTSxDQUFDcUwsc0JBQXNCLENBQUMsdUJBQXVCLEdBQUdsRSxVQUFVLENBQUM7SUFDL0U7SUFDQSxJQUFJLENBQUNsRixpQkFBaUIsQ0FBQ21GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSXBILE1BQU0sQ0FBQ3NOLHNCQUFzQixDQUFFLHdCQUF1QmxHLFVBQVcsRUFBQyxDQUFDO0lBQy9FO0lBQ0EsSUFBSSxDQUFDdEYsUUFBUSxDQUFDc1AsUUFBUSxDQUFDLEVBQUU7TUFDdkIsTUFBTSxJQUFJcEssU0FBUyxDQUFDLHFDQUFxQyxDQUFDO0lBQzVEO0lBQ0EsSUFBSSxDQUFDckYsUUFBUSxDQUFDMFIsTUFBTSxDQUFDLEVBQUU7TUFDckIsTUFBTSxJQUFJck0sU0FBUyxDQUFDLG1DQUFtQyxDQUFDO0lBQzFEO0lBQ0EsSUFBSSxDQUFDb0ssUUFBUSxFQUFFO01BQ2IsTUFBTSxJQUFJcFIsTUFBTSxDQUFDa0Ysb0JBQW9CLENBQUMsMEJBQTBCLENBQUM7SUFDbkU7SUFFQSxJQUFJNEMsS0FBSyxHQUFJLFlBQVdqRixTQUFTLENBQUN1TyxRQUFRLENBQUUsRUFBQztJQUM3QyxJQUFJaUMsTUFBTSxFQUFFO01BQ1Z2TCxLQUFLLElBQUssdUJBQXNCdUwsTUFBTyxFQUFDO0lBQzFDO0lBRUEsTUFBTXpMLE1BQU0sR0FBRyxLQUFLO0lBQ3BCLE1BQU1nRCxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUNSLGdCQUFnQixDQUFDO01BQUV4QyxNQUFNO01BQUVULFVBQVU7TUFBRUMsVUFBVTtNQUFFVTtJQUFNLENBQUMsQ0FBQztJQUNsRixPQUFPbEUsVUFBVSxDQUFDMlAsY0FBYyxDQUFDLE1BQU1uUSxZQUFZLENBQUN3SCxHQUFHLENBQUMsQ0FBQztFQUMzRDtFQUVBLE1BQU00SSxXQUFXQSxDQUFBLEVBQWtDO0lBQ2pELE1BQU01TCxNQUFNLEdBQUcsS0FBSztJQUNwQixNQUFNNkwsVUFBVSxHQUFHLElBQUksQ0FBQ3RPLE1BQU0sSUFBSWhGLGNBQWM7SUFDaEQsTUFBTXVULE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQ3RKLGdCQUFnQixDQUFDO01BQUV4QztJQUFPLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRTZMLFVBQVUsQ0FBQztJQUM5RSxNQUFNRSxTQUFTLEdBQUcsTUFBTXZRLFlBQVksQ0FBQ3NRLE9BQU8sQ0FBQztJQUM3QyxPQUFPOVAsVUFBVSxDQUFDZ1EsZUFBZSxDQUFDRCxTQUFTLENBQUM7RUFDOUM7O0VBRUE7QUFDRjtBQUNBO0VBQ0VFLGlCQUFpQkEsQ0FBQzlFLElBQVksRUFBRTtJQUM5QixJQUFJLENBQUNwTixRQUFRLENBQUNvTixJQUFJLENBQUMsRUFBRTtNQUNuQixNQUFNLElBQUkvSCxTQUFTLENBQUMsaUNBQWlDLENBQUM7SUFDeEQ7SUFDQSxJQUFJK0gsSUFBSSxHQUFHLElBQUksQ0FBQ3ZLLGFBQWEsRUFBRTtNQUM3QixNQUFNLElBQUl3QyxTQUFTLENBQUUsZ0NBQStCLElBQUksQ0FBQ3hDLGFBQWMsRUFBQyxDQUFDO0lBQzNFO0lBQ0EsSUFBSSxJQUFJLENBQUMrQixnQkFBZ0IsRUFBRTtNQUN6QixPQUFPLElBQUksQ0FBQ2pDLFFBQVE7SUFDdEI7SUFDQSxJQUFJQSxRQUFRLEdBQUcsSUFBSSxDQUFDQSxRQUFRO0lBQzVCLFNBQVM7TUFDUDtNQUNBO01BQ0EsSUFBSUEsUUFBUSxHQUFHLEtBQUssR0FBR3lLLElBQUksRUFBRTtRQUMzQixPQUFPekssUUFBUTtNQUNqQjtNQUNBO01BQ0FBLFFBQVEsSUFBSSxFQUFFLEdBQUcsSUFBSSxHQUFHLElBQUk7SUFDOUI7RUFDRjs7RUFFQTtBQUNGO0FBQ0E7RUFDRSxNQUFNd1AsVUFBVUEsQ0FBQzNNLFVBQWtCLEVBQUVDLFVBQWtCLEVBQUU2RyxRQUFnQixFQUFFdUIsUUFBeUIsRUFBRTtJQUNwRyxJQUFJLENBQUN6TixpQkFBaUIsQ0FBQ29GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSW5ILE1BQU0sQ0FBQ3FMLHNCQUFzQixDQUFDLHVCQUF1QixHQUFHbEUsVUFBVSxDQUFDO0lBQy9FO0lBQ0EsSUFBSSxDQUFDbEYsaUJBQWlCLENBQUNtRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUlwSCxNQUFNLENBQUNzTixzQkFBc0IsQ0FBRSx3QkFBdUJsRyxVQUFXLEVBQUMsQ0FBQztJQUMvRTtJQUVBLElBQUksQ0FBQ3RGLFFBQVEsQ0FBQ21NLFFBQVEsQ0FBQyxFQUFFO01BQ3ZCLE1BQU0sSUFBSWpILFNBQVMsQ0FBQyxxQ0FBcUMsQ0FBQztJQUM1RDtJQUNBLElBQUl3SSxRQUFRLElBQUksQ0FBQzVOLFFBQVEsQ0FBQzROLFFBQVEsQ0FBQyxFQUFFO01BQ25DLE1BQU0sSUFBSXhJLFNBQVMsQ0FBQyxxQ0FBcUMsQ0FBQztJQUM1RDs7SUFFQTtJQUNBd0ksUUFBUSxHQUFHbE8saUJBQWlCLENBQUNrTyxRQUFRLElBQUksQ0FBQyxDQUFDLEVBQUV2QixRQUFRLENBQUM7SUFDdEQsTUFBTWEsSUFBSSxHQUFHLE1BQU1uTyxHQUFHLENBQUNvVCxLQUFLLENBQUM5RixRQUFRLENBQUM7SUFDdEMsT0FBTyxNQUFNLElBQUksQ0FBQytGLFNBQVMsQ0FBQzdNLFVBQVUsRUFBRUMsVUFBVSxFQUFFaEksRUFBRSxDQUFDNlUsZ0JBQWdCLENBQUNoRyxRQUFRLENBQUMsRUFBRWEsSUFBSSxDQUFDQyxJQUFJLEVBQUVTLFFBQVEsQ0FBQztFQUN6Rzs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFLE1BQU13RSxTQUFTQSxDQUNiN00sVUFBa0IsRUFDbEJDLFVBQWtCLEVBQ2xCNUgsTUFBeUMsRUFDekN1UCxJQUFhLEVBQ2JTLFFBQTZCLEVBQ0E7SUFDN0IsSUFBSSxDQUFDek4saUJBQWlCLENBQUNvRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUluSCxNQUFNLENBQUNxTCxzQkFBc0IsQ0FBRSx3QkFBdUJsRSxVQUFXLEVBQUMsQ0FBQztJQUMvRTtJQUNBLElBQUksQ0FBQ2xGLGlCQUFpQixDQUFDbUYsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJcEgsTUFBTSxDQUFDc04sc0JBQXNCLENBQUUsd0JBQXVCbEcsVUFBVyxFQUFDLENBQUM7SUFDL0U7O0lBRUE7SUFDQTtJQUNBLElBQUl4RixRQUFRLENBQUNtTixJQUFJLENBQUMsRUFBRTtNQUNsQlMsUUFBUSxHQUFHVCxJQUFJO0lBQ2pCO0lBQ0E7SUFDQSxNQUFNbEgsT0FBTyxHQUFHckYsZUFBZSxDQUFDZ04sUUFBUSxDQUFDO0lBQ3pDLElBQUksT0FBT2hRLE1BQU0sS0FBSyxRQUFRLElBQUlBLE1BQU0sWUFBWXNMLE1BQU0sRUFBRTtNQUMxRDtNQUNBaUUsSUFBSSxHQUFHdlAsTUFBTSxDQUFDK0ssTUFBTTtNQUNwQi9LLE1BQU0sR0FBR2lELGNBQWMsQ0FBQ2pELE1BQU0sQ0FBQztJQUNqQyxDQUFDLE1BQU0sSUFBSSxDQUFDcUMsZ0JBQWdCLENBQUNyQyxNQUFNLENBQUMsRUFBRTtNQUNwQyxNQUFNLElBQUl3SCxTQUFTLENBQUMsNEVBQTRFLENBQUM7SUFDbkc7SUFFQSxJQUFJckYsUUFBUSxDQUFDb04sSUFBSSxDQUFDLElBQUlBLElBQUksR0FBRyxDQUFDLEVBQUU7TUFDOUIsTUFBTSxJQUFJL08sTUFBTSxDQUFDa0Ysb0JBQW9CLENBQUUsd0NBQXVDNkosSUFBSyxFQUFDLENBQUM7SUFDdkY7O0lBRUE7SUFDQTtJQUNBLElBQUksQ0FBQ3BOLFFBQVEsQ0FBQ29OLElBQUksQ0FBQyxFQUFFO01BQ25CQSxJQUFJLEdBQUcsSUFBSSxDQUFDdkssYUFBYTtJQUMzQjs7SUFFQTtJQUNBO0lBQ0EsSUFBSXVLLElBQUksS0FBS25LLFNBQVMsRUFBRTtNQUN0QixNQUFNc1AsUUFBUSxHQUFHLE1BQU1qVCxnQkFBZ0IsQ0FBQ3pCLE1BQU0sQ0FBQztNQUMvQyxJQUFJMFUsUUFBUSxLQUFLLElBQUksRUFBRTtRQUNyQm5GLElBQUksR0FBR21GLFFBQVE7TUFDakI7SUFDRjtJQUVBLElBQUksQ0FBQ3ZTLFFBQVEsQ0FBQ29OLElBQUksQ0FBQyxFQUFFO01BQ25CO01BQ0FBLElBQUksR0FBRyxJQUFJLENBQUN2SyxhQUFhO0lBQzNCO0lBRUEsTUFBTUYsUUFBUSxHQUFHLElBQUksQ0FBQ3VQLGlCQUFpQixDQUFDOUUsSUFBSSxDQUFDO0lBQzdDLElBQUksT0FBT3ZQLE1BQU0sS0FBSyxRQUFRLElBQUlBLE1BQU0sQ0FBQzJVLGNBQWMsS0FBSyxDQUFDLElBQUlySixNQUFNLENBQUNDLFFBQVEsQ0FBQ3ZMLE1BQU0sQ0FBQyxJQUFJdVAsSUFBSSxJQUFJekssUUFBUSxFQUFFO01BQzVHLE1BQU04UCxHQUFHLEdBQUd2UyxnQkFBZ0IsQ0FBQ3JDLE1BQU0sQ0FBQyxHQUFHLE1BQU0yRCxZQUFZLENBQUMzRCxNQUFNLENBQUMsR0FBR3NMLE1BQU0sQ0FBQ3lELElBQUksQ0FBQy9PLE1BQU0sQ0FBQztNQUN2RixPQUFPLElBQUksQ0FBQzZVLFlBQVksQ0FBQ2xOLFVBQVUsRUFBRUMsVUFBVSxFQUFFUyxPQUFPLEVBQUV1TSxHQUFHLENBQUM7SUFDaEU7SUFFQSxPQUFPLElBQUksQ0FBQ0UsWUFBWSxDQUFDbk4sVUFBVSxFQUFFQyxVQUFVLEVBQUVTLE9BQU8sRUFBRXJJLE1BQU0sRUFBRThFLFFBQVEsQ0FBQztFQUM3RTs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFLE1BQWMrUCxZQUFZQSxDQUN4QmxOLFVBQWtCLEVBQ2xCQyxVQUFrQixFQUNsQlMsT0FBdUIsRUFDdkJ1TSxHQUFXLEVBQ2tCO0lBQzdCLE1BQU07TUFBRUcsTUFBTTtNQUFFL0o7SUFBVSxDQUFDLEdBQUduSixVQUFVLENBQUMrUyxHQUFHLEVBQUUsSUFBSSxDQUFDNU4sWUFBWSxDQUFDO0lBQ2hFcUIsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEdBQUd1TSxHQUFHLENBQUM3SixNQUFNO0lBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMvRCxZQUFZLEVBQUU7TUFDdEJxQixPQUFPLENBQUMsYUFBYSxDQUFDLEdBQUcwTSxNQUFNO0lBQ2pDO0lBQ0EsTUFBTTNKLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQ0gsc0JBQXNCLENBQzNDO01BQ0U3QyxNQUFNLEVBQUUsS0FBSztNQUNiVCxVQUFVO01BQ1ZDLFVBQVU7TUFDVlM7SUFDRixDQUFDLEVBQ0R1TSxHQUFHLEVBQ0g1SixTQUFTLEVBQ1QsQ0FBQyxHQUFHLENBQUMsRUFDTCxFQUNGLENBQUM7SUFDRCxNQUFNdEgsYUFBYSxDQUFDMEgsR0FBRyxDQUFDO0lBQ3hCLE9BQU87TUFDTDRELElBQUksRUFBRTlMLFlBQVksQ0FBQ2tJLEdBQUcsQ0FBQy9DLE9BQU8sQ0FBQzJHLElBQUksQ0FBQztNQUNwQ2tCLFNBQVMsRUFBRXRPLFlBQVksQ0FBQ3dKLEdBQUcsQ0FBQy9DLE9BQXlCO0lBQ3ZELENBQUM7RUFDSDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNFLE1BQWN5TSxZQUFZQSxDQUN4Qm5OLFVBQWtCLEVBQ2xCQyxVQUFrQixFQUNsQlMsT0FBdUIsRUFDdkJnRCxJQUFxQixFQUNyQnZHLFFBQWdCLEVBQ2E7SUFDN0I7SUFDQTtJQUNBLE1BQU1rUSxRQUE4QixHQUFHLENBQUMsQ0FBQzs7SUFFekM7SUFDQTtJQUNBLE1BQU1DLEtBQWEsR0FBRyxFQUFFO0lBRXhCLE1BQU1DLGdCQUFnQixHQUFHLE1BQU0sSUFBSSxDQUFDcEMsWUFBWSxDQUFDbkwsVUFBVSxFQUFFQyxVQUFVLENBQUM7SUFDeEUsSUFBSWdLLFFBQWdCO0lBQ3BCLElBQUksQ0FBQ3NELGdCQUFnQixFQUFFO01BQ3JCdEQsUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDZSwwQkFBMEIsQ0FBQ2hMLFVBQVUsRUFBRUMsVUFBVSxFQUFFUyxPQUFPLENBQUM7SUFDbkYsQ0FBQyxNQUFNO01BQ0x1SixRQUFRLEdBQUdzRCxnQkFBZ0I7TUFDM0IsTUFBTUMsT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDekQsU0FBUyxDQUFDL0osVUFBVSxFQUFFQyxVQUFVLEVBQUVzTixnQkFBZ0IsQ0FBQztNQUM5RUMsT0FBTyxDQUFDbkwsT0FBTyxDQUFFUCxDQUFDLElBQUs7UUFDckJ1TCxRQUFRLENBQUN2TCxDQUFDLENBQUNpSyxJQUFJLENBQUMsR0FBR2pLLENBQUM7TUFDdEIsQ0FBQyxDQUFDO0lBQ0o7SUFFQSxNQUFNMkwsUUFBUSxHQUFHLElBQUlsVixZQUFZLENBQUM7TUFBRXFQLElBQUksRUFBRXpLLFFBQVE7TUFBRXVRLFdBQVcsRUFBRTtJQUFNLENBQUMsQ0FBQzs7SUFFekU7SUFDQSxNQUFNLENBQUNqVixDQUFDLEVBQUVrVixDQUFDLENBQUMsR0FBRyxNQUFNQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxDQUMvQixJQUFJRCxPQUFPLENBQUMsQ0FBQ0UsT0FBTyxFQUFFQyxNQUFNLEtBQUs7TUFDL0JySyxJQUFJLENBQUNzSyxJQUFJLENBQUNQLFFBQVEsQ0FBQyxDQUFDUSxFQUFFLENBQUMsT0FBTyxFQUFFRixNQUFNLENBQUM7TUFDdkNOLFFBQVEsQ0FBQ1EsRUFBRSxDQUFDLEtBQUssRUFBRUgsT0FBTyxDQUFDLENBQUNHLEVBQUUsQ0FBQyxPQUFPLEVBQUVGLE1BQU0sQ0FBQztJQUNqRCxDQUFDLENBQUMsRUFDRixDQUFDLFlBQVk7TUFDWCxJQUFJRyxVQUFVLEdBQUcsQ0FBQztNQUVsQixXQUFXLE1BQU1DLEtBQUssSUFBSVYsUUFBUSxFQUFFO1FBQ2xDLE1BQU1XLEdBQUcsR0FBR3BXLE1BQU0sQ0FBQ3FXLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQ0MsTUFBTSxDQUFDSCxLQUFLLENBQUMsQ0FBQ0ksTUFBTSxDQUFDLENBQUM7UUFFM0QsTUFBTUMsT0FBTyxHQUFHbkIsUUFBUSxDQUFDYSxVQUFVLENBQUM7UUFDcEMsSUFBSU0sT0FBTyxFQUFFO1VBQ1gsSUFBSUEsT0FBTyxDQUFDbkgsSUFBSSxLQUFLK0csR0FBRyxDQUFDOU0sUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3hDZ00sS0FBSyxDQUFDMUcsSUFBSSxDQUFDO2NBQUVtRixJQUFJLEVBQUVtQyxVQUFVO2NBQUU3RyxJQUFJLEVBQUVtSCxPQUFPLENBQUNuSDtZQUFLLENBQUMsQ0FBQztZQUNwRDZHLFVBQVUsRUFBRTtZQUNaO1VBQ0Y7UUFDRjtRQUVBQSxVQUFVLEVBQUU7O1FBRVo7UUFDQSxNQUFNdE8sT0FBc0IsR0FBRztVQUM3QmEsTUFBTSxFQUFFLEtBQUs7VUFDYkUsS0FBSyxFQUFFakksRUFBRSxDQUFDbUssU0FBUyxDQUFDO1lBQUVxTCxVQUFVO1lBQUVqRTtVQUFTLENBQUMsQ0FBQztVQUM3Q3ZKLE9BQU8sRUFBRTtZQUNQLGdCQUFnQixFQUFFeU4sS0FBSyxDQUFDL0ssTUFBTTtZQUM5QixhQUFhLEVBQUVnTCxHQUFHLENBQUM5TSxRQUFRLENBQUMsUUFBUTtVQUN0QyxDQUFDO1VBQ0R0QixVQUFVO1VBQ1ZDO1FBQ0YsQ0FBQztRQUVELE1BQU1nQyxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUNzQixvQkFBb0IsQ0FBQzNELE9BQU8sRUFBRXVPLEtBQUssQ0FBQztRQUVoRSxJQUFJOUcsSUFBSSxHQUFHcEYsUUFBUSxDQUFDdkIsT0FBTyxDQUFDMkcsSUFBSTtRQUNoQyxJQUFJQSxJQUFJLEVBQUU7VUFDUkEsSUFBSSxHQUFHQSxJQUFJLENBQUM3RSxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDQSxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQztRQUNqRCxDQUFDLE1BQU07VUFDTDZFLElBQUksR0FBRyxFQUFFO1FBQ1g7UUFFQWlHLEtBQUssQ0FBQzFHLElBQUksQ0FBQztVQUFFbUYsSUFBSSxFQUFFbUMsVUFBVTtVQUFFN0c7UUFBSyxDQUFDLENBQUM7TUFDeEM7TUFFQSxPQUFPLE1BQU0sSUFBSSxDQUFDbUUsdUJBQXVCLENBQUN4TCxVQUFVLEVBQUVDLFVBQVUsRUFBRWdLLFFBQVEsRUFBRXFELEtBQUssQ0FBQztJQUNwRixDQUFDLEVBQUUsQ0FBQyxDQUNMLENBQUM7SUFFRixPQUFPSyxDQUFDO0VBQ1Y7RUFJQSxNQUFNYyx1QkFBdUJBLENBQUN6TyxVQUFrQixFQUFpQjtJQUMvRCxJQUFJLENBQUNwRixpQkFBaUIsQ0FBQ29GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSW5ILE1BQU0sQ0FBQ3FMLHNCQUFzQixDQUFDLHVCQUF1QixHQUFHbEUsVUFBVSxDQUFDO0lBQy9FO0lBQ0EsTUFBTVMsTUFBTSxHQUFHLFFBQVE7SUFDdkIsTUFBTUUsS0FBSyxHQUFHLGFBQWE7SUFDM0IsTUFBTSxJQUFJLENBQUM0QyxvQkFBb0IsQ0FBQztNQUFFOUMsTUFBTTtNQUFFVCxVQUFVO01BQUVXO0lBQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUM7RUFDcEY7RUFJQSxNQUFNK04sb0JBQW9CQSxDQUFDMU8sVUFBa0IsRUFBRTJPLGlCQUF3QyxFQUFFO0lBQ3ZGLElBQUksQ0FBQy9ULGlCQUFpQixDQUFDb0YsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJbkgsTUFBTSxDQUFDcUwsc0JBQXNCLENBQUMsdUJBQXVCLEdBQUdsRSxVQUFVLENBQUM7SUFDL0U7SUFDQSxJQUFJLENBQUN2RixRQUFRLENBQUNrVSxpQkFBaUIsQ0FBQyxFQUFFO01BQ2hDLE1BQU0sSUFBSTlWLE1BQU0sQ0FBQ2tGLG9CQUFvQixDQUFDLDhDQUE4QyxDQUFDO0lBQ3ZGLENBQUMsTUFBTTtNQUNMLElBQUl0RixDQUFDLENBQUM4QixPQUFPLENBQUNvVSxpQkFBaUIsQ0FBQ0MsSUFBSSxDQUFDLEVBQUU7UUFDckMsTUFBTSxJQUFJL1YsTUFBTSxDQUFDa0Ysb0JBQW9CLENBQUMsc0JBQXNCLENBQUM7TUFDL0QsQ0FBQyxNQUFNLElBQUk0USxpQkFBaUIsQ0FBQ0MsSUFBSSxJQUFJLENBQUNqVSxRQUFRLENBQUNnVSxpQkFBaUIsQ0FBQ0MsSUFBSSxDQUFDLEVBQUU7UUFDdEUsTUFBTSxJQUFJL1YsTUFBTSxDQUFDa0Ysb0JBQW9CLENBQUMsd0JBQXdCLEVBQUU0USxpQkFBaUIsQ0FBQ0MsSUFBSSxDQUFDO01BQ3pGO01BQ0EsSUFBSW5XLENBQUMsQ0FBQzhCLE9BQU8sQ0FBQ29VLGlCQUFpQixDQUFDRSxLQUFLLENBQUMsRUFBRTtRQUN0QyxNQUFNLElBQUloVyxNQUFNLENBQUNrRixvQkFBb0IsQ0FBQyxnREFBZ0QsQ0FBQztNQUN6RjtJQUNGO0lBQ0EsTUFBTTBDLE1BQU0sR0FBRyxLQUFLO0lBQ3BCLE1BQU1FLEtBQUssR0FBRyxhQUFhO0lBQzNCLE1BQU1ELE9BQStCLEdBQUcsQ0FBQyxDQUFDO0lBRTFDLE1BQU1vTyx1QkFBdUIsR0FBRztNQUM5QkMsd0JBQXdCLEVBQUU7UUFDeEJDLElBQUksRUFBRUwsaUJBQWlCLENBQUNDLElBQUk7UUFDNUJLLElBQUksRUFBRU4saUJBQWlCLENBQUNFO01BQzFCO0lBQ0YsQ0FBQztJQUVELE1BQU1uRCxPQUFPLEdBQUcsSUFBSS9TLE1BQU0sQ0FBQ2dFLE9BQU8sQ0FBQztNQUFFQyxVQUFVLEVBQUU7UUFBRUMsTUFBTSxFQUFFO01BQU0sQ0FBQztNQUFFQyxRQUFRLEVBQUU7SUFBSyxDQUFDLENBQUM7SUFDckYsTUFBTW9HLE9BQU8sR0FBR3dJLE9BQU8sQ0FBQ25HLFdBQVcsQ0FBQ3VKLHVCQUF1QixDQUFDO0lBQzVEcE8sT0FBTyxDQUFDLGFBQWEsQ0FBQyxHQUFHbEYsS0FBSyxDQUFDMEgsT0FBTyxDQUFDO0lBQ3ZDLE1BQU0sSUFBSSxDQUFDSyxvQkFBb0IsQ0FBQztNQUFFOUMsTUFBTTtNQUFFVCxVQUFVO01BQUVXLEtBQUs7TUFBRUQ7SUFBUSxDQUFDLEVBQUV3QyxPQUFPLENBQUM7RUFDbEY7RUFJQSxNQUFNZ00sb0JBQW9CQSxDQUFDbFAsVUFBa0IsRUFBRTtJQUM3QyxJQUFJLENBQUNwRixpQkFBaUIsQ0FBQ29GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSW5ILE1BQU0sQ0FBQ3FMLHNCQUFzQixDQUFDLHVCQUF1QixHQUFHbEUsVUFBVSxDQUFDO0lBQy9FO0lBQ0EsTUFBTVMsTUFBTSxHQUFHLEtBQUs7SUFDcEIsTUFBTUUsS0FBSyxHQUFHLGFBQWE7SUFFM0IsTUFBTTRMLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQ3RKLGdCQUFnQixDQUFDO01BQUV4QyxNQUFNO01BQUVULFVBQVU7TUFBRVc7SUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzFGLE1BQU02TCxTQUFTLEdBQUcsTUFBTXZRLFlBQVksQ0FBQ3NRLE9BQU8sQ0FBQztJQUM3QyxPQUFPOVAsVUFBVSxDQUFDMFMsc0JBQXNCLENBQUMzQyxTQUFTLENBQUM7RUFDckQ7RUFRQSxNQUFNNEMsa0JBQWtCQSxDQUN0QnBQLFVBQWtCLEVBQ2xCQyxVQUFrQixFQUNsQmlHLE9BQW1DLEVBQ1A7SUFDNUIsSUFBSSxDQUFDdEwsaUJBQWlCLENBQUNvRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUluSCxNQUFNLENBQUNxTCxzQkFBc0IsQ0FBQyx1QkFBdUIsR0FBR2xFLFVBQVUsQ0FBQztJQUMvRTtJQUNBLElBQUksQ0FBQ2xGLGlCQUFpQixDQUFDbUYsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJcEgsTUFBTSxDQUFDc04sc0JBQXNCLENBQUUsd0JBQXVCbEcsVUFBVyxFQUFDLENBQUM7SUFDL0U7SUFFQSxJQUFJaUcsT0FBTyxFQUFFO01BQ1gsSUFBSSxDQUFDekwsUUFBUSxDQUFDeUwsT0FBTyxDQUFDLEVBQUU7UUFDdEIsTUFBTSxJQUFJckcsU0FBUyxDQUFDLG9DQUFvQyxDQUFDO01BQzNELENBQUMsTUFBTSxJQUFJb0IsTUFBTSxDQUFDb08sSUFBSSxDQUFDbkosT0FBTyxDQUFDLENBQUM5QyxNQUFNLEdBQUcsQ0FBQyxJQUFJOEMsT0FBTyxDQUFDcUMsU0FBUyxJQUFJLENBQUM1TixRQUFRLENBQUN1TCxPQUFPLENBQUNxQyxTQUFTLENBQUMsRUFBRTtRQUMvRixNQUFNLElBQUkxSSxTQUFTLENBQUMsc0NBQXNDLEVBQUVxRyxPQUFPLENBQUNxQyxTQUFTLENBQUM7TUFDaEY7SUFDRjtJQUVBLE1BQU05SCxNQUFNLEdBQUcsS0FBSztJQUNwQixJQUFJRSxLQUFLLEdBQUcsWUFBWTtJQUV4QixJQUFJdUYsT0FBTyxhQUFQQSxPQUFPLGVBQVBBLE9BQU8sQ0FBRXFDLFNBQVMsRUFBRTtNQUN0QjVILEtBQUssSUFBSyxjQUFhdUYsT0FBTyxDQUFDcUMsU0FBVSxFQUFDO0lBQzVDO0lBRUEsTUFBTWdFLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQ3RKLGdCQUFnQixDQUFDO01BQUV4QyxNQUFNO01BQUVULFVBQVU7TUFBRUMsVUFBVTtNQUFFVTtJQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqRyxNQUFNMk8sTUFBTSxHQUFHLE1BQU1yVCxZQUFZLENBQUNzUSxPQUFPLENBQUM7SUFDMUMsT0FBT2pRLDBCQUEwQixDQUFDZ1QsTUFBTSxDQUFDO0VBQzNDO0VBR0EsTUFBTUMsa0JBQWtCQSxDQUN0QnZQLFVBQWtCLEVBQ2xCQyxVQUFrQixFQUNsQnVQLE9BQU8sR0FBRztJQUNSQyxNQUFNLEVBQUV4VyxpQkFBaUIsQ0FBQ3lXO0VBQzVCLENBQThCLEVBQ2Y7SUFDZixJQUFJLENBQUM5VSxpQkFBaUIsQ0FBQ29GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSW5ILE1BQU0sQ0FBQ3FMLHNCQUFzQixDQUFDLHVCQUF1QixHQUFHbEUsVUFBVSxDQUFDO0lBQy9FO0lBQ0EsSUFBSSxDQUFDbEYsaUJBQWlCLENBQUNtRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUlwSCxNQUFNLENBQUNzTixzQkFBc0IsQ0FBRSx3QkFBdUJsRyxVQUFXLEVBQUMsQ0FBQztJQUMvRTtJQUVBLElBQUksQ0FBQ3hGLFFBQVEsQ0FBQytVLE9BQU8sQ0FBQyxFQUFFO01BQ3RCLE1BQU0sSUFBSTNQLFNBQVMsQ0FBQyxvQ0FBb0MsQ0FBQztJQUMzRCxDQUFDLE1BQU07TUFDTCxJQUFJLENBQUMsQ0FBQzVHLGlCQUFpQixDQUFDeVcsT0FBTyxFQUFFelcsaUJBQWlCLENBQUMwVyxRQUFRLENBQUMsQ0FBQ3pQLFFBQVEsQ0FBQ3NQLE9BQU8sYUFBUEEsT0FBTyx1QkFBUEEsT0FBTyxDQUFFQyxNQUFNLENBQUMsRUFBRTtRQUN0RixNQUFNLElBQUk1UCxTQUFTLENBQUMsa0JBQWtCLEdBQUcyUCxPQUFPLENBQUNDLE1BQU0sQ0FBQztNQUMxRDtNQUNBLElBQUlELE9BQU8sQ0FBQ2pILFNBQVMsSUFBSSxDQUFDaUgsT0FBTyxDQUFDakgsU0FBUyxDQUFDbkYsTUFBTSxFQUFFO1FBQ2xELE1BQU0sSUFBSXZELFNBQVMsQ0FBQyxzQ0FBc0MsR0FBRzJQLE9BQU8sQ0FBQ2pILFNBQVMsQ0FBQztNQUNqRjtJQUNGO0lBRUEsTUFBTTlILE1BQU0sR0FBRyxLQUFLO0lBQ3BCLElBQUlFLEtBQUssR0FBRyxZQUFZO0lBRXhCLElBQUk2TyxPQUFPLENBQUNqSCxTQUFTLEVBQUU7TUFDckI1SCxLQUFLLElBQUssY0FBYTZPLE9BQU8sQ0FBQ2pILFNBQVUsRUFBQztJQUM1QztJQUVBLE1BQU1xSCxNQUFNLEdBQUc7TUFDYkMsTUFBTSxFQUFFTCxPQUFPLENBQUNDO0lBQ2xCLENBQUM7SUFFRCxNQUFNL0QsT0FBTyxHQUFHLElBQUkvUyxNQUFNLENBQUNnRSxPQUFPLENBQUM7TUFBRW1ULFFBQVEsRUFBRSxXQUFXO01BQUVsVCxVQUFVLEVBQUU7UUFBRUMsTUFBTSxFQUFFO01BQU0sQ0FBQztNQUFFQyxRQUFRLEVBQUU7SUFBSyxDQUFDLENBQUM7SUFDNUcsTUFBTW9HLE9BQU8sR0FBR3dJLE9BQU8sQ0FBQ25HLFdBQVcsQ0FBQ3FLLE1BQU0sQ0FBQztJQUMzQyxNQUFNbFAsT0FBK0IsR0FBRyxDQUFDLENBQUM7SUFDMUNBLE9BQU8sQ0FBQyxhQUFhLENBQUMsR0FBR2xGLEtBQUssQ0FBQzBILE9BQU8sQ0FBQztJQUV2QyxNQUFNLElBQUksQ0FBQ0ssb0JBQW9CLENBQUM7TUFBRTlDLE1BQU07TUFBRVQsVUFBVTtNQUFFQyxVQUFVO01BQUVVLEtBQUs7TUFBRUQ7SUFBUSxDQUFDLEVBQUV3QyxPQUFPLENBQUM7RUFDOUY7O0VBRUE7QUFDRjtBQUNBO0VBQ0UsTUFBTTZNLGdCQUFnQkEsQ0FBQy9QLFVBQWtCLEVBQWtCO0lBQ3pELElBQUksQ0FBQ3BGLGlCQUFpQixDQUFDb0YsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJbkgsTUFBTSxDQUFDcUwsc0JBQXNCLENBQUUsd0JBQXVCbEUsVUFBVyxFQUFDLENBQUM7SUFDL0U7SUFFQSxNQUFNUyxNQUFNLEdBQUcsS0FBSztJQUNwQixNQUFNRSxLQUFLLEdBQUcsU0FBUztJQUN2QixNQUFNdUssY0FBYyxHQUFHO01BQUV6SyxNQUFNO01BQUVULFVBQVU7TUFBRVc7SUFBTSxDQUFDO0lBRXBELE1BQU1zQixRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUNnQixnQkFBZ0IsQ0FBQ2lJLGNBQWMsQ0FBQztJQUM1RCxNQUFNeEgsSUFBSSxHQUFHLE1BQU16SCxZQUFZLENBQUNnRyxRQUFRLENBQUM7SUFDekMsT0FBT3hGLFVBQVUsQ0FBQ3VULFlBQVksQ0FBQ3RNLElBQUksQ0FBQztFQUN0Qzs7RUFFQTtBQUNGO0FBQ0E7RUFDRSxNQUFNdU0sZ0JBQWdCQSxDQUFDalEsVUFBa0IsRUFBRUMsVUFBa0IsRUFBRWlHLE9BQXVCLEVBQWtCO0lBQ3RHLE1BQU16RixNQUFNLEdBQUcsS0FBSztJQUNwQixJQUFJRSxLQUFLLEdBQUcsU0FBUztJQUVyQixJQUFJLENBQUMvRixpQkFBaUIsQ0FBQ29GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSW5ILE1BQU0sQ0FBQ3FMLHNCQUFzQixDQUFDLHVCQUF1QixHQUFHbEUsVUFBVSxDQUFDO0lBQy9FO0lBQ0EsSUFBSSxDQUFDbEYsaUJBQWlCLENBQUNtRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUlwSCxNQUFNLENBQUNxTCxzQkFBc0IsQ0FBQyx1QkFBdUIsR0FBR2pFLFVBQVUsQ0FBQztJQUMvRTtJQUNBLElBQUlpRyxPQUFPLElBQUksQ0FBQ3pMLFFBQVEsQ0FBQ3lMLE9BQU8sQ0FBQyxFQUFFO01BQ2pDLE1BQU0sSUFBSXJOLE1BQU0sQ0FBQ2tGLG9CQUFvQixDQUFDLG9DQUFvQyxDQUFDO0lBQzdFO0lBRUEsSUFBSW1JLE9BQU8sSUFBSUEsT0FBTyxDQUFDcUMsU0FBUyxFQUFFO01BQ2hDNUgsS0FBSyxHQUFJLEdBQUVBLEtBQU0sY0FBYXVGLE9BQU8sQ0FBQ3FDLFNBQVUsRUFBQztJQUNuRDtJQUNBLE1BQU0yQyxjQUE2QixHQUFHO01BQUV6SyxNQUFNO01BQUVULFVBQVU7TUFBRVc7SUFBTSxDQUFDO0lBQ25FLElBQUlWLFVBQVUsRUFBRTtNQUNkaUwsY0FBYyxDQUFDLFlBQVksQ0FBQyxHQUFHakwsVUFBVTtJQUMzQztJQUVBLE1BQU1nQyxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUNnQixnQkFBZ0IsQ0FBQ2lJLGNBQWMsQ0FBQztJQUM1RCxNQUFNeEgsSUFBSSxHQUFHLE1BQU16SCxZQUFZLENBQUNnRyxRQUFRLENBQUM7SUFDekMsT0FBT3hGLFVBQVUsQ0FBQ3VULFlBQVksQ0FBQ3RNLElBQUksQ0FBQztFQUN0Qzs7RUFFQTtBQUNGO0FBQ0E7RUFDRSxNQUFNd00sZUFBZUEsQ0FBQ2xRLFVBQWtCLEVBQUVtUSxNQUFjLEVBQWlCO0lBQ3ZFO0lBQ0EsSUFBSSxDQUFDdlYsaUJBQWlCLENBQUNvRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUluSCxNQUFNLENBQUNxTCxzQkFBc0IsQ0FBRSx3QkFBdUJsRSxVQUFXLEVBQUMsQ0FBQztJQUMvRTtJQUNBLElBQUksQ0FBQ3JGLFFBQVEsQ0FBQ3dWLE1BQU0sQ0FBQyxFQUFFO01BQ3JCLE1BQU0sSUFBSXRYLE1BQU0sQ0FBQ3VYLHdCQUF3QixDQUFFLDBCQUF5QkQsTUFBTyxxQkFBb0IsQ0FBQztJQUNsRztJQUVBLE1BQU14UCxLQUFLLEdBQUcsUUFBUTtJQUV0QixJQUFJRixNQUFNLEdBQUcsUUFBUTtJQUNyQixJQUFJMFAsTUFBTSxFQUFFO01BQ1YxUCxNQUFNLEdBQUcsS0FBSztJQUNoQjtJQUVBLE1BQU0sSUFBSSxDQUFDOEMsb0JBQW9CLENBQUM7TUFBRTlDLE1BQU07TUFBRVQsVUFBVTtNQUFFVztJQUFNLENBQUMsRUFBRXdQLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQztFQUNuRjs7RUFFQTtBQUNGO0FBQ0E7RUFDRSxNQUFNRSxlQUFlQSxDQUFDclEsVUFBa0IsRUFBbUI7SUFDekQ7SUFDQSxJQUFJLENBQUNwRixpQkFBaUIsQ0FBQ29GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSW5ILE1BQU0sQ0FBQ3FMLHNCQUFzQixDQUFFLHdCQUF1QmxFLFVBQVcsRUFBQyxDQUFDO0lBQy9FO0lBRUEsTUFBTVMsTUFBTSxHQUFHLEtBQUs7SUFDcEIsTUFBTUUsS0FBSyxHQUFHLFFBQVE7SUFDdEIsTUFBTThDLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQ1IsZ0JBQWdCLENBQUM7TUFBRXhDLE1BQU07TUFBRVQsVUFBVTtNQUFFVztJQUFNLENBQUMsQ0FBQztJQUN0RSxPQUFPLE1BQU0xRSxZQUFZLENBQUN3SCxHQUFHLENBQUM7RUFDaEM7RUFFQSxNQUFNNk0sa0JBQWtCQSxDQUFDdFEsVUFBa0IsRUFBRUMsVUFBa0IsRUFBRXNRLGFBQXdCLEdBQUcsQ0FBQyxDQUFDLEVBQWlCO0lBQzdHLElBQUksQ0FBQzNWLGlCQUFpQixDQUFDb0YsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJbkgsTUFBTSxDQUFDcUwsc0JBQXNCLENBQUUsd0JBQXVCbEUsVUFBVyxFQUFDLENBQUM7SUFDL0U7SUFDQSxJQUFJLENBQUNsRixpQkFBaUIsQ0FBQ21GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSXBILE1BQU0sQ0FBQ3NOLHNCQUFzQixDQUFFLHdCQUF1QmxHLFVBQVcsRUFBQyxDQUFDO0lBQy9FO0lBQ0EsSUFBSSxDQUFDeEYsUUFBUSxDQUFDOFYsYUFBYSxDQUFDLEVBQUU7TUFDNUIsTUFBTSxJQUFJMVgsTUFBTSxDQUFDa0Ysb0JBQW9CLENBQUMsMENBQTBDLENBQUM7SUFDbkYsQ0FBQyxNQUFNO01BQ0wsSUFBSXdTLGFBQWEsQ0FBQzdILGdCQUFnQixJQUFJLENBQUNyTyxTQUFTLENBQUNrVyxhQUFhLENBQUM3SCxnQkFBZ0IsQ0FBQyxFQUFFO1FBQ2hGLE1BQU0sSUFBSTdQLE1BQU0sQ0FBQ2tGLG9CQUFvQixDQUFFLHVDQUFzQ3dTLGFBQWEsQ0FBQzdILGdCQUFpQixFQUFDLENBQUM7TUFDaEg7TUFDQSxJQUNFNkgsYUFBYSxDQUFDQyxJQUFJLElBQ2xCLENBQUMsQ0FBQ3JYLGVBQWUsQ0FBQ3NYLFVBQVUsRUFBRXRYLGVBQWUsQ0FBQ3VYLFVBQVUsQ0FBQyxDQUFDeFEsUUFBUSxDQUFDcVEsYUFBYSxDQUFDQyxJQUFJLENBQUMsRUFDdEY7UUFDQSxNQUFNLElBQUkzWCxNQUFNLENBQUNrRixvQkFBb0IsQ0FBRSxrQ0FBaUN3UyxhQUFhLENBQUNDLElBQUssRUFBQyxDQUFDO01BQy9GO01BQ0EsSUFBSUQsYUFBYSxDQUFDSSxlQUFlLElBQUksQ0FBQ2hXLFFBQVEsQ0FBQzRWLGFBQWEsQ0FBQ0ksZUFBZSxDQUFDLEVBQUU7UUFDN0UsTUFBTSxJQUFJOVgsTUFBTSxDQUFDa0Ysb0JBQW9CLENBQUUsc0NBQXFDd1MsYUFBYSxDQUFDSSxlQUFnQixFQUFDLENBQUM7TUFDOUc7TUFDQSxJQUFJSixhQUFhLENBQUNoSSxTQUFTLElBQUksQ0FBQzVOLFFBQVEsQ0FBQzRWLGFBQWEsQ0FBQ2hJLFNBQVMsQ0FBQyxFQUFFO1FBQ2pFLE1BQU0sSUFBSTFQLE1BQU0sQ0FBQ2tGLG9CQUFvQixDQUFFLGdDQUErQndTLGFBQWEsQ0FBQ2hJLFNBQVUsRUFBQyxDQUFDO01BQ2xHO0lBQ0Y7SUFFQSxNQUFNOUgsTUFBTSxHQUFHLEtBQUs7SUFDcEIsSUFBSUUsS0FBSyxHQUFHLFdBQVc7SUFFdkIsTUFBTUQsT0FBdUIsR0FBRyxDQUFDLENBQUM7SUFDbEMsSUFBSTZQLGFBQWEsQ0FBQzdILGdCQUFnQixFQUFFO01BQ2xDaEksT0FBTyxDQUFDLG1DQUFtQyxDQUFDLEdBQUcsSUFBSTtJQUNyRDtJQUVBLE1BQU1nTCxPQUFPLEdBQUcsSUFBSS9TLE1BQU0sQ0FBQ2dFLE9BQU8sQ0FBQztNQUFFbVQsUUFBUSxFQUFFLFdBQVc7TUFBRWxULFVBQVUsRUFBRTtRQUFFQyxNQUFNLEVBQUU7TUFBTSxDQUFDO01BQUVDLFFBQVEsRUFBRTtJQUFLLENBQUMsQ0FBQztJQUM1RyxNQUFNUyxNQUE4QixHQUFHLENBQUMsQ0FBQztJQUV6QyxJQUFJZ1QsYUFBYSxDQUFDQyxJQUFJLEVBQUU7TUFDdEJqVCxNQUFNLENBQUNxVCxJQUFJLEdBQUdMLGFBQWEsQ0FBQ0MsSUFBSTtJQUNsQztJQUNBLElBQUlELGFBQWEsQ0FBQ0ksZUFBZSxFQUFFO01BQ2pDcFQsTUFBTSxDQUFDc1QsZUFBZSxHQUFHTixhQUFhLENBQUNJLGVBQWU7SUFDeEQ7SUFDQSxJQUFJSixhQUFhLENBQUNoSSxTQUFTLEVBQUU7TUFDM0I1SCxLQUFLLElBQUssY0FBYTRQLGFBQWEsQ0FBQ2hJLFNBQVUsRUFBQztJQUNsRDtJQUVBLE1BQU1yRixPQUFPLEdBQUd3SSxPQUFPLENBQUNuRyxXQUFXLENBQUNoSSxNQUFNLENBQUM7SUFFM0NtRCxPQUFPLENBQUMsYUFBYSxDQUFDLEdBQUdsRixLQUFLLENBQUMwSCxPQUFPLENBQUM7SUFDdkMsTUFBTSxJQUFJLENBQUNLLG9CQUFvQixDQUFDO01BQUU5QyxNQUFNO01BQUVULFVBQVU7TUFBRUMsVUFBVTtNQUFFVSxLQUFLO01BQUVEO0lBQVEsQ0FBQyxFQUFFd0MsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0VBQzFHO0VBS0EsTUFBTTROLG1CQUFtQkEsQ0FBQzlRLFVBQWtCLEVBQUU7SUFDNUMsSUFBSSxDQUFDcEYsaUJBQWlCLENBQUNvRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUluSCxNQUFNLENBQUNxTCxzQkFBc0IsQ0FBQyx1QkFBdUIsR0FBR2xFLFVBQVUsQ0FBQztJQUMvRTtJQUNBLE1BQU1TLE1BQU0sR0FBRyxLQUFLO0lBQ3BCLE1BQU1FLEtBQUssR0FBRyxhQUFhO0lBRTNCLE1BQU00TCxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUN0SixnQkFBZ0IsQ0FBQztNQUFFeEMsTUFBTTtNQUFFVCxVQUFVO01BQUVXO0lBQU0sQ0FBQyxDQUFDO0lBQzFFLE1BQU02TCxTQUFTLEdBQUcsTUFBTXZRLFlBQVksQ0FBQ3NRLE9BQU8sQ0FBQztJQUM3QyxPQUFPOVAsVUFBVSxDQUFDc1UscUJBQXFCLENBQUN2RSxTQUFTLENBQUM7RUFDcEQ7RUFPQSxNQUFNd0UsbUJBQW1CQSxDQUFDaFIsVUFBa0IsRUFBRWlSLGNBQXlELEVBQUU7SUFDdkcsTUFBTUMsY0FBYyxHQUFHLENBQUMvWCxlQUFlLENBQUNzWCxVQUFVLEVBQUV0WCxlQUFlLENBQUN1WCxVQUFVLENBQUM7SUFDL0UsTUFBTVMsVUFBVSxHQUFHLENBQUMvWCx3QkFBd0IsQ0FBQ2dZLElBQUksRUFBRWhZLHdCQUF3QixDQUFDaVksS0FBSyxDQUFDO0lBRWxGLElBQUksQ0FBQ3pXLGlCQUFpQixDQUFDb0YsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJbkgsTUFBTSxDQUFDcUwsc0JBQXNCLENBQUMsdUJBQXVCLEdBQUdsRSxVQUFVLENBQUM7SUFDL0U7SUFFQSxJQUFJaVIsY0FBYyxDQUFDVCxJQUFJLElBQUksQ0FBQ1UsY0FBYyxDQUFDaFIsUUFBUSxDQUFDK1EsY0FBYyxDQUFDVCxJQUFJLENBQUMsRUFBRTtNQUN4RSxNQUFNLElBQUkzUSxTQUFTLENBQUUsd0NBQXVDcVIsY0FBZSxFQUFDLENBQUM7SUFDL0U7SUFDQSxJQUFJRCxjQUFjLENBQUNLLElBQUksSUFBSSxDQUFDSCxVQUFVLENBQUNqUixRQUFRLENBQUMrUSxjQUFjLENBQUNLLElBQUksQ0FBQyxFQUFFO01BQ3BFLE1BQU0sSUFBSXpSLFNBQVMsQ0FBRSx3Q0FBdUNzUixVQUFXLEVBQUMsQ0FBQztJQUMzRTtJQUNBLElBQUlGLGNBQWMsQ0FBQ00sUUFBUSxJQUFJLENBQUMvVyxRQUFRLENBQUN5VyxjQUFjLENBQUNNLFFBQVEsQ0FBQyxFQUFFO01BQ2pFLE1BQU0sSUFBSTFSLFNBQVMsQ0FBRSw0Q0FBMkMsQ0FBQztJQUNuRTtJQUVBLE1BQU1ZLE1BQU0sR0FBRyxLQUFLO0lBQ3BCLE1BQU1FLEtBQUssR0FBRyxhQUFhO0lBRTNCLE1BQU1pUCxNQUE2QixHQUFHO01BQ3BDNEIsaUJBQWlCLEVBQUU7SUFDckIsQ0FBQztJQUNELE1BQU1DLFVBQVUsR0FBR3hRLE1BQU0sQ0FBQ29PLElBQUksQ0FBQzRCLGNBQWMsQ0FBQztJQUU5QyxNQUFNUyxZQUFZLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDQyxLQUFLLENBQUVDLEdBQUcsSUFBS0gsVUFBVSxDQUFDdlIsUUFBUSxDQUFDMFIsR0FBRyxDQUFDLENBQUM7SUFDMUY7SUFDQSxJQUFJSCxVQUFVLENBQUNyTyxNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQ3pCLElBQUksQ0FBQ3NPLFlBQVksRUFBRTtRQUNqQixNQUFNLElBQUk3UixTQUFTLENBQ2hCLHlHQUNILENBQUM7TUFDSCxDQUFDLE1BQU07UUFDTCtQLE1BQU0sQ0FBQ1gsSUFBSSxHQUFHO1VBQ1o0QyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3JCLENBQUM7UUFDRCxJQUFJWixjQUFjLENBQUNULElBQUksRUFBRTtVQUN2QlosTUFBTSxDQUFDWCxJQUFJLENBQUM0QyxnQkFBZ0IsQ0FBQ2pCLElBQUksR0FBR0ssY0FBYyxDQUFDVCxJQUFJO1FBQ3pEO1FBQ0EsSUFBSVMsY0FBYyxDQUFDSyxJQUFJLEtBQUtsWSx3QkFBd0IsQ0FBQ2dZLElBQUksRUFBRTtVQUN6RHhCLE1BQU0sQ0FBQ1gsSUFBSSxDQUFDNEMsZ0JBQWdCLENBQUNDLElBQUksR0FBR2IsY0FBYyxDQUFDTSxRQUFRO1FBQzdELENBQUMsTUFBTSxJQUFJTixjQUFjLENBQUNLLElBQUksS0FBS2xZLHdCQUF3QixDQUFDaVksS0FBSyxFQUFFO1VBQ2pFekIsTUFBTSxDQUFDWCxJQUFJLENBQUM0QyxnQkFBZ0IsQ0FBQ0UsS0FBSyxHQUFHZCxjQUFjLENBQUNNLFFBQVE7UUFDOUQ7TUFDRjtJQUNGO0lBRUEsTUFBTTdGLE9BQU8sR0FBRyxJQUFJL1MsTUFBTSxDQUFDZ0UsT0FBTyxDQUFDO01BQ2pDbVQsUUFBUSxFQUFFLHlCQUF5QjtNQUNuQ2xULFVBQVUsRUFBRTtRQUFFQyxNQUFNLEVBQUU7TUFBTSxDQUFDO01BQzdCQyxRQUFRLEVBQUU7SUFDWixDQUFDLENBQUM7SUFDRixNQUFNb0csT0FBTyxHQUFHd0ksT0FBTyxDQUFDbkcsV0FBVyxDQUFDcUssTUFBTSxDQUFDO0lBRTNDLE1BQU1sUCxPQUF1QixHQUFHLENBQUMsQ0FBQztJQUNsQ0EsT0FBTyxDQUFDLGFBQWEsQ0FBQyxHQUFHbEYsS0FBSyxDQUFDMEgsT0FBTyxDQUFDO0lBRXZDLE1BQU0sSUFBSSxDQUFDSyxvQkFBb0IsQ0FBQztNQUFFOUMsTUFBTTtNQUFFVCxVQUFVO01BQUVXLEtBQUs7TUFBRUQ7SUFBUSxDQUFDLEVBQUV3QyxPQUFPLENBQUM7RUFDbEY7RUFFQSxNQUFNOE8sbUJBQW1CQSxDQUFDaFMsVUFBa0IsRUFBMEM7SUFDcEYsSUFBSSxDQUFDcEYsaUJBQWlCLENBQUNvRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUluSCxNQUFNLENBQUNxTCxzQkFBc0IsQ0FBQyx1QkFBdUIsR0FBR2xFLFVBQVUsQ0FBQztJQUMvRTtJQUNBLE1BQU1TLE1BQU0sR0FBRyxLQUFLO0lBQ3BCLE1BQU1FLEtBQUssR0FBRyxZQUFZO0lBRTFCLE1BQU00TCxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUN0SixnQkFBZ0IsQ0FBQztNQUFFeEMsTUFBTTtNQUFFVCxVQUFVO01BQUVXO0lBQU0sQ0FBQyxDQUFDO0lBQzFFLE1BQU02TCxTQUFTLEdBQUcsTUFBTXZRLFlBQVksQ0FBQ3NRLE9BQU8sQ0FBQztJQUM3QyxPQUFPLE1BQU05UCxVQUFVLENBQUN3ViwyQkFBMkIsQ0FBQ3pGLFNBQVMsQ0FBQztFQUNoRTtFQUVBLE1BQU0wRixtQkFBbUJBLENBQUNsUyxVQUFrQixFQUFFbVMsYUFBNEMsRUFBaUI7SUFDekcsSUFBSSxDQUFDdlgsaUJBQWlCLENBQUNvRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUluSCxNQUFNLENBQUNxTCxzQkFBc0IsQ0FBQyx1QkFBdUIsR0FBR2xFLFVBQVUsQ0FBQztJQUMvRTtJQUNBLElBQUksQ0FBQ2lCLE1BQU0sQ0FBQ29PLElBQUksQ0FBQzhDLGFBQWEsQ0FBQyxDQUFDL08sTUFBTSxFQUFFO01BQ3RDLE1BQU0sSUFBSXZLLE1BQU0sQ0FBQ2tGLG9CQUFvQixDQUFDLDBDQUEwQyxDQUFDO0lBQ25GO0lBRUEsTUFBTTBDLE1BQU0sR0FBRyxLQUFLO0lBQ3BCLE1BQU1FLEtBQUssR0FBRyxZQUFZO0lBQzFCLE1BQU0rSyxPQUFPLEdBQUcsSUFBSS9TLE1BQU0sQ0FBQ2dFLE9BQU8sQ0FBQztNQUNqQ21ULFFBQVEsRUFBRSx5QkFBeUI7TUFDbkNsVCxVQUFVLEVBQUU7UUFBRUMsTUFBTSxFQUFFO01BQU0sQ0FBQztNQUM3QkMsUUFBUSxFQUFFO0lBQ1osQ0FBQyxDQUFDO0lBQ0YsTUFBTW9HLE9BQU8sR0FBR3dJLE9BQU8sQ0FBQ25HLFdBQVcsQ0FBQzRNLGFBQWEsQ0FBQztJQUVsRCxNQUFNLElBQUksQ0FBQzVPLG9CQUFvQixDQUFDO01BQUU5QyxNQUFNO01BQUVULFVBQVU7TUFBRVc7SUFBTSxDQUFDLEVBQUV1QyxPQUFPLENBQUM7RUFDekU7RUFFQSxNQUFja1AsVUFBVUEsQ0FBQ0MsYUFBK0IsRUFBaUI7SUFDdkUsTUFBTTtNQUFFclMsVUFBVTtNQUFFQyxVQUFVO01BQUVxUyxJQUFJO01BQUVDO0lBQVEsQ0FBQyxHQUFHRixhQUFhO0lBQy9ELE1BQU01UixNQUFNLEdBQUcsS0FBSztJQUNwQixJQUFJRSxLQUFLLEdBQUcsU0FBUztJQUVyQixJQUFJNFIsT0FBTyxJQUFJQSxPQUFPLGFBQVBBLE9BQU8sZUFBUEEsT0FBTyxDQUFFaEssU0FBUyxFQUFFO01BQ2pDNUgsS0FBSyxHQUFJLEdBQUVBLEtBQU0sY0FBYTRSLE9BQU8sQ0FBQ2hLLFNBQVUsRUFBQztJQUNuRDtJQUNBLE1BQU1pSyxRQUFRLEdBQUcsRUFBRTtJQUNuQixLQUFLLE1BQU0sQ0FBQ3hJLEdBQUcsRUFBRXlJLEtBQUssQ0FBQyxJQUFJeFIsTUFBTSxDQUFDQyxPQUFPLENBQUNvUixJQUFJLENBQUMsRUFBRTtNQUMvQ0UsUUFBUSxDQUFDNUwsSUFBSSxDQUFDO1FBQUU4TCxHQUFHLEVBQUUxSSxHQUFHO1FBQUUySSxLQUFLLEVBQUVGO01BQU0sQ0FBQyxDQUFDO0lBQzNDO0lBQ0EsTUFBTUcsYUFBYSxHQUFHO01BQ3BCQyxPQUFPLEVBQUU7UUFDUEMsTUFBTSxFQUFFO1VBQ05DLEdBQUcsRUFBRVA7UUFDUDtNQUNGO0lBQ0YsQ0FBQztJQUNELE1BQU05UixPQUFPLEdBQUcsQ0FBQyxDQUFtQjtJQUNwQyxNQUFNZ0wsT0FBTyxHQUFHLElBQUkvUyxNQUFNLENBQUNnRSxPQUFPLENBQUM7TUFBRUcsUUFBUSxFQUFFLElBQUk7TUFBRUYsVUFBVSxFQUFFO1FBQUVDLE1BQU0sRUFBRTtNQUFNO0lBQUUsQ0FBQyxDQUFDO0lBQ3JGLE1BQU1tVyxVQUFVLEdBQUdyUCxNQUFNLENBQUN5RCxJQUFJLENBQUNzRSxPQUFPLENBQUNuRyxXQUFXLENBQUNxTixhQUFhLENBQUMsQ0FBQztJQUNsRSxNQUFNMUgsY0FBYyxHQUFHO01BQ3JCekssTUFBTTtNQUNOVCxVQUFVO01BQ1ZXLEtBQUs7TUFDTEQsT0FBTztNQUVQLElBQUlULFVBQVUsSUFBSTtRQUFFQSxVQUFVLEVBQUVBO01BQVcsQ0FBQztJQUM5QyxDQUFDO0lBRURTLE9BQU8sQ0FBQyxhQUFhLENBQUMsR0FBR2xGLEtBQUssQ0FBQ3dYLFVBQVUsQ0FBQztJQUUxQyxNQUFNLElBQUksQ0FBQ3pQLG9CQUFvQixDQUFDMkgsY0FBYyxFQUFFOEgsVUFBVSxDQUFDO0VBQzdEO0VBRUEsTUFBY0MsYUFBYUEsQ0FBQztJQUFFalQsVUFBVTtJQUFFQyxVQUFVO0lBQUV3STtFQUFnQyxDQUFDLEVBQWlCO0lBQ3RHLE1BQU1oSSxNQUFNLEdBQUcsUUFBUTtJQUN2QixJQUFJRSxLQUFLLEdBQUcsU0FBUztJQUVyQixJQUFJOEgsVUFBVSxJQUFJeEgsTUFBTSxDQUFDb08sSUFBSSxDQUFDNUcsVUFBVSxDQUFDLENBQUNyRixNQUFNLElBQUlxRixVQUFVLENBQUNGLFNBQVMsRUFBRTtNQUN4RTVILEtBQUssR0FBSSxHQUFFQSxLQUFNLGNBQWE4SCxVQUFVLENBQUNGLFNBQVUsRUFBQztJQUN0RDtJQUNBLE1BQU0yQyxjQUFjLEdBQUc7TUFBRXpLLE1BQU07TUFBRVQsVUFBVTtNQUFFQyxVQUFVO01BQUVVO0lBQU0sQ0FBQztJQUVoRSxJQUFJVixVQUFVLEVBQUU7TUFDZGlMLGNBQWMsQ0FBQyxZQUFZLENBQUMsR0FBR2pMLFVBQVU7SUFDM0M7SUFDQSxNQUFNLElBQUksQ0FBQ2dELGdCQUFnQixDQUFDaUksY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUM3RDtFQUVBLE1BQU1nSSxnQkFBZ0JBLENBQUNsVCxVQUFrQixFQUFFc1MsSUFBVSxFQUFpQjtJQUNwRSxJQUFJLENBQUMxWCxpQkFBaUIsQ0FBQ29GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSW5ILE1BQU0sQ0FBQ3FMLHNCQUFzQixDQUFDLHVCQUF1QixHQUFHbEUsVUFBVSxDQUFDO0lBQy9FO0lBQ0EsSUFBSSxDQUFDdkYsUUFBUSxDQUFDNlgsSUFBSSxDQUFDLEVBQUU7TUFDbkIsTUFBTSxJQUFJelosTUFBTSxDQUFDa0Ysb0JBQW9CLENBQUMsaUNBQWlDLENBQUM7SUFDMUU7SUFDQSxJQUFJa0QsTUFBTSxDQUFDb08sSUFBSSxDQUFDaUQsSUFBSSxDQUFDLENBQUNsUCxNQUFNLEdBQUcsRUFBRSxFQUFFO01BQ2pDLE1BQU0sSUFBSXZLLE1BQU0sQ0FBQ2tGLG9CQUFvQixDQUFDLDZCQUE2QixDQUFDO0lBQ3RFO0lBRUEsTUFBTSxJQUFJLENBQUNxVSxVQUFVLENBQUM7TUFBRXBTLFVBQVU7TUFBRXNTO0lBQUssQ0FBQyxDQUFDO0VBQzdDO0VBRUEsTUFBTWEsbUJBQW1CQSxDQUFDblQsVUFBa0IsRUFBRTtJQUM1QyxJQUFJLENBQUNwRixpQkFBaUIsQ0FBQ29GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSW5ILE1BQU0sQ0FBQ3FMLHNCQUFzQixDQUFDLHVCQUF1QixHQUFHbEUsVUFBVSxDQUFDO0lBQy9FO0lBQ0EsTUFBTSxJQUFJLENBQUNpVCxhQUFhLENBQUM7TUFBRWpUO0lBQVcsQ0FBQyxDQUFDO0VBQzFDO0VBRUEsTUFBTW9ULGdCQUFnQkEsQ0FBQ3BULFVBQWtCLEVBQUVDLFVBQWtCLEVBQUVxUyxJQUFVLEVBQUVDLE9BQXFCLEVBQUU7SUFDaEcsSUFBSSxDQUFDM1gsaUJBQWlCLENBQUNvRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUluSCxNQUFNLENBQUNxTCxzQkFBc0IsQ0FBQyx1QkFBdUIsR0FBR2xFLFVBQVUsQ0FBQztJQUMvRTtJQUNBLElBQUksQ0FBQ2xGLGlCQUFpQixDQUFDbUYsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJcEgsTUFBTSxDQUFDcUwsc0JBQXNCLENBQUMsdUJBQXVCLEdBQUdqRSxVQUFVLENBQUM7SUFDL0U7SUFFQSxJQUFJLENBQUN4RixRQUFRLENBQUM2WCxJQUFJLENBQUMsRUFBRTtNQUNuQixNQUFNLElBQUl6WixNQUFNLENBQUNrRixvQkFBb0IsQ0FBQyxpQ0FBaUMsQ0FBQztJQUMxRTtJQUNBLElBQUlrRCxNQUFNLENBQUNvTyxJQUFJLENBQUNpRCxJQUFJLENBQUMsQ0FBQ2xQLE1BQU0sR0FBRyxFQUFFLEVBQUU7TUFDakMsTUFBTSxJQUFJdkssTUFBTSxDQUFDa0Ysb0JBQW9CLENBQUMsNkJBQTZCLENBQUM7SUFDdEU7SUFFQSxNQUFNLElBQUksQ0FBQ3FVLFVBQVUsQ0FBQztNQUFFcFMsVUFBVTtNQUFFQyxVQUFVO01BQUVxUyxJQUFJO01BQUVDO0lBQVEsQ0FBQyxDQUFDO0VBQ2xFO0VBRUEsTUFBTWMsbUJBQW1CQSxDQUFDclQsVUFBa0IsRUFBRUMsVUFBa0IsRUFBRXdJLFVBQXVCLEVBQUU7SUFDekYsSUFBSSxDQUFDN04saUJBQWlCLENBQUNvRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUluSCxNQUFNLENBQUNxTCxzQkFBc0IsQ0FBQyx1QkFBdUIsR0FBR2xFLFVBQVUsQ0FBQztJQUMvRTtJQUNBLElBQUksQ0FBQ2xGLGlCQUFpQixDQUFDbUYsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJcEgsTUFBTSxDQUFDcUwsc0JBQXNCLENBQUMsdUJBQXVCLEdBQUdqRSxVQUFVLENBQUM7SUFDL0U7SUFDQSxJQUFJd0ksVUFBVSxJQUFJeEgsTUFBTSxDQUFDb08sSUFBSSxDQUFDNUcsVUFBVSxDQUFDLENBQUNyRixNQUFNLElBQUksQ0FBQzNJLFFBQVEsQ0FBQ2dPLFVBQVUsQ0FBQyxFQUFFO01BQ3pFLE1BQU0sSUFBSTVQLE1BQU0sQ0FBQ2tGLG9CQUFvQixDQUFDLHVDQUF1QyxDQUFDO0lBQ2hGO0lBRUEsTUFBTSxJQUFJLENBQUNrVixhQUFhLENBQUM7TUFBRWpULFVBQVU7TUFBRUMsVUFBVTtNQUFFd0k7SUFBVyxDQUFDLENBQUM7RUFDbEU7RUFFQSxNQUFNNkssbUJBQW1CQSxDQUN2QnRULFVBQWtCLEVBQ2xCQyxVQUFrQixFQUNsQnNULFVBQXlCLEVBQ1c7SUFDcEMsSUFBSSxDQUFDM1ksaUJBQWlCLENBQUNvRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUluSCxNQUFNLENBQUNxTCxzQkFBc0IsQ0FBRSx3QkFBdUJsRSxVQUFXLEVBQUMsQ0FBQztJQUMvRTtJQUNBLElBQUksQ0FBQ2xGLGlCQUFpQixDQUFDbUYsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJcEgsTUFBTSxDQUFDc04sc0JBQXNCLENBQUUsd0JBQXVCbEcsVUFBVyxFQUFDLENBQUM7SUFDL0U7SUFDQSxJQUFJLENBQUN4SCxDQUFDLENBQUM4QixPQUFPLENBQUNnWixVQUFVLENBQUMsRUFBRTtNQUMxQixJQUFJLENBQUM1WSxRQUFRLENBQUM0WSxVQUFVLENBQUNDLFVBQVUsQ0FBQyxFQUFFO1FBQ3BDLE1BQU0sSUFBSTNULFNBQVMsQ0FBQywwQ0FBMEMsQ0FBQztNQUNqRTtNQUNBLElBQUksQ0FBQ3BILENBQUMsQ0FBQzhCLE9BQU8sQ0FBQ2daLFVBQVUsQ0FBQ0Usa0JBQWtCLENBQUMsRUFBRTtRQUM3QyxJQUFJLENBQUNoWixRQUFRLENBQUM4WSxVQUFVLENBQUNFLGtCQUFrQixDQUFDLEVBQUU7VUFDNUMsTUFBTSxJQUFJNVQsU0FBUyxDQUFDLCtDQUErQyxDQUFDO1FBQ3RFO01BQ0YsQ0FBQyxNQUFNO1FBQ0wsTUFBTSxJQUFJQSxTQUFTLENBQUMsZ0NBQWdDLENBQUM7TUFDdkQ7TUFDQSxJQUFJLENBQUNwSCxDQUFDLENBQUM4QixPQUFPLENBQUNnWixVQUFVLENBQUNHLG1CQUFtQixDQUFDLEVBQUU7UUFDOUMsSUFBSSxDQUFDalosUUFBUSxDQUFDOFksVUFBVSxDQUFDRyxtQkFBbUIsQ0FBQyxFQUFFO1VBQzdDLE1BQU0sSUFBSTdULFNBQVMsQ0FBQyxnREFBZ0QsQ0FBQztRQUN2RTtNQUNGLENBQUMsTUFBTTtRQUNMLE1BQU0sSUFBSUEsU0FBUyxDQUFDLGlDQUFpQyxDQUFDO01BQ3hEO0lBQ0YsQ0FBQyxNQUFNO01BQ0wsTUFBTSxJQUFJQSxTQUFTLENBQUMsd0NBQXdDLENBQUM7SUFDL0Q7SUFFQSxNQUFNWSxNQUFNLEdBQUcsTUFBTTtJQUNyQixNQUFNRSxLQUFLLEdBQUksc0JBQXFCO0lBRXBDLE1BQU1pUCxNQUFpQyxHQUFHLENBQ3hDO01BQ0UrRCxVQUFVLEVBQUVKLFVBQVUsQ0FBQ0M7SUFDekIsQ0FBQyxFQUNEO01BQ0VJLGNBQWMsRUFBRUwsVUFBVSxDQUFDTSxjQUFjLElBQUk7SUFDL0MsQ0FBQyxFQUNEO01BQ0VDLGtCQUFrQixFQUFFLENBQUNQLFVBQVUsQ0FBQ0Usa0JBQWtCO0lBQ3BELENBQUMsRUFDRDtNQUNFTSxtQkFBbUIsRUFBRSxDQUFDUixVQUFVLENBQUNHLG1CQUFtQjtJQUN0RCxDQUFDLENBQ0Y7O0lBRUQ7SUFDQSxJQUFJSCxVQUFVLENBQUNTLGVBQWUsRUFBRTtNQUM5QnBFLE1BQU0sQ0FBQ2hKLElBQUksQ0FBQztRQUFFcU4sZUFBZSxFQUFFVixVQUFVLGFBQVZBLFVBQVUsdUJBQVZBLFVBQVUsQ0FBRVM7TUFBZ0IsQ0FBQyxDQUFDO0lBQy9EO0lBQ0E7SUFDQSxJQUFJVCxVQUFVLENBQUNXLFNBQVMsRUFBRTtNQUN4QnRFLE1BQU0sQ0FBQ2hKLElBQUksQ0FBQztRQUFFdU4sU0FBUyxFQUFFWixVQUFVLENBQUNXO01BQVUsQ0FBQyxDQUFDO0lBQ2xEO0lBRUEsTUFBTXhJLE9BQU8sR0FBRyxJQUFJL1MsTUFBTSxDQUFDZ0UsT0FBTyxDQUFDO01BQ2pDbVQsUUFBUSxFQUFFLDRCQUE0QjtNQUN0Q2xULFVBQVUsRUFBRTtRQUFFQyxNQUFNLEVBQUU7TUFBTSxDQUFDO01BQzdCQyxRQUFRLEVBQUU7SUFDWixDQUFDLENBQUM7SUFDRixNQUFNb0csT0FBTyxHQUFHd0ksT0FBTyxDQUFDbkcsV0FBVyxDQUFDcUssTUFBTSxDQUFDO0lBRTNDLE1BQU1uTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUNSLGdCQUFnQixDQUFDO01BQUV4QyxNQUFNO01BQUVULFVBQVU7TUFBRUMsVUFBVTtNQUFFVTtJQUFNLENBQUMsRUFBRXVDLE9BQU8sQ0FBQztJQUMzRixNQUFNUSxJQUFJLEdBQUcsTUFBTTFILFlBQVksQ0FBQ3lILEdBQUcsQ0FBQztJQUNwQyxPQUFPbEgsZ0NBQWdDLENBQUNtSCxJQUFJLENBQUM7RUFDL0M7RUFFQSxNQUFjMFEsb0JBQW9CQSxDQUFDcFUsVUFBa0IsRUFBRXFVLFlBQWtDLEVBQWlCO0lBQ3hHLE1BQU01VCxNQUFNLEdBQUcsS0FBSztJQUNwQixNQUFNRSxLQUFLLEdBQUcsV0FBVztJQUV6QixNQUFNRCxPQUF1QixHQUFHLENBQUMsQ0FBQztJQUNsQyxNQUFNZ0wsT0FBTyxHQUFHLElBQUkvUyxNQUFNLENBQUNnRSxPQUFPLENBQUM7TUFDakNtVCxRQUFRLEVBQUUsd0JBQXdCO01BQ2xDaFQsUUFBUSxFQUFFLElBQUk7TUFDZEYsVUFBVSxFQUFFO1FBQUVDLE1BQU0sRUFBRTtNQUFNO0lBQzlCLENBQUMsQ0FBQztJQUNGLE1BQU1xRyxPQUFPLEdBQUd3SSxPQUFPLENBQUNuRyxXQUFXLENBQUM4TyxZQUFZLENBQUM7SUFDakQzVCxPQUFPLENBQUMsYUFBYSxDQUFDLEdBQUdsRixLQUFLLENBQUMwSCxPQUFPLENBQUM7SUFFdkMsTUFBTSxJQUFJLENBQUNLLG9CQUFvQixDQUFDO01BQUU5QyxNQUFNO01BQUVULFVBQVU7TUFBRVcsS0FBSztNQUFFRDtJQUFRLENBQUMsRUFBRXdDLE9BQU8sQ0FBQztFQUNsRjtFQUVBLE1BQU1vUixxQkFBcUJBLENBQUN0VSxVQUFrQixFQUFpQjtJQUM3RCxJQUFJLENBQUNwRixpQkFBaUIsQ0FBQ29GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSW5ILE1BQU0sQ0FBQ3FMLHNCQUFzQixDQUFDLHVCQUF1QixHQUFHbEUsVUFBVSxDQUFDO0lBQy9FO0lBQ0EsTUFBTVMsTUFBTSxHQUFHLFFBQVE7SUFDdkIsTUFBTUUsS0FBSyxHQUFHLFdBQVc7SUFDekIsTUFBTSxJQUFJLENBQUM0QyxvQkFBb0IsQ0FBQztNQUFFOUMsTUFBTTtNQUFFVCxVQUFVO01BQUVXO0lBQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQzNFO0VBRUEsTUFBTTRULGtCQUFrQkEsQ0FBQ3ZVLFVBQWtCLEVBQUV3VSxlQUFxQyxFQUFpQjtJQUNqRyxJQUFJLENBQUM1WixpQkFBaUIsQ0FBQ29GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSW5ILE1BQU0sQ0FBQ3FMLHNCQUFzQixDQUFDLHVCQUF1QixHQUFHbEUsVUFBVSxDQUFDO0lBQy9FO0lBQ0EsSUFBSXZILENBQUMsQ0FBQzhCLE9BQU8sQ0FBQ2lhLGVBQWUsQ0FBQyxFQUFFO01BQzlCLE1BQU0sSUFBSSxDQUFDRixxQkFBcUIsQ0FBQ3RVLFVBQVUsQ0FBQztJQUM5QyxDQUFDLE1BQU07TUFDTCxNQUFNLElBQUksQ0FBQ29VLG9CQUFvQixDQUFDcFUsVUFBVSxFQUFFd1UsZUFBZSxDQUFDO0lBQzlEO0VBQ0Y7RUFFQSxNQUFNQyxrQkFBa0JBLENBQUN6VSxVQUFrQixFQUFtQztJQUM1RSxJQUFJLENBQUNwRixpQkFBaUIsQ0FBQ29GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSW5ILE1BQU0sQ0FBQ3FMLHNCQUFzQixDQUFDLHVCQUF1QixHQUFHbEUsVUFBVSxDQUFDO0lBQy9FO0lBQ0EsTUFBTVMsTUFBTSxHQUFHLEtBQUs7SUFDcEIsTUFBTUUsS0FBSyxHQUFHLFdBQVc7SUFFekIsTUFBTThDLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQ1IsZ0JBQWdCLENBQUM7TUFBRXhDLE1BQU07TUFBRVQsVUFBVTtNQUFFVztJQUFNLENBQUMsQ0FBQztJQUN0RSxNQUFNK0MsSUFBSSxHQUFHLE1BQU16SCxZQUFZLENBQUN3SCxHQUFHLENBQUM7SUFDcEMsT0FBT2hILFVBQVUsQ0FBQ2lZLG9CQUFvQixDQUFDaFIsSUFBSSxDQUFDO0VBQzlDO0VBRUEsTUFBTWlSLG1CQUFtQkEsQ0FBQzNVLFVBQWtCLEVBQUU0VSxnQkFBbUMsRUFBaUI7SUFDaEcsSUFBSSxDQUFDaGEsaUJBQWlCLENBQUNvRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUluSCxNQUFNLENBQUNxTCxzQkFBc0IsQ0FBQyx1QkFBdUIsR0FBR2xFLFVBQVUsQ0FBQztJQUMvRTtJQUNBLElBQUksQ0FBQ3ZILENBQUMsQ0FBQzhCLE9BQU8sQ0FBQ3FhLGdCQUFnQixDQUFDLElBQUlBLGdCQUFnQixDQUFDM0YsSUFBSSxDQUFDN0wsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUNwRSxNQUFNLElBQUl2SyxNQUFNLENBQUNrRixvQkFBb0IsQ0FBQyxrREFBa0QsR0FBRzZXLGdCQUFnQixDQUFDM0YsSUFBSSxDQUFDO0lBQ25IO0lBRUEsSUFBSTRGLGFBQWEsR0FBR0QsZ0JBQWdCO0lBQ3BDLElBQUluYyxDQUFDLENBQUM4QixPQUFPLENBQUNxYSxnQkFBZ0IsQ0FBQyxFQUFFO01BQy9CQyxhQUFhLEdBQUc7UUFDZDtRQUNBNUYsSUFBSSxFQUFFLENBQ0o7VUFDRTZGLGtDQUFrQyxFQUFFO1lBQ2xDQyxZQUFZLEVBQUU7VUFDaEI7UUFDRixDQUFDO01BRUwsQ0FBQztJQUNIO0lBRUEsTUFBTXRVLE1BQU0sR0FBRyxLQUFLO0lBQ3BCLE1BQU1FLEtBQUssR0FBRyxZQUFZO0lBQzFCLE1BQU0rSyxPQUFPLEdBQUcsSUFBSS9TLE1BQU0sQ0FBQ2dFLE9BQU8sQ0FBQztNQUNqQ21ULFFBQVEsRUFBRSxtQ0FBbUM7TUFDN0NsVCxVQUFVLEVBQUU7UUFBRUMsTUFBTSxFQUFFO01BQU0sQ0FBQztNQUM3QkMsUUFBUSxFQUFFO0lBQ1osQ0FBQyxDQUFDO0lBQ0YsTUFBTW9HLE9BQU8sR0FBR3dJLE9BQU8sQ0FBQ25HLFdBQVcsQ0FBQ3NQLGFBQWEsQ0FBQztJQUVsRCxNQUFNblUsT0FBdUIsR0FBRyxDQUFDLENBQUM7SUFDbENBLE9BQU8sQ0FBQyxhQUFhLENBQUMsR0FBR2xGLEtBQUssQ0FBQzBILE9BQU8sQ0FBQztJQUV2QyxNQUFNLElBQUksQ0FBQ0ssb0JBQW9CLENBQUM7TUFBRTlDLE1BQU07TUFBRVQsVUFBVTtNQUFFVyxLQUFLO01BQUVEO0lBQVEsQ0FBQyxFQUFFd0MsT0FBTyxDQUFDO0VBQ2xGO0VBRUEsTUFBTThSLG1CQUFtQkEsQ0FBQ2hWLFVBQWtCLEVBQUU7SUFDNUMsSUFBSSxDQUFDcEYsaUJBQWlCLENBQUNvRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUluSCxNQUFNLENBQUNxTCxzQkFBc0IsQ0FBQyx1QkFBdUIsR0FBR2xFLFVBQVUsQ0FBQztJQUMvRTtJQUNBLE1BQU1TLE1BQU0sR0FBRyxLQUFLO0lBQ3BCLE1BQU1FLEtBQUssR0FBRyxZQUFZO0lBRTFCLE1BQU04QyxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUNSLGdCQUFnQixDQUFDO01BQUV4QyxNQUFNO01BQUVULFVBQVU7TUFBRVc7SUFBTSxDQUFDLENBQUM7SUFDdEUsTUFBTStDLElBQUksR0FBRyxNQUFNekgsWUFBWSxDQUFDd0gsR0FBRyxDQUFDO0lBQ3BDLE9BQU9oSCxVQUFVLENBQUN3WSwyQkFBMkIsQ0FBQ3ZSLElBQUksQ0FBQztFQUNyRDtFQUVBLE1BQU13UixzQkFBc0JBLENBQUNsVixVQUFrQixFQUFFO0lBQy9DLElBQUksQ0FBQ3BGLGlCQUFpQixDQUFDb0YsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJbkgsTUFBTSxDQUFDcUwsc0JBQXNCLENBQUMsdUJBQXVCLEdBQUdsRSxVQUFVLENBQUM7SUFDL0U7SUFDQSxNQUFNUyxNQUFNLEdBQUcsUUFBUTtJQUN2QixNQUFNRSxLQUFLLEdBQUcsWUFBWTtJQUUxQixNQUFNLElBQUksQ0FBQzRDLG9CQUFvQixDQUFDO01BQUU5QyxNQUFNO01BQUVULFVBQVU7TUFBRVc7SUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDM0U7RUFFQSxNQUFNd1Usa0JBQWtCQSxDQUN0Qm5WLFVBQWtCLEVBQ2xCQyxVQUFrQixFQUNsQmlHLE9BQWdDLEVBQ2lCO0lBQ2pELElBQUksQ0FBQ3RMLGlCQUFpQixDQUFDb0YsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJbkgsTUFBTSxDQUFDcUwsc0JBQXNCLENBQUMsdUJBQXVCLEdBQUdsRSxVQUFVLENBQUM7SUFDL0U7SUFDQSxJQUFJLENBQUNsRixpQkFBaUIsQ0FBQ21GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSXBILE1BQU0sQ0FBQ3NOLHNCQUFzQixDQUFFLHdCQUF1QmxHLFVBQVcsRUFBQyxDQUFDO0lBQy9FO0lBQ0EsSUFBSWlHLE9BQU8sSUFBSSxDQUFDekwsUUFBUSxDQUFDeUwsT0FBTyxDQUFDLEVBQUU7TUFDakMsTUFBTSxJQUFJck4sTUFBTSxDQUFDa0Ysb0JBQW9CLENBQUMsb0NBQW9DLENBQUM7SUFDN0UsQ0FBQyxNQUFNLElBQUltSSxPQUFPLGFBQVBBLE9BQU8sZUFBUEEsT0FBTyxDQUFFcUMsU0FBUyxJQUFJLENBQUM1TixRQUFRLENBQUN1TCxPQUFPLENBQUNxQyxTQUFTLENBQUMsRUFBRTtNQUM3RCxNQUFNLElBQUkxUCxNQUFNLENBQUNrRixvQkFBb0IsQ0FBQyxzQ0FBc0MsQ0FBQztJQUMvRTtJQUVBLE1BQU0wQyxNQUFNLEdBQUcsS0FBSztJQUNwQixJQUFJRSxLQUFLLEdBQUcsV0FBVztJQUN2QixJQUFJdUYsT0FBTyxhQUFQQSxPQUFPLGVBQVBBLE9BQU8sQ0FBRXFDLFNBQVMsRUFBRTtNQUN0QjVILEtBQUssSUFBSyxjQUFhdUYsT0FBTyxDQUFDcUMsU0FBVSxFQUFDO0lBQzVDO0lBQ0EsTUFBTTlFLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQ1IsZ0JBQWdCLENBQUM7TUFBRXhDLE1BQU07TUFBRVQsVUFBVTtNQUFFQyxVQUFVO01BQUVVO0lBQU0sQ0FBQyxDQUFDO0lBQ2xGLE1BQU0rQyxJQUFJLEdBQUcsTUFBTXpILFlBQVksQ0FBQ3dILEdBQUcsQ0FBQztJQUNwQyxPQUFPaEgsVUFBVSxDQUFDMlksMEJBQTBCLENBQUMxUixJQUFJLENBQUM7RUFDcEQ7RUFFQSxNQUFNMlIsYUFBYUEsQ0FBQ3JWLFVBQWtCLEVBQUVzVixXQUErQixFQUFvQztJQUN6RyxJQUFJLENBQUMxYSxpQkFBaUIsQ0FBQ29GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSW5ILE1BQU0sQ0FBQ3FMLHNCQUFzQixDQUFDLHVCQUF1QixHQUFHbEUsVUFBVSxDQUFDO0lBQy9FO0lBQ0EsSUFBSSxDQUFDdVYsS0FBSyxDQUFDQyxPQUFPLENBQUNGLFdBQVcsQ0FBQyxFQUFFO01BQy9CLE1BQU0sSUFBSXpjLE1BQU0sQ0FBQ2tGLG9CQUFvQixDQUFDLDhCQUE4QixDQUFDO0lBQ3ZFO0lBRUEsTUFBTTBYLGdCQUFnQixHQUFHLE1BQU9DLEtBQXlCLElBQXVDO01BQzlGLE1BQU1DLFVBQXVDLEdBQUdELEtBQUssQ0FBQzdKLEdBQUcsQ0FBRTRHLEtBQUssSUFBSztRQUNuRSxPQUFPaFksUUFBUSxDQUFDZ1ksS0FBSyxDQUFDLEdBQUc7VUFBRUMsR0FBRyxFQUFFRCxLQUFLLENBQUMvTixJQUFJO1VBQUVrUixTQUFTLEVBQUVuRCxLQUFLLENBQUNsSztRQUFVLENBQUMsR0FBRztVQUFFbUssR0FBRyxFQUFFRDtRQUFNLENBQUM7TUFDM0YsQ0FBQyxDQUFDO01BRUYsTUFBTW9ELFVBQVUsR0FBRztRQUFFQyxNQUFNLEVBQUU7VUFBRUMsS0FBSyxFQUFFLElBQUk7VUFBRTlVLE1BQU0sRUFBRTBVO1FBQVc7TUFBRSxDQUFDO01BQ2xFLE1BQU16UyxPQUFPLEdBQUdTLE1BQU0sQ0FBQ3lELElBQUksQ0FBQyxJQUFJek8sTUFBTSxDQUFDZ0UsT0FBTyxDQUFDO1FBQUVHLFFBQVEsRUFBRTtNQUFLLENBQUMsQ0FBQyxDQUFDeUksV0FBVyxDQUFDc1EsVUFBVSxDQUFDLENBQUM7TUFDM0YsTUFBTW5WLE9BQXVCLEdBQUc7UUFBRSxhQUFhLEVBQUVsRixLQUFLLENBQUMwSCxPQUFPO01BQUUsQ0FBQztNQUVqRSxNQUFNTyxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUNSLGdCQUFnQixDQUFDO1FBQUV4QyxNQUFNLEVBQUUsTUFBTTtRQUFFVCxVQUFVO1FBQUVXLEtBQUssRUFBRSxRQUFRO1FBQUVEO01BQVEsQ0FBQyxFQUFFd0MsT0FBTyxDQUFDO01BQzFHLE1BQU1RLElBQUksR0FBRyxNQUFNekgsWUFBWSxDQUFDd0gsR0FBRyxDQUFDO01BQ3BDLE9BQU9oSCxVQUFVLENBQUN1WixtQkFBbUIsQ0FBQ3RTLElBQUksQ0FBQztJQUM3QyxDQUFDO0lBRUQsTUFBTXVTLFVBQVUsR0FBRyxJQUFJLEVBQUM7SUFDeEI7SUFDQSxNQUFNQyxPQUFPLEdBQUcsRUFBRTtJQUNsQixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR2IsV0FBVyxDQUFDbFMsTUFBTSxFQUFFK1MsQ0FBQyxJQUFJRixVQUFVLEVBQUU7TUFDdkRDLE9BQU8sQ0FBQ3RQLElBQUksQ0FBQzBPLFdBQVcsQ0FBQ2MsS0FBSyxDQUFDRCxDQUFDLEVBQUVBLENBQUMsR0FBR0YsVUFBVSxDQUFDLENBQUM7SUFDcEQ7SUFFQSxNQUFNSSxZQUFZLEdBQUcsTUFBTXpJLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDcUksT0FBTyxDQUFDckssR0FBRyxDQUFDNEosZ0JBQWdCLENBQUMsQ0FBQztJQUNyRSxPQUFPWSxZQUFZLENBQUNDLElBQUksQ0FBQyxDQUFDO0VBQzVCO0VBRUEsTUFBTUMsc0JBQXNCQSxDQUFDdlcsVUFBa0IsRUFBRUMsVUFBa0IsRUFBaUI7SUFDbEYsSUFBSSxDQUFDckYsaUJBQWlCLENBQUNvRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUluSCxNQUFNLENBQUMyZCxzQkFBc0IsQ0FBQyx1QkFBdUIsR0FBR3hXLFVBQVUsQ0FBQztJQUMvRTtJQUNBLElBQUksQ0FBQ2xGLGlCQUFpQixDQUFDbUYsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJcEgsTUFBTSxDQUFDc04sc0JBQXNCLENBQUUsd0JBQXVCbEcsVUFBVyxFQUFDLENBQUM7SUFDL0U7SUFDQSxNQUFNd1csY0FBYyxHQUFHLE1BQU0sSUFBSSxDQUFDdEwsWUFBWSxDQUFDbkwsVUFBVSxFQUFFQyxVQUFVLENBQUM7SUFDdEUsTUFBTVEsTUFBTSxHQUFHLFFBQVE7SUFDdkIsTUFBTUUsS0FBSyxHQUFJLFlBQVc4VixjQUFlLEVBQUM7SUFDMUMsTUFBTSxJQUFJLENBQUNsVCxvQkFBb0IsQ0FBQztNQUFFOUMsTUFBTTtNQUFFVCxVQUFVO01BQUVDLFVBQVU7TUFBRVU7SUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDdkY7RUFFQSxNQUFjK1YsWUFBWUEsQ0FDeEJDLGdCQUF3QixFQUN4QkMsZ0JBQXdCLEVBQ3hCQyw2QkFBcUMsRUFDckNDLFVBQWtDLEVBQ2xDO0lBQ0EsSUFBSSxPQUFPQSxVQUFVLElBQUksVUFBVSxFQUFFO01BQ25DQSxVQUFVLEdBQUcsSUFBSTtJQUNuQjtJQUVBLElBQUksQ0FBQ2xjLGlCQUFpQixDQUFDK2IsZ0JBQWdCLENBQUMsRUFBRTtNQUN4QyxNQUFNLElBQUk5ZCxNQUFNLENBQUNxTCxzQkFBc0IsQ0FBQyx1QkFBdUIsR0FBR3lTLGdCQUFnQixDQUFDO0lBQ3JGO0lBQ0EsSUFBSSxDQUFDN2IsaUJBQWlCLENBQUM4YixnQkFBZ0IsQ0FBQyxFQUFFO01BQ3hDLE1BQU0sSUFBSS9kLE1BQU0sQ0FBQ3NOLHNCQUFzQixDQUFFLHdCQUF1QnlRLGdCQUFpQixFQUFDLENBQUM7SUFDckY7SUFDQSxJQUFJLENBQUNqYyxRQUFRLENBQUNrYyw2QkFBNkIsQ0FBQyxFQUFFO01BQzVDLE1BQU0sSUFBSWhYLFNBQVMsQ0FBQywwREFBMEQsQ0FBQztJQUNqRjtJQUNBLElBQUlnWCw2QkFBNkIsS0FBSyxFQUFFLEVBQUU7TUFDeEMsTUFBTSxJQUFJaGUsTUFBTSxDQUFDbVEsa0JBQWtCLENBQUUscUJBQW9CLENBQUM7SUFDNUQ7SUFFQSxJQUFJOE4sVUFBVSxJQUFJLElBQUksSUFBSSxFQUFFQSxVQUFVLFlBQVlwZCxjQUFjLENBQUMsRUFBRTtNQUNqRSxNQUFNLElBQUltRyxTQUFTLENBQUMsK0NBQStDLENBQUM7SUFDdEU7SUFFQSxNQUFNYSxPQUF1QixHQUFHLENBQUMsQ0FBQztJQUNsQ0EsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEdBQUcvRSxpQkFBaUIsQ0FBQ2tiLDZCQUE2QixDQUFDO0lBRS9FLElBQUlDLFVBQVUsRUFBRTtNQUNkLElBQUlBLFVBQVUsQ0FBQ0MsUUFBUSxLQUFLLEVBQUUsRUFBRTtRQUM5QnJXLE9BQU8sQ0FBQyxxQ0FBcUMsQ0FBQyxHQUFHb1csVUFBVSxDQUFDQyxRQUFRO01BQ3RFO01BQ0EsSUFBSUQsVUFBVSxDQUFDRSxVQUFVLEtBQUssRUFBRSxFQUFFO1FBQ2hDdFcsT0FBTyxDQUFDLHVDQUF1QyxDQUFDLEdBQUdvVyxVQUFVLENBQUNFLFVBQVU7TUFDMUU7TUFDQSxJQUFJRixVQUFVLENBQUNHLFNBQVMsS0FBSyxFQUFFLEVBQUU7UUFDL0J2VyxPQUFPLENBQUMsNEJBQTRCLENBQUMsR0FBR29XLFVBQVUsQ0FBQ0csU0FBUztNQUM5RDtNQUNBLElBQUlILFVBQVUsQ0FBQ0ksZUFBZSxLQUFLLEVBQUUsRUFBRTtRQUNyQ3hXLE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQyxHQUFHb1csVUFBVSxDQUFDSSxlQUFlO01BQ3pFO0lBQ0Y7SUFFQSxNQUFNelcsTUFBTSxHQUFHLEtBQUs7SUFFcEIsTUFBTWdELEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQ1IsZ0JBQWdCLENBQUM7TUFDdEN4QyxNQUFNO01BQ05ULFVBQVUsRUFBRTJXLGdCQUFnQjtNQUM1QjFXLFVBQVUsRUFBRTJXLGdCQUFnQjtNQUM1QmxXO0lBQ0YsQ0FBQyxDQUFDO0lBQ0YsTUFBTWdELElBQUksR0FBRyxNQUFNekgsWUFBWSxDQUFDd0gsR0FBRyxDQUFDO0lBQ3BDLE9BQU9oSCxVQUFVLENBQUMwYSxlQUFlLENBQUN6VCxJQUFJLENBQUM7RUFDekM7RUFFQSxNQUFjMFQsWUFBWUEsQ0FDeEJDLFlBQStCLEVBQy9CQyxVQUFrQyxFQUNMO0lBQzdCLElBQUksRUFBRUQsWUFBWSxZQUFZdGUsaUJBQWlCLENBQUMsRUFBRTtNQUNoRCxNQUFNLElBQUlGLE1BQU0sQ0FBQ2tGLG9CQUFvQixDQUFDLGdEQUFnRCxDQUFDO0lBQ3pGO0lBQ0EsSUFBSSxFQUFFdVosVUFBVSxZQUFZeGUsc0JBQXNCLENBQUMsRUFBRTtNQUNuRCxNQUFNLElBQUlELE1BQU0sQ0FBQ2tGLG9CQUFvQixDQUFDLG1EQUFtRCxDQUFDO0lBQzVGO0lBQ0EsSUFBSSxDQUFDdVosVUFBVSxDQUFDQyxRQUFRLENBQUMsQ0FBQyxFQUFFO01BQzFCLE9BQU8zSixPQUFPLENBQUNHLE1BQU0sQ0FBQyxDQUFDO0lBQ3pCO0lBQ0EsSUFBSSxDQUFDdUosVUFBVSxDQUFDQyxRQUFRLENBQUMsQ0FBQyxFQUFFO01BQzFCLE9BQU8zSixPQUFPLENBQUNHLE1BQU0sQ0FBQyxDQUFDO0lBQ3pCO0lBRUEsTUFBTXJOLE9BQU8sR0FBR08sTUFBTSxDQUFDRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUVrVyxZQUFZLENBQUNHLFVBQVUsQ0FBQyxDQUFDLEVBQUVGLFVBQVUsQ0FBQ0UsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUVyRixNQUFNeFgsVUFBVSxHQUFHc1gsVUFBVSxDQUFDRyxNQUFNO0lBQ3BDLE1BQU14WCxVQUFVLEdBQUdxWCxVQUFVLENBQUNyVyxNQUFNO0lBRXBDLE1BQU1SLE1BQU0sR0FBRyxLQUFLO0lBRXBCLE1BQU1nRCxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUNSLGdCQUFnQixDQUFDO01BQUV4QyxNQUFNO01BQUVULFVBQVU7TUFBRUMsVUFBVTtNQUFFUztJQUFRLENBQUMsQ0FBQztJQUNwRixNQUFNZ0QsSUFBSSxHQUFHLE1BQU16SCxZQUFZLENBQUN3SCxHQUFHLENBQUM7SUFDcEMsTUFBTWlVLE9BQU8sR0FBR2piLFVBQVUsQ0FBQzBhLGVBQWUsQ0FBQ3pULElBQUksQ0FBQztJQUNoRCxNQUFNaVUsVUFBK0IsR0FBR2xVLEdBQUcsQ0FBQy9DLE9BQU87SUFFbkQsTUFBTWtYLGVBQWUsR0FBR0QsVUFBVSxJQUFJQSxVQUFVLENBQUMsZ0JBQWdCLENBQUM7SUFDbEUsTUFBTS9QLElBQUksR0FBRyxPQUFPZ1EsZUFBZSxLQUFLLFFBQVEsR0FBR0EsZUFBZSxHQUFHbmEsU0FBUztJQUU5RSxPQUFPO01BQ0xnYSxNQUFNLEVBQUVILFVBQVUsQ0FBQ0csTUFBTTtNQUN6Qi9FLEdBQUcsRUFBRTRFLFVBQVUsQ0FBQ3JXLE1BQU07TUFDdEI0VyxZQUFZLEVBQUVILE9BQU8sQ0FBQ3BQLFlBQVk7TUFDbEN3UCxRQUFRLEVBQUVqZSxlQUFlLENBQUM4ZCxVQUE0QixDQUFDO01BQ3ZEL0IsU0FBUyxFQUFFM2IsWUFBWSxDQUFDMGQsVUFBNEIsQ0FBQztNQUNyREksZUFBZSxFQUFFL2Qsa0JBQWtCLENBQUMyZCxVQUE0QixDQUFDO01BQ2pFSyxJQUFJLEVBQUV6YyxZQUFZLENBQUNvYyxVQUFVLENBQUN0USxJQUFJLENBQUM7TUFDbkM0USxJQUFJLEVBQUVyUTtJQUNSLENBQUM7RUFDSDtFQVNBLE1BQU1zUSxVQUFVQSxDQUFDLEdBQUdDLE9BQXlCLEVBQTZCO0lBQ3hFLElBQUksT0FBT0EsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtNQUNsQyxNQUFNLENBQUN4QixnQkFBZ0IsRUFBRUMsZ0JBQWdCLEVBQUVDLDZCQUE2QixFQUFFQyxVQUFVLENBQUMsR0FBR3FCLE9BS3ZGO01BQ0QsT0FBTyxNQUFNLElBQUksQ0FBQ3pCLFlBQVksQ0FBQ0MsZ0JBQWdCLEVBQUVDLGdCQUFnQixFQUFFQyw2QkFBNkIsRUFBRUMsVUFBVSxDQUFDO0lBQy9HO0lBQ0EsTUFBTSxDQUFDc0IsTUFBTSxFQUFFQyxJQUFJLENBQUMsR0FBR0YsT0FBc0Q7SUFDN0UsT0FBTyxNQUFNLElBQUksQ0FBQ2YsWUFBWSxDQUFDZ0IsTUFBTSxFQUFFQyxJQUFJLENBQUM7RUFDOUM7RUFFQSxNQUFNQyxVQUFVQSxDQUNkQyxVQU1DLEVBQ0RyVixPQUFnQixFQUNoQjtJQUNBLE1BQU07TUFBRWxELFVBQVU7TUFBRUMsVUFBVTtNQUFFdVksUUFBUTtNQUFFdEssVUFBVTtNQUFFeE47SUFBUSxDQUFDLEdBQUc2WCxVQUFVO0lBRTVFLE1BQU05WCxNQUFNLEdBQUcsS0FBSztJQUNwQixNQUFNRSxLQUFLLEdBQUksWUFBVzZYLFFBQVMsZUFBY3RLLFVBQVcsRUFBQztJQUM3RCxNQUFNaEQsY0FBYyxHQUFHO01BQUV6SyxNQUFNO01BQUVULFVBQVU7TUFBRUMsVUFBVSxFQUFFQSxVQUFVO01BQUVVLEtBQUs7TUFBRUQ7SUFBUSxDQUFDO0lBQ3JGLE1BQU0rQyxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUNSLGdCQUFnQixDQUFDaUksY0FBYyxFQUFFaEksT0FBTyxDQUFDO0lBQ2hFLE1BQU1RLElBQUksR0FBRyxNQUFNekgsWUFBWSxDQUFDd0gsR0FBRyxDQUFDO0lBQ3BDLE1BQU1nVixPQUFPLEdBQUdqYyxnQkFBZ0IsQ0FBQ2tILElBQUksQ0FBQztJQUN0QyxPQUFPO01BQ0wyRCxJQUFJLEVBQUU5TCxZQUFZLENBQUNrZCxPQUFPLENBQUN6TSxJQUFJLENBQUM7TUFDaENoQyxHQUFHLEVBQUUvSixVQUFVO01BQ2Y4TCxJQUFJLEVBQUVtQztJQUNSLENBQUM7RUFDSDtFQUVBLE1BQU13SyxhQUFhQSxDQUNqQkMsYUFBcUMsRUFDckNDLGFBQWtDLEVBQ2dFO0lBQ2xHLE1BQU1DLGlCQUFpQixHQUFHRCxhQUFhLENBQUN4VixNQUFNO0lBRTlDLElBQUksQ0FBQ21TLEtBQUssQ0FBQ0MsT0FBTyxDQUFDb0QsYUFBYSxDQUFDLEVBQUU7TUFDakMsTUFBTSxJQUFJL2YsTUFBTSxDQUFDa0Ysb0JBQW9CLENBQUMsb0RBQW9ELENBQUM7SUFDN0Y7SUFDQSxJQUFJLEVBQUU0YSxhQUFhLFlBQVk3ZixzQkFBc0IsQ0FBQyxFQUFFO01BQ3RELE1BQU0sSUFBSUQsTUFBTSxDQUFDa0Ysb0JBQW9CLENBQUMsbURBQW1ELENBQUM7SUFDNUY7SUFFQSxJQUFJOGEsaUJBQWlCLEdBQUcsQ0FBQyxJQUFJQSxpQkFBaUIsR0FBRzFkLGdCQUFnQixDQUFDMmQsZUFBZSxFQUFFO01BQ2pGLE1BQU0sSUFBSWpnQixNQUFNLENBQUNrRixvQkFBb0IsQ0FDbEMseUNBQXdDNUMsZ0JBQWdCLENBQUMyZCxlQUFnQixrQkFDNUUsQ0FBQztJQUNIO0lBRUEsS0FBSyxJQUFJM0MsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHMEMsaUJBQWlCLEVBQUUxQyxDQUFDLEVBQUUsRUFBRTtNQUMxQyxNQUFNNEMsSUFBSSxHQUFHSCxhQUFhLENBQUN6QyxDQUFDLENBQXNCO01BQ2xELElBQUksQ0FBQzRDLElBQUksQ0FBQ3hCLFFBQVEsQ0FBQyxDQUFDLEVBQUU7UUFDcEIsT0FBTyxLQUFLO01BQ2Q7SUFDRjtJQUVBLElBQUksQ0FBRW9CLGFBQWEsQ0FBNEJwQixRQUFRLENBQUMsQ0FBQyxFQUFFO01BQ3pELE9BQU8sS0FBSztJQUNkO0lBRUEsTUFBTXlCLGNBQWMsR0FBSUMsU0FBNEIsSUFBSztNQUN2RCxJQUFJL1EsUUFBUSxHQUFHLENBQUMsQ0FBQztNQUNqQixJQUFJLENBQUN6UCxDQUFDLENBQUM4QixPQUFPLENBQUMwZSxTQUFTLENBQUNDLFNBQVMsQ0FBQyxFQUFFO1FBQ25DaFIsUUFBUSxHQUFHO1VBQ1RLLFNBQVMsRUFBRTBRLFNBQVMsQ0FBQ0M7UUFDdkIsQ0FBQztNQUNIO01BQ0EsT0FBT2hSLFFBQVE7SUFDakIsQ0FBQztJQUNELE1BQU1pUixjQUF3QixHQUFHLEVBQUU7SUFDbkMsSUFBSUMsU0FBUyxHQUFHLENBQUM7SUFDakIsSUFBSUMsVUFBVSxHQUFHLENBQUM7SUFFbEIsTUFBTUMsY0FBYyxHQUFHVixhQUFhLENBQUMvTSxHQUFHLENBQUUwTixPQUFPLElBQy9DLElBQUksQ0FBQ3JTLFVBQVUsQ0FBQ3FTLE9BQU8sQ0FBQzlCLE1BQU0sRUFBRThCLE9BQU8sQ0FBQ3RZLE1BQU0sRUFBRStYLGNBQWMsQ0FBQ08sT0FBTyxDQUFDLENBQ3pFLENBQUM7SUFFRCxNQUFNQyxjQUFjLEdBQUcsTUFBTTVMLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDeUwsY0FBYyxDQUFDO0lBRXhELE1BQU1HLGNBQWMsR0FBR0QsY0FBYyxDQUFDM04sR0FBRyxDQUFDLENBQUM2TixXQUFXLEVBQUVDLEtBQUssS0FBSztNQUNoRSxNQUFNVixTQUF3QyxHQUFHTCxhQUFhLENBQUNlLEtBQUssQ0FBQztNQUVyRSxJQUFJQyxXQUFXLEdBQUdGLFdBQVcsQ0FBQzlSLElBQUk7TUFDbEM7TUFDQTtNQUNBLElBQUlxUixTQUFTLElBQUlBLFNBQVMsQ0FBQ1ksVUFBVSxFQUFFO1FBQ3JDO1FBQ0E7UUFDQTtRQUNBLE1BQU1DLFFBQVEsR0FBR2IsU0FBUyxDQUFDYyxLQUFLO1FBQ2hDLE1BQU1DLE1BQU0sR0FBR2YsU0FBUyxDQUFDZ0IsR0FBRztRQUM1QixJQUFJRCxNQUFNLElBQUlKLFdBQVcsSUFBSUUsUUFBUSxHQUFHLENBQUMsRUFBRTtVQUN6QyxNQUFNLElBQUlqaEIsTUFBTSxDQUFDa0Ysb0JBQW9CLENBQ2xDLGtCQUFpQjRiLEtBQU0saUNBQWdDRyxRQUFTLEtBQUlFLE1BQU8sY0FBYUosV0FBWSxHQUN2RyxDQUFDO1FBQ0g7UUFDQUEsV0FBVyxHQUFHSSxNQUFNLEdBQUdGLFFBQVEsR0FBRyxDQUFDO01BQ3JDOztNQUVBO01BQ0EsSUFBSUYsV0FBVyxHQUFHemUsZ0JBQWdCLENBQUMrZSxpQkFBaUIsSUFBSVAsS0FBSyxHQUFHZCxpQkFBaUIsR0FBRyxDQUFDLEVBQUU7UUFDckYsTUFBTSxJQUFJaGdCLE1BQU0sQ0FBQ2tGLG9CQUFvQixDQUNsQyxrQkFBaUI0YixLQUFNLGtCQUFpQkMsV0FBWSxnQ0FDdkQsQ0FBQztNQUNIOztNQUVBO01BQ0FSLFNBQVMsSUFBSVEsV0FBVztNQUN4QixJQUFJUixTQUFTLEdBQUdqZSxnQkFBZ0IsQ0FBQ2dmLDZCQUE2QixFQUFFO1FBQzlELE1BQU0sSUFBSXRoQixNQUFNLENBQUNrRixvQkFBb0IsQ0FBRSxvQ0FBbUNxYixTQUFVLFdBQVUsQ0FBQztNQUNqRzs7TUFFQTtNQUNBRCxjQUFjLENBQUNRLEtBQUssQ0FBQyxHQUFHQyxXQUFXOztNQUVuQztNQUNBUCxVQUFVLElBQUlqZSxhQUFhLENBQUN3ZSxXQUFXLENBQUM7TUFDeEM7TUFDQSxJQUFJUCxVQUFVLEdBQUdsZSxnQkFBZ0IsQ0FBQzJkLGVBQWUsRUFBRTtRQUNqRCxNQUFNLElBQUlqZ0IsTUFBTSxDQUFDa0Ysb0JBQW9CLENBQ2xDLG1EQUFrRDVDLGdCQUFnQixDQUFDMmQsZUFBZ0IsUUFDdEYsQ0FBQztNQUNIO01BRUEsT0FBT1ksV0FBVztJQUNwQixDQUFDLENBQUM7SUFFRixJQUFLTCxVQUFVLEtBQUssQ0FBQyxJQUFJRCxTQUFTLElBQUlqZSxnQkFBZ0IsQ0FBQ2lmLGFBQWEsSUFBS2hCLFNBQVMsS0FBSyxDQUFDLEVBQUU7TUFDeEYsT0FBTyxNQUFNLElBQUksQ0FBQ2xCLFVBQVUsQ0FBQ1UsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUF1QkQsYUFBYSxDQUFDLEVBQUM7SUFDckY7O0lBRUE7SUFDQSxLQUFLLElBQUl4QyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcwQyxpQkFBaUIsRUFBRTFDLENBQUMsRUFBRSxFQUFFO01BQzFDO01BQUV5QyxhQUFhLENBQUN6QyxDQUFDLENBQUMsQ0FBdUJrRSxTQUFTLEdBQUlaLGNBQWMsQ0FBQ3RELENBQUMsQ0FBQyxDQUFvQjlPLElBQUk7SUFDakc7SUFFQSxNQUFNaVQsaUJBQWlCLEdBQUdiLGNBQWMsQ0FBQzVOLEdBQUcsQ0FBQyxDQUFDNk4sV0FBVyxFQUFFYSxHQUFHLEtBQUs7TUFDakUsT0FBTzNnQixtQkFBbUIsQ0FBQ3VmLGNBQWMsQ0FBQ29CLEdBQUcsQ0FBQyxFQUFZM0IsYUFBYSxDQUFDMkIsR0FBRyxDQUFzQixDQUFDO0lBQ3BHLENBQUMsQ0FBQztJQUVGLE1BQU1DLHVCQUF1QixHQUFJdlEsUUFBZ0IsSUFBSztNQUNwRCxNQUFNd1Esb0JBQXdDLEdBQUcsRUFBRTtNQUVuREgsaUJBQWlCLENBQUNqWSxPQUFPLENBQUMsQ0FBQ3FZLFNBQVMsRUFBRUMsVUFBa0IsS0FBSztRQUMzRCxJQUFJRCxTQUFTLEVBQUU7VUFDYixNQUFNO1lBQUVFLFVBQVUsRUFBRUMsUUFBUTtZQUFFQyxRQUFRLEVBQUVDLE1BQU07WUFBRUMsT0FBTyxFQUFFQztVQUFVLENBQUMsR0FBR1AsU0FBUztVQUVoRixNQUFNUSxTQUFTLEdBQUdQLFVBQVUsR0FBRyxDQUFDLEVBQUM7VUFDakMsTUFBTVEsWUFBWSxHQUFHNUYsS0FBSyxDQUFDbk8sSUFBSSxDQUFDeVQsUUFBUSxDQUFDO1VBRXpDLE1BQU1uYSxPQUFPLEdBQUlrWSxhQUFhLENBQUMrQixVQUFVLENBQUMsQ0FBdUJuRCxVQUFVLENBQUMsQ0FBQztVQUU3RTJELFlBQVksQ0FBQzlZLE9BQU8sQ0FBQyxDQUFDK1ksVUFBVSxFQUFFQyxVQUFVLEtBQUs7WUFDL0MsTUFBTUMsUUFBUSxHQUFHUCxNQUFNLENBQUNNLFVBQVUsQ0FBQztZQUVuQyxNQUFNRSxTQUFTLEdBQUksR0FBRU4sU0FBUyxDQUFDeEQsTUFBTyxJQUFHd0QsU0FBUyxDQUFDaGEsTUFBTyxFQUFDO1lBQzNEUCxPQUFPLENBQUMsbUJBQW1CLENBQUMsR0FBSSxHQUFFNmEsU0FBVSxFQUFDO1lBQzdDN2EsT0FBTyxDQUFDLHlCQUF5QixDQUFDLEdBQUksU0FBUTBhLFVBQVcsSUFBR0UsUUFBUyxFQUFDO1lBRXRFLE1BQU1FLGdCQUFnQixHQUFHO2NBQ3ZCeGIsVUFBVSxFQUFFMlksYUFBYSxDQUFDbEIsTUFBTTtjQUNoQ3hYLFVBQVUsRUFBRTBZLGFBQWEsQ0FBQzFYLE1BQU07Y0FDaEN1WCxRQUFRLEVBQUV2TyxRQUFRO2NBQ2xCaUUsVUFBVSxFQUFFZ04sU0FBUztjQUNyQnhhLE9BQU8sRUFBRUEsT0FBTztjQUNoQjZhLFNBQVMsRUFBRUE7WUFDYixDQUFDO1lBRURkLG9CQUFvQixDQUFDN1QsSUFBSSxDQUFDNFUsZ0JBQWdCLENBQUM7VUFDN0MsQ0FBQyxDQUFDO1FBQ0o7TUFDRixDQUFDLENBQUM7TUFFRixPQUFPZixvQkFBb0I7SUFDN0IsQ0FBQztJQUVELE1BQU1nQixjQUFjLEdBQUcsTUFBT0MsVUFBOEIsSUFBSztNQUMvRCxNQUFNQyxXQUFXLEdBQUdELFVBQVUsQ0FBQzdQLEdBQUcsQ0FBQyxNQUFPeEIsSUFBSSxJQUFLO1FBQ2pELE9BQU8sSUFBSSxDQUFDaU8sVUFBVSxDQUFDak8sSUFBSSxDQUFDO01BQzlCLENBQUMsQ0FBQztNQUNGO01BQ0EsT0FBTyxNQUFNdUQsT0FBTyxDQUFDQyxHQUFHLENBQUM4TixXQUFXLENBQUM7SUFDdkMsQ0FBQztJQUVELE1BQU1DLGtCQUFrQixHQUFHLE1BQU8zUixRQUFnQixJQUFLO01BQ3JELE1BQU15UixVQUFVLEdBQUdsQix1QkFBdUIsQ0FBQ3ZRLFFBQVEsQ0FBQztNQUNwRCxNQUFNNFIsUUFBUSxHQUFHLE1BQU1KLGNBQWMsQ0FBQ0MsVUFBVSxDQUFDO01BQ2pELE9BQU9HLFFBQVEsQ0FBQ2hRLEdBQUcsQ0FBRWlRLFFBQVEsS0FBTTtRQUFFelUsSUFBSSxFQUFFeVUsUUFBUSxDQUFDelUsSUFBSTtRQUFFMEUsSUFBSSxFQUFFK1AsUUFBUSxDQUFDL1A7TUFBSyxDQUFDLENBQUMsQ0FBQztJQUNuRixDQUFDO0lBRUQsTUFBTWdRLGdCQUFnQixHQUFHcEQsYUFBYSxDQUFDbkIsVUFBVSxDQUFDLENBQUM7SUFFbkQsTUFBTXZOLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQ2UsMEJBQTBCLENBQUMyTixhQUFhLENBQUNsQixNQUFNLEVBQUVrQixhQUFhLENBQUMxWCxNQUFNLEVBQUU4YSxnQkFBZ0IsQ0FBQztJQUNwSCxJQUFJO01BQ0YsTUFBTUMsU0FBUyxHQUFHLE1BQU1KLGtCQUFrQixDQUFDM1IsUUFBUSxDQUFDO01BQ3BELE9BQU8sTUFBTSxJQUFJLENBQUN1Qix1QkFBdUIsQ0FBQ21OLGFBQWEsQ0FBQ2xCLE1BQU0sRUFBRWtCLGFBQWEsQ0FBQzFYLE1BQU0sRUFBRWdKLFFBQVEsRUFBRStSLFNBQVMsQ0FBQztJQUM1RyxDQUFDLENBQUMsT0FBTzlaLEdBQUcsRUFBRTtNQUNaLE9BQU8sTUFBTSxJQUFJLENBQUMrSSxvQkFBb0IsQ0FBQzBOLGFBQWEsQ0FBQ2xCLE1BQU0sRUFBRWtCLGFBQWEsQ0FBQzFYLE1BQU0sRUFBRWdKLFFBQVEsQ0FBQztJQUM5RjtFQUNGO0VBRUEsTUFBTWdTLFlBQVlBLENBQ2hCeGIsTUFBYyxFQUNkVCxVQUFrQixFQUNsQkMsVUFBa0IsRUFDbEJpYyxPQUFtRCxFQUNuREMsU0FBdUMsRUFDdkNDLFdBQWtCLEVBQ0Q7SUFBQSxJQUFBQyxZQUFBO0lBQ2pCLElBQUksSUFBSSxDQUFDcGQsU0FBUyxFQUFFO01BQ2xCLE1BQU0sSUFBSXBHLE1BQU0sQ0FBQ3lqQixxQkFBcUIsQ0FBRSxhQUFZN2IsTUFBTyxpREFBZ0QsQ0FBQztJQUM5RztJQUVBLElBQUksQ0FBQ3liLE9BQU8sRUFBRTtNQUNaQSxPQUFPLEdBQUdoakIsdUJBQXVCO0lBQ25DO0lBQ0EsSUFBSSxDQUFDaWpCLFNBQVMsRUFBRTtNQUNkQSxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCO0lBQ0EsSUFBSSxDQUFDQyxXQUFXLEVBQUU7TUFDaEJBLFdBQVcsR0FBRyxJQUFJclksSUFBSSxDQUFDLENBQUM7SUFDMUI7O0lBRUE7SUFDQSxJQUFJbVksT0FBTyxJQUFJLE9BQU9BLE9BQU8sS0FBSyxRQUFRLEVBQUU7TUFDMUMsTUFBTSxJQUFJcmMsU0FBUyxDQUFDLG9DQUFvQyxDQUFDO0lBQzNEO0lBQ0EsSUFBSXNjLFNBQVMsSUFBSSxPQUFPQSxTQUFTLEtBQUssUUFBUSxFQUFFO01BQzlDLE1BQU0sSUFBSXRjLFNBQVMsQ0FBQyxzQ0FBc0MsQ0FBQztJQUM3RDtJQUNBLElBQUt1YyxXQUFXLElBQUksRUFBRUEsV0FBVyxZQUFZclksSUFBSSxDQUFDLElBQU1xWSxXQUFXLElBQUlHLEtBQUssRUFBQUYsWUFBQSxHQUFDRCxXQUFXLGNBQUFDLFlBQUEsdUJBQVhBLFlBQUEsQ0FBYTlRLE9BQU8sQ0FBQyxDQUFDLENBQUUsRUFBRTtNQUNyRyxNQUFNLElBQUkxTCxTQUFTLENBQUMsZ0RBQWdELENBQUM7SUFDdkU7SUFFQSxNQUFNYyxLQUFLLEdBQUd3YixTQUFTLEdBQUd6akIsRUFBRSxDQUFDbUssU0FBUyxDQUFDc1osU0FBUyxDQUFDLEdBQUcxZSxTQUFTO0lBRTdELElBQUk7TUFDRixNQUFNTyxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUM2RixvQkFBb0IsQ0FBQzdELFVBQVUsQ0FBQztNQUMxRCxNQUFNLElBQUksQ0FBQ3dCLG9CQUFvQixDQUFDLENBQUM7TUFDakMsTUFBTWpDLFVBQVUsR0FBRyxJQUFJLENBQUNnQixpQkFBaUIsQ0FBQztRQUFFRSxNQUFNO1FBQUV6QyxNQUFNO1FBQUVnQyxVQUFVO1FBQUVDLFVBQVU7UUFBRVU7TUFBTSxDQUFDLENBQUM7TUFFNUYsT0FBT3JILGtCQUFrQixDQUN2QmlHLFVBQVUsRUFDVixJQUFJLENBQUNULFNBQVMsRUFDZCxJQUFJLENBQUNDLFNBQVMsRUFDZCxJQUFJLENBQUNDLFlBQVksRUFDakJoQixNQUFNLEVBQ05vZSxXQUFXLEVBQ1hGLE9BQ0YsQ0FBQztJQUNILENBQUMsQ0FBQyxPQUFPaGEsR0FBRyxFQUFFO01BQ1osSUFBSUEsR0FBRyxZQUFZckosTUFBTSxDQUFDcUwsc0JBQXNCLEVBQUU7UUFDaEQsTUFBTSxJQUFJckwsTUFBTSxDQUFDa0Ysb0JBQW9CLENBQUUsbUNBQWtDaUMsVUFBVyxHQUFFLENBQUM7TUFDekY7TUFFQSxNQUFNa0MsR0FBRztJQUNYO0VBQ0Y7RUFFQSxNQUFNc2Esa0JBQWtCQSxDQUN0QnhjLFVBQWtCLEVBQ2xCQyxVQUFrQixFQUNsQmljLE9BQWdCLEVBQ2hCTyxXQUF5QyxFQUN6Q0wsV0FBa0IsRUFDRDtJQUNqQixJQUFJLENBQUN4aEIsaUJBQWlCLENBQUNvRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUluSCxNQUFNLENBQUNxTCxzQkFBc0IsQ0FBQyx1QkFBdUIsR0FBR2xFLFVBQVUsQ0FBQztJQUMvRTtJQUNBLElBQUksQ0FBQ2xGLGlCQUFpQixDQUFDbUYsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJcEgsTUFBTSxDQUFDc04sc0JBQXNCLENBQUUsd0JBQXVCbEcsVUFBVyxFQUFDLENBQUM7SUFDL0U7SUFFQSxNQUFNeWMsZ0JBQWdCLEdBQUcsQ0FDdkIsdUJBQXVCLEVBQ3ZCLDJCQUEyQixFQUMzQixrQkFBa0IsRUFDbEIsd0JBQXdCLEVBQ3hCLDhCQUE4QixFQUM5QiwyQkFBMkIsQ0FDNUI7SUFDREEsZ0JBQWdCLENBQUNyYSxPQUFPLENBQUVzYSxNQUFNLElBQUs7TUFDbkM7TUFDQSxJQUFJRixXQUFXLEtBQUtoZixTQUFTLElBQUlnZixXQUFXLENBQUNFLE1BQU0sQ0FBQyxLQUFLbGYsU0FBUyxJQUFJLENBQUM5QyxRQUFRLENBQUM4aEIsV0FBVyxDQUFDRSxNQUFNLENBQUMsQ0FBQyxFQUFFO1FBQ3BHLE1BQU0sSUFBSTljLFNBQVMsQ0FBRSxtQkFBa0I4YyxNQUFPLDZCQUE0QixDQUFDO01BQzdFO0lBQ0YsQ0FBQyxDQUFDO0lBQ0YsT0FBTyxJQUFJLENBQUNWLFlBQVksQ0FBQyxLQUFLLEVBQUVqYyxVQUFVLEVBQUVDLFVBQVUsRUFBRWljLE9BQU8sRUFBRU8sV0FBVyxFQUFFTCxXQUFXLENBQUM7RUFDNUY7RUFFQSxNQUFNUSxrQkFBa0JBLENBQUM1YyxVQUFrQixFQUFFQyxVQUFrQixFQUFFaWMsT0FBZ0IsRUFBbUI7SUFDbEcsSUFBSSxDQUFDdGhCLGlCQUFpQixDQUFDb0YsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJbkgsTUFBTSxDQUFDcUwsc0JBQXNCLENBQUUsd0JBQXVCbEUsVUFBVyxFQUFDLENBQUM7SUFDL0U7SUFDQSxJQUFJLENBQUNsRixpQkFBaUIsQ0FBQ21GLFVBQVUsQ0FBQyxFQUFFO01BQ2xDLE1BQU0sSUFBSXBILE1BQU0sQ0FBQ3NOLHNCQUFzQixDQUFFLHdCQUF1QmxHLFVBQVcsRUFBQyxDQUFDO0lBQy9FO0lBRUEsT0FBTyxJQUFJLENBQUNnYyxZQUFZLENBQUMsS0FBSyxFQUFFamMsVUFBVSxFQUFFQyxVQUFVLEVBQUVpYyxPQUFPLENBQUM7RUFDbEU7RUFFQVcsYUFBYUEsQ0FBQSxFQUFlO0lBQzFCLE9BQU8sSUFBSWhoQixVQUFVLENBQUMsQ0FBQztFQUN6QjtFQUVBLE1BQU1paEIsbUJBQW1CQSxDQUFDQyxVQUFzQixFQUE2QjtJQUMzRSxJQUFJLElBQUksQ0FBQzlkLFNBQVMsRUFBRTtNQUNsQixNQUFNLElBQUlwRyxNQUFNLENBQUN5akIscUJBQXFCLENBQUMsa0VBQWtFLENBQUM7SUFDNUc7SUFDQSxJQUFJLENBQUM3aEIsUUFBUSxDQUFDc2lCLFVBQVUsQ0FBQyxFQUFFO01BQ3pCLE1BQU0sSUFBSWxkLFNBQVMsQ0FBQyx1Q0FBdUMsQ0FBQztJQUM5RDtJQUNBLE1BQU1HLFVBQVUsR0FBRytjLFVBQVUsQ0FBQ0MsUUFBUSxDQUFDbFUsTUFBZ0I7SUFDdkQsSUFBSTtNQUNGLE1BQU05SyxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUM2RixvQkFBb0IsQ0FBQzdELFVBQVUsQ0FBQztNQUUxRCxNQUFNOEQsSUFBSSxHQUFHLElBQUlDLElBQUksQ0FBQyxDQUFDO01BQ3ZCLE1BQU1rWixPQUFPLEdBQUcvaEIsWUFBWSxDQUFDNEksSUFBSSxDQUFDO01BQ2xDLE1BQU0sSUFBSSxDQUFDdEMsb0JBQW9CLENBQUMsQ0FBQztNQUVqQyxJQUFJLENBQUN1YixVQUFVLENBQUM1TSxNQUFNLENBQUMrTSxVQUFVLEVBQUU7UUFDakM7UUFDQTtRQUNBLE1BQU1oQixPQUFPLEdBQUcsSUFBSW5ZLElBQUksQ0FBQyxDQUFDO1FBQzFCbVksT0FBTyxDQUFDaUIsVUFBVSxDQUFDamtCLHVCQUF1QixDQUFDO1FBQzNDNmpCLFVBQVUsQ0FBQ0ssVUFBVSxDQUFDbEIsT0FBTyxDQUFDO01BQ2hDO01BRUFhLFVBQVUsQ0FBQzVNLE1BQU0sQ0FBQzJHLFVBQVUsQ0FBQ2xRLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUVxVyxPQUFPLENBQUMsQ0FBQztNQUNqRUYsVUFBVSxDQUFDQyxRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUdDLE9BQU87TUFFM0NGLFVBQVUsQ0FBQzVNLE1BQU0sQ0FBQzJHLFVBQVUsQ0FBQ2xRLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO01BQ2pGbVcsVUFBVSxDQUFDQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsR0FBRyxrQkFBa0I7TUFFM0RELFVBQVUsQ0FBQzVNLE1BQU0sQ0FBQzJHLFVBQVUsQ0FBQ2xRLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRSxJQUFJLENBQUM5SCxTQUFTLEdBQUcsR0FBRyxHQUFHL0UsUUFBUSxDQUFDaUUsTUFBTSxFQUFFOEYsSUFBSSxDQUFDLENBQUMsQ0FBQztNQUM3R2laLFVBQVUsQ0FBQ0MsUUFBUSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsSUFBSSxDQUFDbGUsU0FBUyxHQUFHLEdBQUcsR0FBRy9FLFFBQVEsQ0FBQ2lFLE1BQU0sRUFBRThGLElBQUksQ0FBQztNQUV2RixJQUFJLElBQUksQ0FBQzlFLFlBQVksRUFBRTtRQUNyQitkLFVBQVUsQ0FBQzVNLE1BQU0sQ0FBQzJHLFVBQVUsQ0FBQ2xRLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSx1QkFBdUIsRUFBRSxJQUFJLENBQUM1SCxZQUFZLENBQUMsQ0FBQztRQUNyRitkLFVBQVUsQ0FBQ0MsUUFBUSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsSUFBSSxDQUFDaGUsWUFBWTtNQUNqRTtNQUVBLE1BQU1xZSxZQUFZLEdBQUcxWixNQUFNLENBQUN5RCxJQUFJLENBQUN4RSxJQUFJLENBQUNDLFNBQVMsQ0FBQ2thLFVBQVUsQ0FBQzVNLE1BQU0sQ0FBQyxDQUFDLENBQUM3TyxRQUFRLENBQUMsUUFBUSxDQUFDO01BRXRGeWIsVUFBVSxDQUFDQyxRQUFRLENBQUM3TSxNQUFNLEdBQUdrTixZQUFZO01BRXpDTixVQUFVLENBQUNDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHM2pCLHNCQUFzQixDQUFDMkUsTUFBTSxFQUFFOEYsSUFBSSxFQUFFLElBQUksQ0FBQy9FLFNBQVMsRUFBRXNlLFlBQVksQ0FBQztNQUMzRyxNQUFNN2MsSUFBSSxHQUFHO1FBQ1h4QyxNQUFNLEVBQUVBLE1BQU07UUFDZGdDLFVBQVUsRUFBRUEsVUFBVTtRQUN0QlMsTUFBTSxFQUFFO01BQ1YsQ0FBQztNQUNELE1BQU1sQixVQUFVLEdBQUcsSUFBSSxDQUFDZ0IsaUJBQWlCLENBQUNDLElBQUksQ0FBQztNQUMvQyxNQUFNOGMsT0FBTyxHQUFHLElBQUksQ0FBQzFmLElBQUksSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDQSxJQUFJLEtBQUssR0FBRyxHQUFHLEVBQUUsR0FBSSxJQUFHLElBQUksQ0FBQ0EsSUFBSSxDQUFDMEQsUUFBUSxDQUFDLENBQUUsRUFBQztNQUN0RixNQUFNaWMsTUFBTSxHQUFJLEdBQUVoZSxVQUFVLENBQUNwQixRQUFTLEtBQUlvQixVQUFVLENBQUN0QixJQUFLLEdBQUVxZixPQUFRLEdBQUUvZCxVQUFVLENBQUNuSCxJQUFLLEVBQUM7TUFDdkYsT0FBTztRQUFFb2xCLE9BQU8sRUFBRUQsTUFBTTtRQUFFUCxRQUFRLEVBQUVELFVBQVUsQ0FBQ0M7TUFBUyxDQUFDO0lBQzNELENBQUMsQ0FBQyxPQUFPOWEsR0FBRyxFQUFFO01BQ1osSUFBSUEsR0FBRyxZQUFZckosTUFBTSxDQUFDcUwsc0JBQXNCLEVBQUU7UUFDaEQsTUFBTSxJQUFJckwsTUFBTSxDQUFDa0Ysb0JBQW9CLENBQUUsbUNBQWtDaUMsVUFBVyxHQUFFLENBQUM7TUFDekY7TUFFQSxNQUFNa0MsR0FBRztJQUNYO0VBQ0Y7RUFDQTtFQUNBLE1BQU11YixnQkFBZ0JBLENBQUN6ZCxVQUFrQixFQUFFK0ksTUFBZSxFQUFFbUQsTUFBZSxFQUFFd1IsYUFBbUMsRUFBRTtJQUNoSCxJQUFJLENBQUM5aUIsaUJBQWlCLENBQUNvRixVQUFVLENBQUMsRUFBRTtNQUNsQyxNQUFNLElBQUluSCxNQUFNLENBQUNxTCxzQkFBc0IsQ0FBQyx1QkFBdUIsR0FBR2xFLFVBQVUsQ0FBQztJQUMvRTtJQUNBLElBQUksQ0FBQ3JGLFFBQVEsQ0FBQ29PLE1BQU0sQ0FBQyxFQUFFO01BQ3JCLE1BQU0sSUFBSWxKLFNBQVMsQ0FBQyxtQ0FBbUMsQ0FBQztJQUMxRDtJQUNBLElBQUksQ0FBQ2xGLFFBQVEsQ0FBQ3VSLE1BQU0sQ0FBQyxFQUFFO01BQ3JCLE1BQU0sSUFBSXJNLFNBQVMsQ0FBQyxtQ0FBbUMsQ0FBQztJQUMxRDtJQUVBLElBQUk2ZCxhQUFhLElBQUksQ0FBQ2pqQixRQUFRLENBQUNpakIsYUFBYSxDQUFDLEVBQUU7TUFDN0MsTUFBTSxJQUFJN2QsU0FBUyxDQUFDLDBDQUEwQyxDQUFDO0lBQ2pFO0lBQ0EsSUFBSTtNQUFFOGQsU0FBUztNQUFFQyxPQUFPO01BQUVDO0lBQWUsQ0FBQyxHQUFHSCxhQUFvQztJQUVqRixJQUFJLENBQUMvaUIsUUFBUSxDQUFDZ2pCLFNBQVMsQ0FBQyxFQUFFO01BQ3hCLE1BQU0sSUFBSTlkLFNBQVMsQ0FBQyxzQ0FBc0MsQ0FBQztJQUM3RDtJQUNBLElBQUksQ0FBQ3JGLFFBQVEsQ0FBQ29qQixPQUFPLENBQUMsRUFBRTtNQUN0QixNQUFNLElBQUkvZCxTQUFTLENBQUMsb0NBQW9DLENBQUM7SUFDM0Q7SUFFQSxNQUFNNkssT0FBTyxHQUFHLEVBQUU7SUFDbEI7SUFDQUEsT0FBTyxDQUFDOUQsSUFBSSxDQUFFLFVBQVNsTCxTQUFTLENBQUNxTixNQUFNLENBQUUsRUFBQyxDQUFDO0lBQzNDMkIsT0FBTyxDQUFDOUQsSUFBSSxDQUFFLGFBQVlsTCxTQUFTLENBQUNpaUIsU0FBUyxDQUFFLEVBQUMsQ0FBQztJQUNqRGpULE9BQU8sQ0FBQzlELElBQUksQ0FBRSxtQkFBa0IsQ0FBQztJQUVqQyxJQUFJaVgsY0FBYyxFQUFFO01BQ2xCblQsT0FBTyxDQUFDOUQsSUFBSSxDQUFFLFVBQVMsQ0FBQztJQUMxQjtJQUVBLElBQUlzRixNQUFNLEVBQUU7TUFDVkEsTUFBTSxHQUFHeFEsU0FBUyxDQUFDd1EsTUFBTSxDQUFDO01BQzFCLElBQUkyUixjQUFjLEVBQUU7UUFDbEJuVCxPQUFPLENBQUM5RCxJQUFJLENBQUUsY0FBYXNGLE1BQU8sRUFBQyxDQUFDO01BQ3RDLENBQUMsTUFBTTtRQUNMeEIsT0FBTyxDQUFDOUQsSUFBSSxDQUFFLFVBQVNzRixNQUFPLEVBQUMsQ0FBQztNQUNsQztJQUNGOztJQUVBO0lBQ0EsSUFBSTBSLE9BQU8sRUFBRTtNQUNYLElBQUlBLE9BQU8sSUFBSSxJQUFJLEVBQUU7UUFDbkJBLE9BQU8sR0FBRyxJQUFJO01BQ2hCO01BQ0FsVCxPQUFPLENBQUM5RCxJQUFJLENBQUUsWUFBV2dYLE9BQVEsRUFBQyxDQUFDO0lBQ3JDO0lBQ0FsVCxPQUFPLENBQUNFLElBQUksQ0FBQyxDQUFDO0lBQ2QsSUFBSWpLLEtBQUssR0FBRyxFQUFFO0lBQ2QsSUFBSStKLE9BQU8sQ0FBQ3RILE1BQU0sR0FBRyxDQUFDLEVBQUU7TUFDdEJ6QyxLQUFLLEdBQUksR0FBRStKLE9BQU8sQ0FBQ0ksSUFBSSxDQUFDLEdBQUcsQ0FBRSxFQUFDO0lBQ2hDO0lBRUEsTUFBTXJLLE1BQU0sR0FBRyxLQUFLO0lBQ3BCLE1BQU1nRCxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUNSLGdCQUFnQixDQUFDO01BQUV4QyxNQUFNO01BQUVULFVBQVU7TUFBRVc7SUFBTSxDQUFDLENBQUM7SUFDdEUsTUFBTStDLElBQUksR0FBRyxNQUFNekgsWUFBWSxDQUFDd0gsR0FBRyxDQUFDO0lBQ3BDLE1BQU1xYSxXQUFXLEdBQUd6aEIsZ0JBQWdCLENBQUNxSCxJQUFJLENBQUM7SUFDMUMsT0FBT29hLFdBQVc7RUFDcEI7RUFFQUMsV0FBV0EsQ0FDVC9kLFVBQWtCLEVBQ2xCK0ksTUFBZSxFQUNmdEIsU0FBbUIsRUFDbkJ1VyxRQUEwQyxFQUNoQjtJQUMxQixJQUFJalYsTUFBTSxLQUFLdEwsU0FBUyxFQUFFO01BQ3hCc0wsTUFBTSxHQUFHLEVBQUU7SUFDYjtJQUNBLElBQUl0QixTQUFTLEtBQUtoSyxTQUFTLEVBQUU7TUFDM0JnSyxTQUFTLEdBQUcsS0FBSztJQUNuQjtJQUNBLElBQUksQ0FBQzdNLGlCQUFpQixDQUFDb0YsVUFBVSxDQUFDLEVBQUU7TUFDbEMsTUFBTSxJQUFJbkgsTUFBTSxDQUFDcUwsc0JBQXNCLENBQUMsdUJBQXVCLEdBQUdsRSxVQUFVLENBQUM7SUFDL0U7SUFDQSxJQUFJLENBQUNoRixhQUFhLENBQUMrTixNQUFNLENBQUMsRUFBRTtNQUMxQixNQUFNLElBQUlsUSxNQUFNLENBQUNtUSxrQkFBa0IsQ0FBRSxvQkFBbUJELE1BQU8sRUFBQyxDQUFDO0lBQ25FO0lBQ0EsSUFBSSxDQUFDcE8sUUFBUSxDQUFDb08sTUFBTSxDQUFDLEVBQUU7TUFDckIsTUFBTSxJQUFJbEosU0FBUyxDQUFDLG1DQUFtQyxDQUFDO0lBQzFEO0lBQ0EsSUFBSSxDQUFDeEYsU0FBUyxDQUFDb04sU0FBUyxDQUFDLEVBQUU7TUFDekIsTUFBTSxJQUFJNUgsU0FBUyxDQUFDLHVDQUF1QyxDQUFDO0lBQzlEO0lBQ0EsSUFBSW1lLFFBQVEsSUFBSSxDQUFDdmpCLFFBQVEsQ0FBQ3VqQixRQUFRLENBQUMsRUFBRTtNQUNuQyxNQUFNLElBQUluZSxTQUFTLENBQUMscUNBQXFDLENBQUM7SUFDNUQ7SUFDQSxJQUFJcU0sTUFBMEIsR0FBRyxFQUFFO0lBQ25DLE1BQU13UixhQUFhLEdBQUc7TUFDcEJDLFNBQVMsRUFBRWxXLFNBQVMsR0FBRyxFQUFFLEdBQUcsR0FBRztNQUFFO01BQ2pDbVcsT0FBTyxFQUFFLElBQUk7TUFDYkMsY0FBYyxFQUFFRyxRQUFRLGFBQVJBLFFBQVEsdUJBQVJBLFFBQVEsQ0FBRUg7SUFDNUIsQ0FBQztJQUNELElBQUlJLE9BQXFCLEdBQUcsRUFBRTtJQUM5QixJQUFJNVUsS0FBSyxHQUFHLEtBQUs7SUFDakIsTUFBTUMsVUFBMkIsR0FBRyxJQUFJalIsTUFBTSxDQUFDa1IsUUFBUSxDQUFDO01BQUVDLFVBQVUsRUFBRTtJQUFLLENBQUMsQ0FBQztJQUM3RUYsVUFBVSxDQUFDRyxLQUFLLEdBQUcsWUFBWTtNQUM3QjtNQUNBLElBQUl3VSxPQUFPLENBQUM3YSxNQUFNLEVBQUU7UUFDbEJrRyxVQUFVLENBQUMxQyxJQUFJLENBQUNxWCxPQUFPLENBQUN2VSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2hDO01BQ0Y7TUFDQSxJQUFJTCxLQUFLLEVBQUU7UUFDVCxPQUFPQyxVQUFVLENBQUMxQyxJQUFJLENBQUMsSUFBSSxDQUFDO01BQzlCO01BRUEsSUFBSTtRQUNGLE1BQU0zQixNQUEwQixHQUFHLE1BQU0sSUFBSSxDQUFDd1ksZ0JBQWdCLENBQUN6ZCxVQUFVLEVBQUUrSSxNQUFNLEVBQUVtRCxNQUFNLEVBQUV3UixhQUFhLENBQUM7UUFDekcsSUFBSXpZLE1BQU0sQ0FBQ3NGLFdBQVcsRUFBRTtVQUN0QjJCLE1BQU0sR0FBR2pILE1BQU0sQ0FBQ2laLFVBQVUsSUFBSWpaLE1BQU0sQ0FBQ2taLGVBQWU7UUFDdEQsQ0FBQyxNQUFNO1VBQ0w5VSxLQUFLLEdBQUcsSUFBSTtRQUNkO1FBQ0EsSUFBSXBFLE1BQU0sQ0FBQ2daLE9BQU8sRUFBRTtVQUNsQkEsT0FBTyxHQUFHaFosTUFBTSxDQUFDZ1osT0FBTztRQUMxQjtRQUNBO1FBQ0EzVSxVQUFVLENBQUNHLEtBQUssQ0FBQyxDQUFDO01BQ3BCLENBQUMsQ0FBQyxPQUFPdkgsR0FBRyxFQUFFO1FBQ1pvSCxVQUFVLENBQUNnQixJQUFJLENBQUMsT0FBTyxFQUFFcEksR0FBRyxDQUFDO01BQy9CO0lBQ0YsQ0FBQztJQUNELE9BQU9vSCxVQUFVO0VBQ25CO0FBQ0YifQ=="],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5244, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/notification.mjs"],"sourcesContent":["/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2016 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from 'eventemitter3';\nimport jsonLineParser from 'stream-json/jsonl/Parser.js';\nimport { DEFAULT_REGION } from \"./helpers.mjs\";\nimport { pipesetup, uriEscape } from \"./internal/helper.mjs\";\n\n// TODO: type this\n\n// Base class for three supported configs.\nexport class TargetConfig {\n  setId(id) {\n    this.Id = id;\n  }\n  addEvent(newevent) {\n    if (!this.Event) {\n      this.Event = [];\n    }\n    this.Event.push(newevent);\n  }\n  addFilterSuffix(suffix) {\n    if (!this.Filter) {\n      this.Filter = {\n        S3Key: {\n          FilterRule: []\n        }\n      };\n    }\n    this.Filter.S3Key.FilterRule.push({\n      Name: 'suffix',\n      Value: suffix\n    });\n  }\n  addFilterPrefix(prefix) {\n    if (!this.Filter) {\n      this.Filter = {\n        S3Key: {\n          FilterRule: []\n        }\n      };\n    }\n    this.Filter.S3Key.FilterRule.push({\n      Name: 'prefix',\n      Value: prefix\n    });\n  }\n}\n\n// 1. Topic (simple notification service)\nexport class TopicConfig extends TargetConfig {\n  constructor(arn) {\n    super();\n    this.Topic = arn;\n  }\n}\n\n// 2. Queue (simple queue service)\nexport class QueueConfig extends TargetConfig {\n  constructor(arn) {\n    super();\n    this.Queue = arn;\n  }\n}\n\n// 3. CloudFront (lambda function)\nexport class CloudFunctionConfig extends TargetConfig {\n  constructor(arn) {\n    super();\n    this.CloudFunction = arn;\n  }\n}\n\n// Notification config - array of target configs.\n// Target configs can be\n// 1. Topic (simple notification service)\n// 2. Queue (simple queue service)\n// 3. CloudFront (lambda function)\nexport class NotificationConfig {\n  add(target) {\n    let instance;\n    if (target instanceof TopicConfig) {\n      instance = this.TopicConfiguration ?? (this.TopicConfiguration = []);\n    }\n    if (target instanceof QueueConfig) {\n      instance = this.QueueConfiguration ?? (this.QueueConfiguration = []);\n    }\n    if (target instanceof CloudFunctionConfig) {\n      instance = this.CloudFunctionConfiguration ?? (this.CloudFunctionConfiguration = []);\n    }\n    if (instance) {\n      instance.push(target);\n    }\n  }\n}\nexport const buildARN = (partition, service, region, accountId, resource) => {\n  return 'arn:' + partition + ':' + service + ':' + region + ':' + accountId + ':' + resource;\n};\nexport const ObjectCreatedAll = 's3:ObjectCreated:*';\nexport const ObjectCreatedPut = 's3:ObjectCreated:Put';\nexport const ObjectCreatedPost = 's3:ObjectCreated:Post';\nexport const ObjectCreatedCopy = 's3:ObjectCreated:Copy';\nexport const ObjectCreatedCompleteMultipartUpload = 's3:ObjectCreated:CompleteMultipartUpload';\nexport const ObjectRemovedAll = 's3:ObjectRemoved:*';\nexport const ObjectRemovedDelete = 's3:ObjectRemoved:Delete';\nexport const ObjectRemovedDeleteMarkerCreated = 's3:ObjectRemoved:DeleteMarkerCreated';\nexport const ObjectReducedRedundancyLostObject = 's3:ReducedRedundancyLostObject';\n\n// put string at least so auto-complete could work\n// TODO: type this\n// Poll for notifications, used in #listenBucketNotification.\n// Listening constitutes repeatedly requesting s3 whether or not any\n// changes have occurred.\nexport class NotificationPoller extends EventEmitter {\n  constructor(client, bucketName, prefix, suffix, events) {\n    super();\n    this.client = client;\n    this.bucketName = bucketName;\n    this.prefix = prefix;\n    this.suffix = suffix;\n    this.events = events;\n    this.ending = false;\n  }\n\n  // Starts the polling.\n  start() {\n    this.ending = false;\n    process.nextTick(() => {\n      this.checkForChanges();\n    });\n  }\n\n  // Stops the polling.\n  stop() {\n    this.ending = true;\n  }\n  checkForChanges() {\n    // Don't continue if we're looping again but are cancelled.\n    if (this.ending) {\n      return;\n    }\n    const method = 'GET';\n    const queries = [];\n    if (this.prefix) {\n      const prefix = uriEscape(this.prefix);\n      queries.push(`prefix=${prefix}`);\n    }\n    if (this.suffix) {\n      const suffix = uriEscape(this.suffix);\n      queries.push(`suffix=${suffix}`);\n    }\n    if (this.events) {\n      this.events.forEach(s3event => queries.push('events=' + uriEscape(s3event)));\n    }\n    queries.sort();\n    let query = '';\n    if (queries.length > 0) {\n      query = `${queries.join('&')}`;\n    }\n    const region = this.client.region || DEFAULT_REGION;\n    this.client.makeRequestAsync({\n      method,\n      bucketName: this.bucketName,\n      query\n    }, '', [200], region).then(response => {\n      const asm = jsonLineParser.make();\n      pipesetup(response, asm).on('data', data => {\n        // Data is flushed periodically (every 5 seconds), so we should\n        // handle it after flushing from the JSON parser.\n        let records = data.value.Records;\n        // If null (= no records), change to an empty array.\n        if (!records) {\n          records = [];\n        }\n\n        // Iterate over the notifications and emit them individually.\n        records.forEach(record => {\n          this.emit('notification', record);\n        });\n\n        // If we're done, stop.\n        if (this.ending) {\n          response === null || response === void 0 ? void 0 : response.destroy();\n        }\n      }).on('error', e => this.emit('error', e)).on('end', () => {\n        // Do it again, if we haven't cancelled yet.\n        process.nextTick(() => {\n          this.checkForChanges();\n        });\n      });\n    }, e => {\n      return this.emit('error', e);\n    });\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5456, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/promisify.mjs"],"sourcesContent":["// Returns a wrapper function that will promisify a given callback function.\n// It will preserve 'this'.\nexport function promisify(fn) {\n  return function () {\n    // If the last argument is a function, assume its the callback.\n    let callback = arguments[arguments.length - 1];\n\n    // If the callback is given, don't promisify, just pass straight in.\n    if (typeof callback === 'function') {\n      return fn.apply(this, arguments);\n    }\n\n    // Otherwise, create a new set of arguments, and wrap\n    // it in a promise.\n    let args = [...arguments];\n    return new Promise((resolve, reject) => {\n      // Add the callback function.\n      args.push((err, value) => {\n        if (err) {\n          return reject(err);\n        }\n        resolve(value);\n      });\n\n      // Call the function with our special adaptor callback added.\n      fn.apply(this, args);\n    });\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwcm9taXNpZnkiLCJmbiIsImNhbGxiYWNrIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXBwbHkiLCJhcmdzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwdXNoIiwiZXJyIiwidmFsdWUiXSwic291cmNlcyI6WyJwcm9taXNpZnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gUmV0dXJucyBhIHdyYXBwZXIgZnVuY3Rpb24gdGhhdCB3aWxsIHByb21pc2lmeSBhIGdpdmVuIGNhbGxiYWNrIGZ1bmN0aW9uLlxuLy8gSXQgd2lsbCBwcmVzZXJ2ZSAndGhpcycuXG5leHBvcnQgZnVuY3Rpb24gcHJvbWlzaWZ5KGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gSWYgdGhlIGxhc3QgYXJndW1lbnQgaXMgYSBmdW5jdGlvbiwgYXNzdW1lIGl0cyB0aGUgY2FsbGJhY2suXG4gICAgbGV0IGNhbGxiYWNrID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXVxuXG4gICAgLy8gSWYgdGhlIGNhbGxiYWNrIGlzIGdpdmVuLCBkb24ndCBwcm9taXNpZnksIGp1c3QgcGFzcyBzdHJhaWdodCBpbi5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgY3JlYXRlIGEgbmV3IHNldCBvZiBhcmd1bWVudHMsIGFuZCB3cmFwXG4gICAgLy8gaXQgaW4gYSBwcm9taXNlLlxuICAgIGxldCBhcmdzID0gWy4uLmFyZ3VtZW50c11cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAvLyBBZGQgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAgYXJncy5wdXNoKChlcnIsIHZhbHVlKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycilcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc29sdmUodmFsdWUpXG4gICAgICB9KVxuXG4gICAgICAvLyBDYWxsIHRoZSBmdW5jdGlvbiB3aXRoIG91ciBzcGVjaWFsIGFkYXB0b3IgY2FsbGJhY2sgYWRkZWQuXG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmdzKVxuICAgIH0pXG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLE9BQU8sU0FBU0EsU0FBU0EsQ0FBQ0MsRUFBRSxFQUFFO0VBQzVCLE9BQU8sWUFBWTtJQUNqQjtJQUNBLElBQUlDLFFBQVEsR0FBR0MsU0FBUyxDQUFDQSxTQUFTLENBQUNDLE1BQU0sR0FBRyxDQUFDLENBQUM7O0lBRTlDO0lBQ0EsSUFBSSxPQUFPRixRQUFRLEtBQUssVUFBVSxFQUFFO01BQ2xDLE9BQU9ELEVBQUUsQ0FBQ0ksS0FBSyxDQUFDLElBQUksRUFBRUYsU0FBUyxDQUFDO0lBQ2xDOztJQUVBO0lBQ0E7SUFDQSxJQUFJRyxJQUFJLEdBQUcsQ0FBQyxHQUFHSCxTQUFTLENBQUM7SUFFekIsT0FBTyxJQUFJSSxPQUFPLENBQUMsQ0FBQ0MsT0FBTyxFQUFFQyxNQUFNLEtBQUs7TUFDdEM7TUFDQUgsSUFBSSxDQUFDSSxJQUFJLENBQUMsQ0FBQ0MsR0FBRyxFQUFFQyxLQUFLLEtBQUs7UUFDeEIsSUFBSUQsR0FBRyxFQUFFO1VBQ1AsT0FBT0YsTUFBTSxDQUFDRSxHQUFHLENBQUM7UUFDcEI7UUFFQUgsT0FBTyxDQUFDSSxLQUFLLENBQUM7TUFDaEIsQ0FBQyxDQUFDOztNQUVGO01BQ0FYLEVBQUUsQ0FBQ0ksS0FBSyxDQUFDLElBQUksRUFBRUMsSUFBSSxDQUFDO0lBQ3RCLENBQUMsQ0FBQztFQUNKLENBQUM7QUFDSCJ9"],"names":[],"mappings":"AAAA,4EAA4E;AAC5E,2BAA2B;;;;AACpB,SAAS,UAAU,EAAE;IAC1B,OAAO;QACL,+DAA+D;QAC/D,IAAI,WAAW,SAAS,CAAC,UAAU,MAAM,GAAG,EAAE;QAE9C,oEAAoE;QACpE,IAAI,OAAO,aAAa,YAAY;YAClC,OAAO,GAAG,KAAK,CAAC,IAAI,EAAE;QACxB;QAEA,qDAAqD;QACrD,mBAAmB;QACnB,IAAI,OAAO;eAAI;SAAU;QACzB,OAAO,IAAI,QAAQ,CAAC,SAAS;YAC3B,6BAA6B;YAC7B,KAAK,IAAI,CAAC,CAAC,KAAK;gBACd,IAAI,KAAK;oBACP,OAAO,OAAO;gBAChB;gBACA,QAAQ;YACV;YAEA,6DAA6D;YAC7D,GAAG,KAAK,CAAC,IAAI,EAAE;QACjB;IACF;AACF,EACA,gxEAAgxE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5493, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/xml-parsers.mjs"],"sourcesContent":["/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2015 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as errors from \"./errors.mjs\";\nimport { parseXml, sanitizeETag, sanitizeObjectKey, toArray } from \"./internal/helper.mjs\";\n\n// parse XML response for bucket notification\nexport function parseBucketNotification(xml) {\n  var result = {\n    TopicConfiguration: [],\n    QueueConfiguration: [],\n    CloudFunctionConfiguration: []\n  };\n  // Parse the events list\n  var genEvents = function (events) {\n    var result = [];\n    if (events) {\n      toArray(events).forEach(s3event => {\n        result.push(s3event);\n      });\n    }\n    return result;\n  };\n  // Parse all filter rules\n  var genFilterRules = function (filters) {\n    var result = [];\n    if (filters) {\n      filters = toArray(filters);\n      if (filters[0].S3Key) {\n        filters[0].S3Key = toArray(filters[0].S3Key);\n        if (filters[0].S3Key[0].FilterRule) {\n          toArray(filters[0].S3Key[0].FilterRule).forEach(rule => {\n            var Name = toArray(rule.Name)[0];\n            var Value = toArray(rule.Value)[0];\n            result.push({\n              Name,\n              Value\n            });\n          });\n        }\n      }\n    }\n    return result;\n  };\n  var xmlobj = parseXml(xml);\n  xmlobj = xmlobj.NotificationConfiguration;\n\n  // Parse all topic configurations in the xml\n  if (xmlobj.TopicConfiguration) {\n    toArray(xmlobj.TopicConfiguration).forEach(config => {\n      var Id = toArray(config.Id)[0];\n      var Topic = toArray(config.Topic)[0];\n      var Event = genEvents(config.Event);\n      var Filter = genFilterRules(config.Filter);\n      result.TopicConfiguration.push({\n        Id,\n        Topic,\n        Event,\n        Filter\n      });\n    });\n  }\n  // Parse all topic configurations in the xml\n  if (xmlobj.QueueConfiguration) {\n    toArray(xmlobj.QueueConfiguration).forEach(config => {\n      var Id = toArray(config.Id)[0];\n      var Queue = toArray(config.Queue)[0];\n      var Event = genEvents(config.Event);\n      var Filter = genFilterRules(config.Filter);\n      result.QueueConfiguration.push({\n        Id,\n        Queue,\n        Event,\n        Filter\n      });\n    });\n  }\n  // Parse all QueueConfiguration arrays\n  if (xmlobj.CloudFunctionConfiguration) {\n    toArray(xmlobj.CloudFunctionConfiguration).forEach(config => {\n      var Id = toArray(config.Id)[0];\n      var CloudFunction = toArray(config.CloudFunction)[0];\n      var Event = genEvents(config.Event);\n      var Filter = genFilterRules(config.Filter);\n      result.CloudFunctionConfiguration.push({\n        Id,\n        CloudFunction,\n        Event,\n        Filter\n      });\n    });\n  }\n  return result;\n}\n\n// parse XML response for list objects v2 in a bucket\nexport function parseListObjectsV2(xml) {\n  var result = {\n    objects: [],\n    isTruncated: false\n  };\n  var xmlobj = parseXml(xml);\n  if (!xmlobj.ListBucketResult) {\n    throw new errors.InvalidXMLError('Missing tag: \"ListBucketResult\"');\n  }\n  xmlobj = xmlobj.ListBucketResult;\n  if (xmlobj.IsTruncated) {\n    result.isTruncated = xmlobj.IsTruncated;\n  }\n  if (xmlobj.NextContinuationToken) {\n    result.nextContinuationToken = xmlobj.NextContinuationToken;\n  }\n  if (xmlobj.Contents) {\n    toArray(xmlobj.Contents).forEach(content => {\n      var name = sanitizeObjectKey(toArray(content.Key)[0]);\n      var lastModified = new Date(content.LastModified);\n      var etag = sanitizeETag(content.ETag);\n      var size = content.Size;\n      result.objects.push({\n        name,\n        lastModified,\n        etag,\n        size\n      });\n    });\n  }\n  if (xmlobj.CommonPrefixes) {\n    toArray(xmlobj.CommonPrefixes).forEach(commonPrefix => {\n      result.objects.push({\n        prefix: sanitizeObjectKey(toArray(commonPrefix.Prefix)[0]),\n        size: 0\n      });\n    });\n  }\n  return result;\n}\n\n// parse XML response for list objects v2 with metadata in a bucket\nexport function parseListObjectsV2WithMetadata(xml) {\n  var result = {\n    objects: [],\n    isTruncated: false\n  };\n  var xmlobj = parseXml(xml);\n  if (!xmlobj.ListBucketResult) {\n    throw new errors.InvalidXMLError('Missing tag: \"ListBucketResult\"');\n  }\n  xmlobj = xmlobj.ListBucketResult;\n  if (xmlobj.IsTruncated) {\n    result.isTruncated = xmlobj.IsTruncated;\n  }\n  if (xmlobj.NextContinuationToken) {\n    result.nextContinuationToken = xmlobj.NextContinuationToken;\n  }\n  if (xmlobj.Contents) {\n    toArray(xmlobj.Contents).forEach(content => {\n      var name = sanitizeObjectKey(content.Key);\n      var lastModified = new Date(content.LastModified);\n      var etag = sanitizeETag(content.ETag);\n      var size = content.Size;\n      var metadata;\n      if (content.UserMetadata != null) {\n        metadata = toArray(content.UserMetadata)[0];\n      } else {\n        metadata = null;\n      }\n      result.objects.push({\n        name,\n        lastModified,\n        etag,\n        size,\n        metadata\n      });\n    });\n  }\n  if (xmlobj.CommonPrefixes) {\n    toArray(xmlobj.CommonPrefixes).forEach(commonPrefix => {\n      result.objects.push({\n        prefix: sanitizeObjectKey(toArray(commonPrefix.Prefix)[0]),\n        size: 0\n      });\n    });\n  }\n  return result;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5695, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/transformers.mjs"],"sourcesContent":["/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2015, 2016 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as Crypto from \"crypto\";\nimport Through2 from 'through2';\nimport { isFunction } from \"./internal/helper.mjs\";\nimport * as xmlParsers from \"./xml-parsers.mjs\";\n\n// getConcater returns a stream that concatenates the input and emits\n// the concatenated output when 'end' has reached. If an optional\n// parser function is passed upon reaching the 'end' of the stream,\n// `parser(concatenated_data)` will be emitted.\nexport function getConcater(parser, emitError) {\n  var objectMode = false;\n  var bufs = [];\n  if (parser && !isFunction(parser)) {\n    throw new TypeError('parser should be of type \"function\"');\n  }\n  if (parser) {\n    objectMode = true;\n  }\n  return Through2({\n    objectMode\n  }, function (chunk, enc, cb) {\n    bufs.push(chunk);\n    cb();\n  }, function (cb) {\n    if (emitError) {\n      cb(parser(Buffer.concat(bufs).toString()));\n      // cb(e) would mean we have to emit 'end' by explicitly calling this.push(null)\n      this.push(null);\n      return;\n    }\n    if (bufs.length) {\n      if (parser) {\n        this.push(parser(Buffer.concat(bufs).toString()));\n      } else {\n        this.push(Buffer.concat(bufs));\n      }\n    }\n    cb();\n  });\n}\n\n// A through stream that calculates md5sum and sha256sum\nexport function getHashSummer(enableSHA256) {\n  var md5 = Crypto.createHash('md5');\n  var sha256 = Crypto.createHash('sha256');\n  return Through2.obj(function (chunk, enc, cb) {\n    if (enableSHA256) {\n      sha256.update(chunk);\n    } else {\n      md5.update(chunk);\n    }\n    cb();\n  }, function (cb) {\n    var md5sum = '';\n    var sha256sum = '';\n    if (enableSHA256) {\n      sha256sum = sha256.digest('hex');\n    } else {\n      md5sum = md5.digest('base64');\n    }\n    var hashData = {\n      md5sum,\n      sha256sum\n    };\n    this.push(hashData);\n    this.push(null);\n    cb();\n  });\n}\n\n// Following functions return a stream object that parses XML\n// and emits suitable Javascript objects.\n\n// Parses listObjects response.\nexport function getListObjectsV2Transformer() {\n  return getConcater(xmlParsers.parseListObjectsV2);\n}\n\n// Parses listObjects with metadata response.\nexport function getListObjectsV2WithMetadataTransformer() {\n  return getConcater(xmlParsers.parseListObjectsV2WithMetadata);\n}\n\n// Parses GET/SET BucketNotification response\nexport function getBucketNotificationTransformer() {\n  return getConcater(xmlParsers.parseBucketNotification);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDcnlwdG8iLCJUaHJvdWdoMiIsImlzRnVuY3Rpb24iLCJ4bWxQYXJzZXJzIiwiZ2V0Q29uY2F0ZXIiLCJwYXJzZXIiLCJlbWl0RXJyb3IiLCJvYmplY3RNb2RlIiwiYnVmcyIsIlR5cGVFcnJvciIsImNodW5rIiwiZW5jIiwiY2IiLCJwdXNoIiwiQnVmZmVyIiwiY29uY2F0IiwidG9TdHJpbmciLCJsZW5ndGgiLCJnZXRIYXNoU3VtbWVyIiwiZW5hYmxlU0hBMjU2IiwibWQ1IiwiY3JlYXRlSGFzaCIsInNoYTI1NiIsIm9iaiIsInVwZGF0ZSIsIm1kNXN1bSIsInNoYTI1NnN1bSIsImRpZ2VzdCIsImhhc2hEYXRhIiwiZ2V0TGlzdE9iamVjdHNWMlRyYW5zZm9ybWVyIiwicGFyc2VMaXN0T2JqZWN0c1YyIiwiZ2V0TGlzdE9iamVjdHNWMldpdGhNZXRhZGF0YVRyYW5zZm9ybWVyIiwicGFyc2VMaXN0T2JqZWN0c1YyV2l0aE1ldGFkYXRhIiwiZ2V0QnVja2V0Tm90aWZpY2F0aW9uVHJhbnNmb3JtZXIiLCJwYXJzZUJ1Y2tldE5vdGlmaWNhdGlvbiJdLCJzb3VyY2VzIjpbInRyYW5zZm9ybWVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWluSU8gSmF2YXNjcmlwdCBMaWJyYXJ5IGZvciBBbWF6b24gUzMgQ29tcGF0aWJsZSBDbG91ZCBTdG9yYWdlLCAoQykgMjAxNSwgMjAxNiBNaW5JTywgSW5jLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgKiBhcyBDcnlwdG8gZnJvbSAnbm9kZTpjcnlwdG8nXG5cbmltcG9ydCBUaHJvdWdoMiBmcm9tICd0aHJvdWdoMidcblxuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaW50ZXJuYWwvaGVscGVyLnRzJ1xuaW1wb3J0ICogYXMgeG1sUGFyc2VycyBmcm9tICcuL3htbC1wYXJzZXJzLmpzJ1xuXG4vLyBnZXRDb25jYXRlciByZXR1cm5zIGEgc3RyZWFtIHRoYXQgY29uY2F0ZW5hdGVzIHRoZSBpbnB1dCBhbmQgZW1pdHNcbi8vIHRoZSBjb25jYXRlbmF0ZWQgb3V0cHV0IHdoZW4gJ2VuZCcgaGFzIHJlYWNoZWQuIElmIGFuIG9wdGlvbmFsXG4vLyBwYXJzZXIgZnVuY3Rpb24gaXMgcGFzc2VkIHVwb24gcmVhY2hpbmcgdGhlICdlbmQnIG9mIHRoZSBzdHJlYW0sXG4vLyBgcGFyc2VyKGNvbmNhdGVuYXRlZF9kYXRhKWAgd2lsbCBiZSBlbWl0dGVkLlxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbmNhdGVyKHBhcnNlciwgZW1pdEVycm9yKSB7XG4gIHZhciBvYmplY3RNb2RlID0gZmFsc2VcbiAgdmFyIGJ1ZnMgPSBbXVxuXG4gIGlmIChwYXJzZXIgJiYgIWlzRnVuY3Rpb24ocGFyc2VyKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcnNlciBzaG91bGQgYmUgb2YgdHlwZSBcImZ1bmN0aW9uXCInKVxuICB9XG5cbiAgaWYgKHBhcnNlcikge1xuICAgIG9iamVjdE1vZGUgPSB0cnVlXG4gIH1cblxuICByZXR1cm4gVGhyb3VnaDIoXG4gICAgeyBvYmplY3RNb2RlIH0sXG4gICAgZnVuY3Rpb24gKGNodW5rLCBlbmMsIGNiKSB7XG4gICAgICBidWZzLnB1c2goY2h1bmspXG4gICAgICBjYigpXG4gICAgfSxcbiAgICBmdW5jdGlvbiAoY2IpIHtcbiAgICAgIGlmIChlbWl0RXJyb3IpIHtcbiAgICAgICAgY2IocGFyc2VyKEJ1ZmZlci5jb25jYXQoYnVmcykudG9TdHJpbmcoKSkpXG4gICAgICAgIC8vIGNiKGUpIHdvdWxkIG1lYW4gd2UgaGF2ZSB0byBlbWl0ICdlbmQnIGJ5IGV4cGxpY2l0bHkgY2FsbGluZyB0aGlzLnB1c2gobnVsbClcbiAgICAgICAgdGhpcy5wdXNoKG51bGwpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgaWYgKGJ1ZnMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChwYXJzZXIpIHtcbiAgICAgICAgICB0aGlzLnB1c2gocGFyc2VyKEJ1ZmZlci5jb25jYXQoYnVmcykudG9TdHJpbmcoKSkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5wdXNoKEJ1ZmZlci5jb25jYXQoYnVmcykpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNiKClcbiAgICB9LFxuICApXG59XG5cbi8vIEEgdGhyb3VnaCBzdHJlYW0gdGhhdCBjYWxjdWxhdGVzIG1kNXN1bSBhbmQgc2hhMjU2c3VtXG5leHBvcnQgZnVuY3Rpb24gZ2V0SGFzaFN1bW1lcihlbmFibGVTSEEyNTYpIHtcbiAgdmFyIG1kNSA9IENyeXB0by5jcmVhdGVIYXNoKCdtZDUnKVxuICB2YXIgc2hhMjU2ID0gQ3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTI1NicpXG5cbiAgcmV0dXJuIFRocm91Z2gyLm9iaihcbiAgICBmdW5jdGlvbiAoY2h1bmssIGVuYywgY2IpIHtcbiAgICAgIGlmIChlbmFibGVTSEEyNTYpIHtcbiAgICAgICAgc2hhMjU2LnVwZGF0ZShjaHVuaylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1kNS51cGRhdGUoY2h1bmspXG4gICAgICB9XG4gICAgICBjYigpXG4gICAgfSxcbiAgICBmdW5jdGlvbiAoY2IpIHtcbiAgICAgIHZhciBtZDVzdW0gPSAnJ1xuICAgICAgdmFyIHNoYTI1NnN1bSA9ICcnXG4gICAgICBpZiAoZW5hYmxlU0hBMjU2KSB7XG4gICAgICAgIHNoYTI1NnN1bSA9IHNoYTI1Ni5kaWdlc3QoJ2hleCcpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZDVzdW0gPSBtZDUuZGlnZXN0KCdiYXNlNjQnKVxuICAgICAgfVxuICAgICAgdmFyIGhhc2hEYXRhID0geyBtZDVzdW0sIHNoYTI1NnN1bSB9XG4gICAgICB0aGlzLnB1c2goaGFzaERhdGEpXG4gICAgICB0aGlzLnB1c2gobnVsbClcbiAgICAgIGNiKClcbiAgICB9LFxuICApXG59XG5cbi8vIEZvbGxvd2luZyBmdW5jdGlvbnMgcmV0dXJuIGEgc3RyZWFtIG9iamVjdCB0aGF0IHBhcnNlcyBYTUxcbi8vIGFuZCBlbWl0cyBzdWl0YWJsZSBKYXZhc2NyaXB0IG9iamVjdHMuXG5cbi8vIFBhcnNlcyBsaXN0T2JqZWN0cyByZXNwb25zZS5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMaXN0T2JqZWN0c1YyVHJhbnNmb3JtZXIoKSB7XG4gIHJldHVybiBnZXRDb25jYXRlcih4bWxQYXJzZXJzLnBhcnNlTGlzdE9iamVjdHNWMilcbn1cblxuLy8gUGFyc2VzIGxpc3RPYmplY3RzIHdpdGggbWV0YWRhdGEgcmVzcG9uc2UuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGlzdE9iamVjdHNWMldpdGhNZXRhZGF0YVRyYW5zZm9ybWVyKCkge1xuICByZXR1cm4gZ2V0Q29uY2F0ZXIoeG1sUGFyc2Vycy5wYXJzZUxpc3RPYmplY3RzVjJXaXRoTWV0YWRhdGEpXG59XG5cbi8vIFBhcnNlcyBHRVQvU0VUIEJ1Y2tldE5vdGlmaWNhdGlvbiByZXNwb25zZVxuZXhwb3J0IGZ1bmN0aW9uIGdldEJ1Y2tldE5vdGlmaWNhdGlvblRyYW5zZm9ybWVyKCkge1xuICByZXR1cm4gZ2V0Q29uY2F0ZXIoeG1sUGFyc2Vycy5wYXJzZUJ1Y2tldE5vdGlmaWNhdGlvbilcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU8sS0FBS0EsTUFBTTtBQUVsQixPQUFPQyxRQUFRLE1BQU0sVUFBVTtBQUUvQixTQUFTQyxVQUFVLFFBQVEsdUJBQXNCO0FBQ2pELE9BQU8sS0FBS0MsVUFBVSxNQUFNLG1CQUFrQjs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLFNBQVNDLFdBQVdBLENBQUNDLE1BQU0sRUFBRUMsU0FBUyxFQUFFO0VBQzdDLElBQUlDLFVBQVUsR0FBRyxLQUFLO0VBQ3RCLElBQUlDLElBQUksR0FBRyxFQUFFO0VBRWIsSUFBSUgsTUFBTSxJQUFJLENBQUNILFVBQVUsQ0FBQ0csTUFBTSxDQUFDLEVBQUU7SUFDakMsTUFBTSxJQUFJSSxTQUFTLENBQUMscUNBQXFDLENBQUM7RUFDNUQ7RUFFQSxJQUFJSixNQUFNLEVBQUU7SUFDVkUsVUFBVSxHQUFHLElBQUk7RUFDbkI7RUFFQSxPQUFPTixRQUFRLENBQ2I7SUFBRU07RUFBVyxDQUFDLEVBQ2QsVUFBVUcsS0FBSyxFQUFFQyxHQUFHLEVBQUVDLEVBQUUsRUFBRTtJQUN4QkosSUFBSSxDQUFDSyxJQUFJLENBQUNILEtBQUssQ0FBQztJQUNoQkUsRUFBRSxDQUFDLENBQUM7RUFDTixDQUFDLEVBQ0QsVUFBVUEsRUFBRSxFQUFFO0lBQ1osSUFBSU4sU0FBUyxFQUFFO01BQ2JNLEVBQUUsQ0FBQ1AsTUFBTSxDQUFDUyxNQUFNLENBQUNDLE1BQU0sQ0FBQ1AsSUFBSSxDQUFDLENBQUNRLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUMxQztNQUNBLElBQUksQ0FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQztNQUNmO0lBQ0Y7SUFDQSxJQUFJTCxJQUFJLENBQUNTLE1BQU0sRUFBRTtNQUNmLElBQUlaLE1BQU0sRUFBRTtRQUNWLElBQUksQ0FBQ1EsSUFBSSxDQUFDUixNQUFNLENBQUNTLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDUCxJQUFJLENBQUMsQ0FBQ1EsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ25ELENBQUMsTUFBTTtRQUNMLElBQUksQ0FBQ0gsSUFBSSxDQUFDQyxNQUFNLENBQUNDLE1BQU0sQ0FBQ1AsSUFBSSxDQUFDLENBQUM7TUFDaEM7SUFDRjtJQUNBSSxFQUFFLENBQUMsQ0FBQztFQUNOLENBQ0YsQ0FBQztBQUNIOztBQUVBO0FBQ0EsT0FBTyxTQUFTTSxhQUFhQSxDQUFDQyxZQUFZLEVBQUU7RUFDMUMsSUFBSUMsR0FBRyxHQUFHcEIsTUFBTSxDQUFDcUIsVUFBVSxDQUFDLEtBQUssQ0FBQztFQUNsQyxJQUFJQyxNQUFNLEdBQUd0QixNQUFNLENBQUNxQixVQUFVLENBQUMsUUFBUSxDQUFDO0VBRXhDLE9BQU9wQixRQUFRLENBQUNzQixHQUFHLENBQ2pCLFVBQVViLEtBQUssRUFBRUMsR0FBRyxFQUFFQyxFQUFFLEVBQUU7SUFDeEIsSUFBSU8sWUFBWSxFQUFFO01BQ2hCRyxNQUFNLENBQUNFLE1BQU0sQ0FBQ2QsS0FBSyxDQUFDO0lBQ3RCLENBQUMsTUFBTTtNQUNMVSxHQUFHLENBQUNJLE1BQU0sQ0FBQ2QsS0FBSyxDQUFDO0lBQ25CO0lBQ0FFLEVBQUUsQ0FBQyxDQUFDO0VBQ04sQ0FBQyxFQUNELFVBQVVBLEVBQUUsRUFBRTtJQUNaLElBQUlhLE1BQU0sR0FBRyxFQUFFO0lBQ2YsSUFBSUMsU0FBUyxHQUFHLEVBQUU7SUFDbEIsSUFBSVAsWUFBWSxFQUFFO01BQ2hCTyxTQUFTLEdBQUdKLE1BQU0sQ0FBQ0ssTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNsQyxDQUFDLE1BQU07TUFDTEYsTUFBTSxHQUFHTCxHQUFHLENBQUNPLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDL0I7SUFDQSxJQUFJQyxRQUFRLEdBQUc7TUFBRUgsTUFBTTtNQUFFQztJQUFVLENBQUM7SUFDcEMsSUFBSSxDQUFDYixJQUFJLENBQUNlLFFBQVEsQ0FBQztJQUNuQixJQUFJLENBQUNmLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDZkQsRUFBRSxDQUFDLENBQUM7RUFDTixDQUNGLENBQUM7QUFDSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsT0FBTyxTQUFTaUIsMkJBQTJCQSxDQUFBLEVBQUc7RUFDNUMsT0FBT3pCLFdBQVcsQ0FBQ0QsVUFBVSxDQUFDMkIsa0JBQWtCLENBQUM7QUFDbkQ7O0FBRUE7QUFDQSxPQUFPLFNBQVNDLHVDQUF1Q0EsQ0FBQSxFQUFHO0VBQ3hELE9BQU8zQixXQUFXLENBQUNELFVBQVUsQ0FBQzZCLDhCQUE4QixDQUFDO0FBQy9EOztBQUVBO0FBQ0EsT0FBTyxTQUFTQyxnQ0FBZ0NBLENBQUEsRUFBRztFQUNqRCxPQUFPN0IsV0FBVyxDQUFDRCxVQUFVLENBQUMrQix1QkFBdUIsQ0FBQztBQUN4RCJ9"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;CAcC;;;;;;;AAED;AACA;AACA;AACA;;;;;AAMO,SAAS,YAAY,MAAM,EAAE,SAAS;IAC3C,IAAI,aAAa;IACjB,IAAI,OAAO,EAAE;IACb,IAAI,UAAU,CAAC,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE,SAAS;QACjC,MAAM,IAAI,UAAU;IACtB;IACA,IAAI,QAAQ;QACV,aAAa;IACf;IACA,OAAO,CAAA,GAAA,sIAAA,CAAA,UAAQ,AAAD,EAAE;QACd;IACF,GAAG,SAAU,KAAK,EAAE,GAAG,EAAE,EAAE;QACzB,KAAK,IAAI,CAAC;QACV;IACF,GAAG,SAAU,EAAE;QACb,IAAI,WAAW;YACb,GAAG,OAAO,OAAO,MAAM,CAAC,MAAM,QAAQ;YACtC,+EAA+E;YAC/E,IAAI,CAAC,IAAI,CAAC;YACV;QACF;QACA,IAAI,KAAK,MAAM,EAAE;YACf,IAAI,QAAQ;gBACV,IAAI,CAAC,IAAI,CAAC,OAAO,OAAO,MAAM,CAAC,MAAM,QAAQ;YAC/C,OAAO;gBACL,IAAI,CAAC,IAAI,CAAC,OAAO,MAAM,CAAC;YAC1B;QACF;QACA;IACF;AACF;AAGO,SAAS,cAAc,YAAY;IACxC,IAAI,MAAM,CAAA,GAAA,qGAAA,CAAA,aAAiB,AAAD,EAAE;IAC5B,IAAI,SAAS,CAAA,GAAA,qGAAA,CAAA,aAAiB,AAAD,EAAE;IAC/B,OAAO,sIAAA,CAAA,UAAQ,CAAC,GAAG,CAAC,SAAU,KAAK,EAAE,GAAG,EAAE,EAAE;QAC1C,IAAI,cAAc;YAChB,OAAO,MAAM,CAAC;QAChB,OAAO;YACL,IAAI,MAAM,CAAC;QACb;QACA;IACF,GAAG,SAAU,EAAE;QACb,IAAI,SAAS;QACb,IAAI,YAAY;QAChB,IAAI,cAAc;YAChB,YAAY,OAAO,MAAM,CAAC;QAC5B,OAAO;YACL,SAAS,IAAI,MAAM,CAAC;QACtB;QACA,IAAI,WAAW;YACb;YACA;QACF;QACA,IAAI,CAAC,IAAI,CAAC;QACV,IAAI,CAAC,IAAI,CAAC;QACV;IACF;AACF;AAMO,SAAS;IACd,OAAO,YAAY,yJAAA,CAAA,qBAA6B;AAClD;AAGO,SAAS;IACd,OAAO,YAAY,yJAAA,CAAA,iCAAyC;AAC9D;AAGO,SAAS;IACd,OAAO,YAAY,yJAAA,CAAA,0BAAkC;AACvD,EACA,wyPAAwyP","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5797, "column": 0}, "map": {"version":3,"sources":["file:///home/m/pandoraprov4/node_modules/minio/dist/esm/minio.mjs"],"sourcesContent":["/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2015 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as Stream from \"stream\";\nimport xml2js from 'xml2js';\nimport * as errors from \"./errors.mjs\";\nimport { callbackify } from \"./internal/callbackify.mjs\";\nimport { TypedClient } from \"./internal/client.mjs\";\nimport { CopyConditions } from \"./internal/copy-conditions.mjs\";\nimport { isBoolean, isFunction, isNumber, isObject, isString, isValidBucketName, isValidPrefix, pipesetup, uriEscape } from \"./internal/helper.mjs\";\nimport { PostPolicy } from \"./internal/post-policy.mjs\";\nimport { NotificationConfig, NotificationPoller } from \"./notification.mjs\";\nimport { promisify } from \"./promisify.mjs\";\nimport * as transformers from \"./transformers.mjs\";\nexport * from \"./errors.mjs\";\nexport * from \"./helpers.mjs\";\nexport * from \"./notification.mjs\";\nexport { CopyConditions, PostPolicy };\nexport class Client extends TypedClient {\n  //\n  // __Arguments__\n  // * `appName` _string_ - Application name.\n  // * `appVersion` _string_ - Application version.\n\n  // listObjectsV2Query - (List Objects V2) - List some or all (up to 1000) of the objects in a bucket.\n  //\n  // You can use the request parameters as selection criteria to return a subset of the objects in a bucket.\n  // request parameters :-\n  // * `bucketName` _string_: name of the bucket\n  // * `prefix` _string_: Limits the response to keys that begin with the specified prefix.\n  // * `continuation-token` _string_: Used to continue iterating over a set of objects.\n  // * `delimiter` _string_: A delimiter is a character you use to group keys.\n  // * `max-keys` _number_: Sets the maximum number of keys returned in the response body.\n  // * `start-after` _string_: Specifies the key to start after when listing objects in a bucket.\n  listObjectsV2Query(bucketName, prefix, continuationToken, delimiter, maxKeys, startAfter) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isString(prefix)) {\n      throw new TypeError('prefix should be of type \"string\"');\n    }\n    if (!isString(continuationToken)) {\n      throw new TypeError('continuationToken should be of type \"string\"');\n    }\n    if (!isString(delimiter)) {\n      throw new TypeError('delimiter should be of type \"string\"');\n    }\n    if (!isNumber(maxKeys)) {\n      throw new TypeError('maxKeys should be of type \"number\"');\n    }\n    if (!isString(startAfter)) {\n      throw new TypeError('startAfter should be of type \"string\"');\n    }\n    var queries = [];\n\n    // Call for listing objects v2 API\n    queries.push(`list-type=2`);\n    queries.push(`encoding-type=url`);\n\n    // escape every value in query string, except maxKeys\n    queries.push(`prefix=${uriEscape(prefix)}`);\n    queries.push(`delimiter=${uriEscape(delimiter)}`);\n    if (continuationToken) {\n      continuationToken = uriEscape(continuationToken);\n      queries.push(`continuation-token=${continuationToken}`);\n    }\n    // Set start-after\n    if (startAfter) {\n      startAfter = uriEscape(startAfter);\n      queries.push(`start-after=${startAfter}`);\n    }\n    // no need to escape maxKeys\n    if (maxKeys) {\n      if (maxKeys >= 1000) {\n        maxKeys = 1000;\n      }\n      queries.push(`max-keys=${maxKeys}`);\n    }\n    queries.sort();\n    var query = '';\n    if (queries.length > 0) {\n      query = `${queries.join('&')}`;\n    }\n    var method = 'GET';\n    var transformer = transformers.getListObjectsV2Transformer();\n    this.makeRequest({\n      method,\n      bucketName,\n      query\n    }, '', [200], '', true, (e, response) => {\n      if (e) {\n        return transformer.emit('error', e);\n      }\n      pipesetup(response, transformer);\n    });\n    return transformer;\n  }\n\n  // List the objects in the bucket using S3 ListObjects V2\n  //\n  // __Arguments__\n  // * `bucketName` _string_: name of the bucket\n  // * `prefix` _string_: the prefix of the objects that should be listed (optional, default `''`)\n  // * `recursive` _bool_: `true` indicates recursive style listing and `false` indicates directory style listing delimited by '/'. (optional, default `false`)\n  // * `startAfter` _string_: Specifies the key to start after when listing objects in a bucket. (optional, default `''`)\n  //\n  // __Return Value__\n  // * `stream` _Stream_: stream emitting the objects in the bucket, the object is of the format:\n  //   * `obj.name` _string_: name of the object\n  //   * `obj.prefix` _string_: name of the object prefix\n  //   * `obj.size` _number_: size of the object\n  //   * `obj.etag` _string_: etag of the object\n  //   * `obj.lastModified` _Date_: modified time stamp\n  listObjectsV2(bucketName, prefix, recursive, startAfter) {\n    if (prefix === undefined) {\n      prefix = '';\n    }\n    if (recursive === undefined) {\n      recursive = false;\n    }\n    if (startAfter === undefined) {\n      startAfter = '';\n    }\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isValidPrefix(prefix)) {\n      throw new errors.InvalidPrefixError(`Invalid prefix : ${prefix}`);\n    }\n    if (!isString(prefix)) {\n      throw new TypeError('prefix should be of type \"string\"');\n    }\n    if (!isBoolean(recursive)) {\n      throw new TypeError('recursive should be of type \"boolean\"');\n    }\n    if (!isString(startAfter)) {\n      throw new TypeError('startAfter should be of type \"string\"');\n    }\n    // if recursive is false set delimiter to '/'\n    var delimiter = recursive ? '' : '/';\n    var continuationToken = '';\n    var objects = [];\n    var ended = false;\n    var readStream = Stream.Readable({\n      objectMode: true\n    });\n    readStream._read = () => {\n      // push one object per _read()\n      if (objects.length) {\n        readStream.push(objects.shift());\n        return;\n      }\n      if (ended) {\n        return readStream.push(null);\n      }\n      // if there are no objects to push do query for the next batch of objects\n      this.listObjectsV2Query(bucketName, prefix, continuationToken, delimiter, 1000, startAfter).on('error', e => readStream.emit('error', e)).on('data', result => {\n        if (result.isTruncated) {\n          continuationToken = result.nextContinuationToken;\n        } else {\n          ended = true;\n        }\n        objects = result.objects;\n        readStream._read();\n      });\n    };\n    return readStream;\n  }\n\n  // Remove all the notification configurations in the S3 provider\n  setBucketNotification(bucketName, config, cb) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isObject(config)) {\n      throw new TypeError('notification config should be of type \"Object\"');\n    }\n    if (!isFunction(cb)) {\n      throw new TypeError('callback should be of type \"function\"');\n    }\n    var method = 'PUT';\n    var query = 'notification';\n    var builder = new xml2js.Builder({\n      rootName: 'NotificationConfiguration',\n      renderOpts: {\n        pretty: false\n      },\n      headless: true\n    });\n    var payload = builder.buildObject(config);\n    this.makeRequest({\n      method,\n      bucketName,\n      query\n    }, payload, [200], '', false, cb);\n  }\n  removeAllBucketNotification(bucketName, cb) {\n    this.setBucketNotification(bucketName, new NotificationConfig(), cb);\n  }\n\n  // Return the list of notification configurations stored\n  // in the S3 provider\n  getBucketNotification(bucketName, cb) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName);\n    }\n    if (!isFunction(cb)) {\n      throw new TypeError('callback should be of type \"function\"');\n    }\n    var method = 'GET';\n    var query = 'notification';\n    this.makeRequest({\n      method,\n      bucketName,\n      query\n    }, '', [200], '', true, (e, response) => {\n      if (e) {\n        return cb(e);\n      }\n      var transformer = transformers.getBucketNotificationTransformer();\n      var bucketNotification;\n      pipesetup(response, transformer).on('data', result => bucketNotification = result).on('error', e => cb(e)).on('end', () => cb(null, bucketNotification));\n    });\n  }\n\n  // Listens for bucket notifications. Returns an EventEmitter.\n  listenBucketNotification(bucketName, prefix, suffix, events) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError(`Invalid bucket name: ${bucketName}`);\n    }\n    if (!isString(prefix)) {\n      throw new TypeError('prefix must be of type string');\n    }\n    if (!isString(suffix)) {\n      throw new TypeError('suffix must be of type string');\n    }\n    if (!Array.isArray(events)) {\n      throw new TypeError('events must be of type Array');\n    }\n    let listener = new NotificationPoller(this, bucketName, prefix, suffix, events);\n    listener.start();\n    return listener;\n  }\n}\nClient.prototype.getBucketNotification = promisify(Client.prototype.getBucketNotification);\nClient.prototype.setBucketNotification = promisify(Client.prototype.setBucketNotification);\nClient.prototype.removeAllBucketNotification = promisify(Client.prototype.removeAllBucketNotification);\n\n// refactored API use promise internally\nClient.prototype.makeBucket = callbackify(Client.prototype.makeBucket);\nClient.prototype.bucketExists = callbackify(Client.prototype.bucketExists);\nClient.prototype.removeBucket = callbackify(Client.prototype.removeBucket);\nClient.prototype.listBuckets = callbackify(Client.prototype.listBuckets);\nClient.prototype.getObject = callbackify(Client.prototype.getObject);\nClient.prototype.fGetObject = callbackify(Client.prototype.fGetObject);\nClient.prototype.getPartialObject = callbackify(Client.prototype.getPartialObject);\nClient.prototype.statObject = callbackify(Client.prototype.statObject);\nClient.prototype.putObjectRetention = callbackify(Client.prototype.putObjectRetention);\nClient.prototype.putObject = callbackify(Client.prototype.putObject);\nClient.prototype.fPutObject = callbackify(Client.prototype.fPutObject);\nClient.prototype.removeObject = callbackify(Client.prototype.removeObject);\nClient.prototype.removeBucketReplication = callbackify(Client.prototype.removeBucketReplication);\nClient.prototype.setBucketReplication = callbackify(Client.prototype.setBucketReplication);\nClient.prototype.getBucketReplication = callbackify(Client.prototype.getBucketReplication);\nClient.prototype.getObjectLegalHold = callbackify(Client.prototype.getObjectLegalHold);\nClient.prototype.setObjectLegalHold = callbackify(Client.prototype.setObjectLegalHold);\nClient.prototype.setObjectLockConfig = callbackify(Client.prototype.setObjectLockConfig);\nClient.prototype.getObjectLockConfig = callbackify(Client.prototype.getObjectLockConfig);\nClient.prototype.getBucketPolicy = callbackify(Client.prototype.getBucketPolicy);\nClient.prototype.setBucketPolicy = callbackify(Client.prototype.setBucketPolicy);\nClient.prototype.getBucketTagging = callbackify(Client.prototype.getBucketTagging);\nClient.prototype.getObjectTagging = callbackify(Client.prototype.getObjectTagging);\nClient.prototype.setBucketTagging = callbackify(Client.prototype.setBucketTagging);\nClient.prototype.removeBucketTagging = callbackify(Client.prototype.removeBucketTagging);\nClient.prototype.setObjectTagging = callbackify(Client.prototype.setObjectTagging);\nClient.prototype.removeObjectTagging = callbackify(Client.prototype.removeObjectTagging);\nClient.prototype.getBucketVersioning = callbackify(Client.prototype.getBucketVersioning);\nClient.prototype.setBucketVersioning = callbackify(Client.prototype.setBucketVersioning);\nClient.prototype.selectObjectContent = callbackify(Client.prototype.selectObjectContent);\nClient.prototype.setBucketLifecycle = callbackify(Client.prototype.setBucketLifecycle);\nClient.prototype.getBucketLifecycle = callbackify(Client.prototype.getBucketLifecycle);\nClient.prototype.removeBucketLifecycle = callbackify(Client.prototype.removeBucketLifecycle);\nClient.prototype.setBucketEncryption = callbackify(Client.prototype.setBucketEncryption);\nClient.prototype.getBucketEncryption = callbackify(Client.prototype.getBucketEncryption);\nClient.prototype.removeBucketEncryption = callbackify(Client.prototype.removeBucketEncryption);\nClient.prototype.getObjectRetention = callbackify(Client.prototype.getObjectRetention);\nClient.prototype.removeObjects = callbackify(Client.prototype.removeObjects);\nClient.prototype.removeIncompleteUpload = callbackify(Client.prototype.removeIncompleteUpload);\nClient.prototype.copyObject = callbackify(Client.prototype.copyObject);\nClient.prototype.composeObject = callbackify(Client.prototype.composeObject);\nClient.prototype.presignedUrl = callbackify(Client.prototype.presignedUrl);\nClient.prototype.presignedGetObject = callbackify(Client.prototype.presignedGetObject);\nClient.prototype.presignedPutObject = callbackify(Client.prototype.presignedPutObject);\nClient.prototype.presignedPostPolicy = callbackify(Client.prototype.presignedPostPolicy);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}